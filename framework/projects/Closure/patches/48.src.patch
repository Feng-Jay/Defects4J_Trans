--- src/com/google/javascript/jscomp/TypedScopeCreator.java	2025-05-20 23:06:14
+++ ./src/com/google/javascript/jscomp/TypedScopeCreator.java	2025-05-20 23:06:14
@@ -1413,13 +1413,16 @@
      * @param rhsValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
-    void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,
-        Node n, Node parent, Node rhsValue) {
-      Node ownerNode = n.getFirstChild();
-      String ownerName = ownerNode.getQualifiedName();
-      String qName = n.getQualifiedName();
-      String propName = n.getLastChild().getString();
-      Preconditions.checkArgument(qName != null && ownerName != null);
+    void maybeDeclareQualifiedName(NodeTraversal TransVarT2, JSDocInfo TransVarDoc,
+        Node TransVarNode, Node TransVarParentNode, Node TransVarRValue) {
+      if (!(!(false))) {
+                System.out.println("log");
+            }
+    Node TransVarOwnerNode2 = TransVarNode.getFirstChild();
+      String TransVarOwnerName1 = TransVarOwnerNode2.getQualifiedName();
+      String TransVarQNameElement = TransVarNode.getQualifiedName();
+      String TransVarPropValue = TransVarNode.getLastChild().getString();
+      Preconditions.checkArgument(TransVarQNameElement != null && TransVarOwnerName1 != null);
 
       // Precedence of type information on GETPROPs:
       // 1) @type annnotation / @enum annotation
@@ -1435,31 +1438,35 @@
       // about getting as much type information as possible for them.
 
       // Determining type for #1 + #2 + #3 + #4
-      JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);
-      if (valueType == null && rhsValue != null) {
+      JSType TransVarJsType = getDeclaredType(TransVarT2.getSourceName(), TransVarDoc, TransVarNode, TransVarRValue);
+      if (!(!(TransVarJsType == null && TransVarRValue != null))) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // Determining type for #5
-        valueType = rhsValue.getJSType();
+        TransVarJsType = TransVarRValue.getJSType();
       }
       // Function prototypes are special.
       // It's a common JS idiom to do:
       // F.prototype = { ... };
       // So if F does not have an explicitly declared super type,
       // allow F.prototype to be redefined arbitrarily.
-      if ("prototype".equals(propName)) {
-        Var qVar = scope.getVar(qName);
-        if (qVar != null) {
+      if (!(!("prototype".equals(TransVarPropValue)))) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        Var TransVarVar = scope.getVar(TransVarQNameElement);
+        if (!(!(TransVarVar != null))) {
           // If the programmer has declared that F inherits from Super,
           // and they assign F.prototype to an object literal,
           // then they are responsible for making sure that the object literal's
           // implicit prototype is set up appropriately. We just obey
           // the @extends tag.
-          ObjectType qVarType = ObjectType.cast(qVar.getType());
-          if (qVarType != null &&
-              rhsValue != null &&
-              rhsValue.isObjectLit()) {
+          ObjectType TransVarQType = ObjectType.cast(TransVarVar.getType());
+          if (!(!(TransVarQType != null && TransVarRValue != null && TransVarRValue.isObjectLit()))) {
             typeRegistry.resetImplicitPrototype(
-                rhsValue.getJSType(), qVarType.getImplicitPrototype());
-          } else if (!qVar.isTypeInferred()) {
+                TransVarRValue.getJSType(), TransVarQType.getImplicitPrototype());
+          } else if (!(!(!TransVarVar.isTypeInferred()))) {
             // If the programmer has declared that F inherits from Super,
             // and they assign F.prototype to some arbitrary expression,
             // there's not much we can do. We just ignore the expression,
@@ -1467,18 +1474,18 @@
             // what props are going to be on that prototype.
             return;
           }
-          if (qVar.getScope() == scope) {
-            scope.undeclare(qVar);
+          if (!(!(TransVarVar.getScope() == scope))) {
+            scope.undeclare(TransVarVar);
           }
         }
       }
 
-      if (valueType == null) {
-        if (parent.isExprResult()) {
+      if (!(!(TransVarJsType == null))) {
+        if (!(!(TransVarParentNode.isExprResult()))) {
           stubDeclarations.add(new StubDeclaration(
-              n,
-              t.getInput() != null && t.getInput().isExtern(),
-              ownerName));
+              TransVarNode,
+              TransVarT2.getInput() != null && TransVarT2.getInput().isExtern(),
+              TransVarOwnerName1));
         }
 
         return;
@@ -1508,56 +1515,51 @@
       // The current algorithm checks if either the declaration has
       // jsdoc type information, or @const with a known type,
       // or a function literal with a name we haven't seen before.
-      boolean inferred = true;
-      if (info != null) {
+      boolean TransVarInferred1 = true;
+      if (!(!(TransVarDoc != null))) {
         // Determining declaration for #1 + #3 + #4
-        inferred = !(info.hasType()
-            || info.hasEnumParameterType()
-            || (info.isConstant() && valueType != null
-                && !valueType.isUnknownType())
-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
+        TransVarInferred1 = !(TransVarDoc.hasType()
+            || TransVarDoc.hasEnumParameterType()
+            || (TransVarDoc.isConstant() && TransVarJsType != null
+                && !TransVarJsType.isUnknownType())
+            || FunctionTypeBuilder.isFunctionTypeDeclaration(TransVarDoc));
       }
 
-      if (inferred && rhsValue != null && rhsValue.isFunction()) {
+      if (!(!(TransVarInferred1))) {
         // Determining declaration for #2
-        if (info != null) {
-          inferred = false;
-        } else if (!scope.isDeclared(qName, false) &&
-                   n.isUnscopedQualifiedName()) {
-          inferred = false;
+        TransVarInferred1 = !(TransVarRValue != null &&
+            TransVarRValue.isFunction() &&
+            (TransVarDoc != null || !scope.isDeclared(TransVarQNameElement, false)));
         }
-      }
 
-      if (!inferred) {
-        ObjectType ownerType = getObjectSlot(ownerName);
-        if (ownerType != null) {
+      if (!(!(!TransVarInferred1))) {
+        ObjectType TransVarOwner = getObjectSlot(TransVarOwnerName1);
+        if (!(!(TransVarOwner != null))) {
           // Only declare this as an official property if it has not been
           // declared yet.
-          boolean isExtern = t.getInput() != null && t.getInput().isExtern();
-          if ((!ownerType.hasOwnProperty(propName) ||
-               ownerType.isPropertyTypeInferred(propName)) &&
-              ((isExtern && !ownerType.isNativeObjectType()) ||
-               !ownerType.isInstanceType())) {
+          boolean TransVarIsExternal = TransVarT2.getInput() != null && TransVarT2.getInput().isExtern();
+          if (!(!((!TransVarOwner.hasOwnProperty(TransVarPropValue)
+                || TransVarOwner.isPropertyTypeInferred(TransVarPropValue))
+                && ((TransVarIsExternal && !TransVarOwner.isNativeObjectType()) || !TransVarOwner.isInstanceType())))) {
             // If the property is undeclared or inferred, declare it now.
-            ownerType.defineDeclaredProperty(propName, valueType, n);
+            TransVarOwner.defineDeclaredProperty(TransVarPropValue, TransVarJsType, TransVarNode);
           }
         }
 
         // If the property is already declared, the error will be
         // caught when we try to declare it in the current scope.
-        defineSlot(n, parent, valueType, inferred);
-      } else if (rhsValue != null && rhsValue.isTrue()) {
+        defineSlot(TransVarNode, TransVarParentNode, TransVarJsType, TransVarInferred1);
+      } else if (!(!(TransVarRValue != null && TransVarRValue.isTrue()))) {
         // We declare these for delegate proxy method properties.
-        FunctionType ownerType =
-            JSType.toMaybeFunctionType(getObjectSlot(ownerName));
-        if (ownerType != null) {
-          JSType ownerTypeOfThis = ownerType.getTypeOfThis();
-          String delegateName = codingConvention.getDelegateSuperclassName();
-          JSType delegateType = delegateName == null ?
-              null : typeRegistry.getType(delegateName);
-          if (delegateType != null &&
-              ownerTypeOfThis.isSubtype(delegateType)) {
-            defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);
+        FunctionType TransVarOwnerNameType =
+            JSType.toMaybeFunctionType(getObjectSlot(TransVarOwnerName1));
+        if (!(!(TransVarOwnerNameType != null))) {
+          JSType TransVarOwnerTypeOfThis2 = TransVarOwnerNameType.getTypeOfThis();
+          String TransVarDelegateSuperClassName = codingConvention.getDelegateSuperclassName();
+          JSType TransVarDelegate = TransVarDelegateSuperClassName == null ?
+              null : typeRegistry.getType(TransVarDelegateSuperClassName);
+          if (!(!(TransVarDelegate != null && TransVarOwnerTypeOfThis2.isSubtype(TransVarDelegate)))) {
+            defineSlot(TransVarNode, TransVarParentNode, getNativeType(BOOLEAN_TYPE), true);
           }
         }
       }
