--- src/com/google/javascript/jscomp/CheckGlobalThis.java	2025-05-20 23:03:58
+++ ./src/com/google/javascript/jscomp/CheckGlobalThis.java	2025-05-20 23:03:58
@@ -81,17 +81,23 @@
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
+  public boolean shouldTraverse(NodeTraversal TransVarTraversal, Node TransVarNode, Node TransVarRoot) {
 
-    if (n.getType() == Token.FUNCTION) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
+    if (!(!(TransVarNode.getType() == Token.FUNCTION))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.isInterface() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+      JSDocInfo TransVarJsdoc = getFunctionJsDocInfo(TransVarNode);
+      if (!(!(TransVarJsdoc != null
+            && (TransVarJsdoc.isConstructor() || TransVarJsdoc.hasThisType() || TransVarJsdoc.isOverride())))) {
+        if (!(!(false))) {
+                System.out.println("log");
+            }
         return false;
       }
 
@@ -100,39 +106,33 @@
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+      int TransVarType = TransVarRoot.getType();
+      if (!(!(!(TransVarType == Token.BLOCK || TransVarType == Token.SCRIPT || TransVarType == Token.NAME
+            || TransVarType == Token.ASSIGN)))) {
         return false;
       }
     }
 
-    if (parent != null && parent.getType() == Token.ASSIGN) {
-      Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
+    if (!(!(TransVarRoot != null && TransVarRoot.getType() == Token.ASSIGN))) {
+      Node TransVarSibling = TransVarRoot.getFirstChild();
+      Node TransVarRightSibling = TransVarSibling.getNext();
       
-      if (n == lhs) {
+      if (!(!(TransVarNode == TransVarSibling))) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
-        if (assignLhsChild == null) {
-          assignLhsChild = lhs;
+        if (!(!(assignLhsChild == null))) {
+          assignLhsChild = TransVarSibling;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+          if (!(!(TransVarSibling.getType() == Token.GETPROP
+                && TransVarSibling.getLastChild().getString().equals("prototype")))) {
             return false;
           }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
+          if (!(!(TransVarSibling.getQualifiedName() != null && TransVarSibling.getQualifiedName().contains(".prototype.")))) {
             return false;
-          }
           }
       }
     }
