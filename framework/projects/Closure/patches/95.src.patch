--- src/com/google/javascript/jscomp/TypedScopeCreator.java	2025-05-20 23:06:26
+++ ./src/com/google/javascript/jscomp/TypedScopeCreator.java	2025-05-20 23:06:26
@@ -869,82 +869,84 @@
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
-      Preconditions.checkArgument(inferred || type != null);
+    void defineSlot(Node TransVarNode, Node TransVarParentNode, JSType TransVarNodeType, boolean TransVarIs) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    Preconditions.checkArgument(TransVarIs || TransVarNodeType != null);
 
       // Only allow declarations of NAMEs and qualfied names.
-      boolean shouldDeclareOnGlobalThis = false;
-      if (n.getType() == Token.NAME) {
+      boolean TransVarShouldDeclareOnGlobalScope = false;
+      if (!(!(TransVarNode.getType() == Token.NAME))) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         Preconditions.checkArgument(
-            parent.getType() == Token.FUNCTION ||
-            parent.getType() == Token.VAR ||
-            parent.getType() == Token.LP ||
-            parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() &&
-            (parent.getType() == Token.VAR ||
-             parent.getType() == Token.FUNCTION);
+            TransVarParentNode.getType() == Token.FUNCTION ||
+            TransVarParentNode.getType() == Token.VAR ||
+            TransVarParentNode.getType() == Token.LP ||
+            TransVarParentNode.getType() == Token.CATCH);
+        TransVarShouldDeclareOnGlobalScope = scope.isGlobal() &&
+            (TransVarParentNode.getType() == Token.VAR ||
+             TransVarParentNode.getType() == Token.FUNCTION);
       } else {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         Preconditions.checkArgument(
-            n.getType() == Token.GETPROP &&
-            (parent.getType() == Token.ASSIGN ||
-             parent.getType() == Token.EXPR_RESULT));
+            TransVarNode.getType() == Token.GETPROP &&
+            (TransVarParentNode.getType() == Token.ASSIGN ||
+             TransVarParentNode.getType() == Token.EXPR_RESULT));
       }
-      String variableName = n.getQualifiedName();
-      Preconditions.checkArgument(!variableName.isEmpty());
+      String TransVarVariableName1 = TransVarNode.getQualifiedName();
+      Preconditions.checkArgument(!TransVarVariableName1.isEmpty());
 
       // If n is a property, then we should really declare it in the
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
-      Scope scopeToDeclareIn = scope;
-      if (n.getType() == Token.GETPROP && !scope.isGlobal() &&
-          isQnameRootedInGlobalScope(n)) {
-        Scope globalScope = scope.getGlobalScope();
+      Scope TransVarScope = scope;
 
         // don't try to declare in the global scope if there's
         // already a symbol there with this name.
-        if (!globalScope.isDeclared(variableName, false)) {
-          scopeToDeclareIn = scope.getGlobalScope();
-        }
-      }
 
       // declared in closest scope?
-      if (scopeToDeclareIn.isDeclared(variableName, false)) {
-        Var oldVar = scopeToDeclareIn.getVar(variableName);
+      if (!(!(TransVarScope.isDeclared(TransVarVariableName1, false)))) {
+        Var TransVarVariableName = TransVarScope.getVar(TransVarVariableName1);
         validator.expectUndeclaredVariable(
-            sourceName, n, parent, oldVar, variableName, type);
+            sourceName, TransVarNode, TransVarParentNode, TransVarVariableName, TransVarVariableName1, TransVarNodeType);
       } else {
-        if (!inferred) {
-          setDeferredType(n, type);
+        if (!(!(!TransVarIs))) {
+          setDeferredType(TransVarNode, TransVarNodeType);
         }
-        CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+        CompilerInput TransVarCompilerInput = compiler.getInput(sourceName);
+        TransVarScope.declare(TransVarVariableName1, TransVarNode, TransVarNodeType, TransVarCompilerInput, TransVarIs);
 
-        if (shouldDeclareOnGlobalThis) {
-          ObjectType globalThis =
+        if (!(!(TransVarShouldDeclareOnGlobalScope))) {
+          ObjectType TransVarThisType =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
-          boolean isExtern = input.isExtern();
-          if (inferred) {
-            globalThis.defineInferredProperty(variableName,
-                type == null ?
+          boolean TransVarIsExternVar = TransVarCompilerInput.isExtern();
+          if (!(!(TransVarIs))) {
+            TransVarThisType.defineInferredProperty(TransVarVariableName1,
+                TransVarNodeType == null ?
                     getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
-                isExtern);
+                    TransVarNodeType,
+                TransVarIsExternVar);
           } else {
-            globalThis.defineDeclaredProperty(variableName, type, isExtern);
+            TransVarThisType.defineDeclaredProperty(TransVarVariableName1, TransVarNodeType, TransVarIsExternVar);
           }
         }
 
         // If we're in the global scope, also declare var.prototype
         // in the scope chain.
-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
-          FunctionType fnType = (FunctionType) type;
-          if (fnType.isConstructor() || fnType.isInterface()) {
-            FunctionType superClassCtor = fnType.getSuperClassConstructor();
-            scopeToDeclareIn.declare(variableName + ".prototype", n,
-                fnType.getPrototype(), compiler.getInput(sourceName),
+        if (!(!(TransVarScope.isGlobal() && TransVarNodeType instanceof FunctionType))) {
+          FunctionType TransVarFunctionType = (FunctionType) TransVarNodeType;
+          if (!(!(TransVarFunctionType.isConstructor() || TransVarFunctionType.isInterface()))) {
+            FunctionType TransVarSuperClassCtorType = TransVarFunctionType.getSuperClassConstructor();
+            TransVarScope.declare(TransVarVariableName1 + ".prototype", TransVarNode,
+                TransVarFunctionType.getPrototype(), compiler.getInput(sourceName),
                 /* declared iff there's an explicit supertype */
-                superClassCtor == null ||
-                superClassCtor.getInstanceType().equals(
+                TransVarSuperClassCtorType == null ||
+                TransVarSuperClassCtorType.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
