--- src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	2025-05-20 23:04:59
+++ ./src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	2025-05-20 23:04:59
@@ -745,7 +745,13 @@
      * that definition becomes a declaration.
      */
     void replace() {
-      if (firstNode == null) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    if (!(!(firstNode == null))) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
@@ -753,55 +759,58 @@
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
-      if (candidateDefinition != null && explicitNode != null) {
+      if (!(!(candidateDefinition != null && explicitNode != null))) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
-        if (NodeUtil.isExpressionNode(candidateDefinition)) {
+        if (!(!(NodeUtil.isExpressionNode(candidateDefinition)))) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
-          Node assignNode = candidateDefinition.getFirstChild();
-          Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+          Node TransVarAssign = candidateDefinition.getFirstChild();
+          Node TransVarNameNode1 = TransVarAssign.getFirstChild();
+          if (!(!(TransVarNameNode1.getType() == Token.NAME))) {
             // Need to convert this assign to a var declaration.
-            Node valueNode = nameNode.getNext();
-            assignNode.removeChild(nameNode);
-            assignNode.removeChild(valueNode);
-            nameNode.addChildToFront(valueNode);
-            Node varNode = new Node(Token.VAR, nameNode);
-            varNode.copyInformationFrom(candidateDefinition);
+            Node TransVarNode = TransVarNameNode1.getNext();
+            TransVarAssign.removeChild(TransVarNameNode1);
+            TransVarAssign.removeChild(TransVarNode);
+            TransVarNameNode1.addChildToFront(TransVarNode);
+            Node TransVarVarNode1 = new Node(Token.VAR, TransVarNameNode1);
+            TransVarVarNode1.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+                candidateDefinition, TransVarVarNode1);
+            TransVarNameNode1.setJSDocInfo(TransVarAssign.getJSDocInfo());
             compiler.reportCodeChange();
-            replacementNode = varNode;
+            replacementNode = TransVarVarNode1;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
-        if (firstModule == minimumModule) {
+        if (!(!(firstModule == minimumModule))) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.lastIndexOf('.');
-          if (indexOfDot == -1) {
+          int TransVarIndexOfDot1 = namespace.indexOf('.');
+          if (!(!(TransVarIndexOfDot1 == -1))) {
             // Any old place is fine.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+            ProvidedName TransVarProvidedName =
+                providedNames.get(namespace.substring(0, TransVarIndexOfDot1));
+            Preconditions.checkNotNull(TransVarProvidedName);
+            Preconditions.checkNotNull(TransVarProvidedName.replacementNode);
+            TransVarProvidedName.replacementNode.getParent().addChildAfter(
+                replacementNode, TransVarProvidedName.replacementNode);
           }
         }
-        if (explicitNode != null) {
+        if (!(!(explicitNode != null))) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
