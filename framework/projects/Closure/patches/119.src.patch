--- src/com/google/javascript/jscomp/GlobalNamespace.java	2025-05-20 23:09:33
+++ ./src/com/google/javascript/jscomp/GlobalNamespace.java	2025-05-20 23:09:33
@@ -303,130 +303,171 @@
       return true;
     }
 
-    public void collect(JSModule module, Scope scope, Node n) {
-      Node parent = n.getParent();
+    public void collect(JSModule TransVarJsModule, Scope TransVarJsScope, Node TransVarNode) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    Node TransVarNParent = TransVarNode.getParent();
 
-      String name;
-      boolean isSet = false;
-      Name.Type type = Name.Type.OTHER;
-      boolean isPropAssign = false;
+      String TransVarNameOfTheModule;
+      boolean TransVarIsLoaded = false;
+      Name.Type TransVarObjectType = Name.Type.OTHER;
+      boolean TransVarIsPropertyAssign = false;
 
-      switch (n.getType()) {
-        case Token.GETTER_DEF:
-        case Token.SETTER_DEF:
-        case Token.STRING_KEY:
-          // This may be a key in an object literal declaration.
-          name = null;
-          if (parent != null && parent.isObjectLit()) {
-            name = getNameForObjLitKey(n);
+      boolean TransFallThroughFlag0 = false;
+    boolean TransBreakFlag0 = true;
+    {
+        if (!(!(false))) {
+            System.out.println("log");
           }
-          if (name == null) {
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.GETTER_DEF))))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            TransFallThroughFlag0 = true;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.SETTER_DEF))))) {
+            TransFallThroughFlag0 = true;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.STRING_KEY))))) {
+            TransBreakFlag0 = false;
+            TransVarNameOfTheModule = null;
+            if (!(!(TransVarNParent != null && TransVarNParent.isObjectLit()))) {
+                TransVarNameOfTheModule = getNameForObjLitKey(TransVarNode);
+            }
+            if (!(!(TransVarNameOfTheModule == null))) {
             return;
           }
-          isSet = true;
-          switch (n.getType()) {
-            case Token.STRING_KEY:
-              type = getValueType(n.getFirstChild());
-              break;
-            case Token.GETTER_DEF:
-              type = Name.Type.GET;
-              break;
-            case Token.SETTER_DEF:
-              type = Name.Type.SET;
-              break;
-            default:
-              throw new IllegalStateException("unexpected:" + n);
+            TransVarIsLoaded = true;
+            boolean TransFallThroughFlag1 = false;
+            boolean TransBreakFlag1 = true;
+            {
+                if (!(!(TransFallThroughFlag1 || (TransBreakFlag1 && (TransVarNode.getType() == Token.STRING_KEY))))) {
+                    TransBreakFlag1 = false;
+                    TransVarObjectType = getValueType(TransVarNode.getFirstChild());
           }
-          break;
-        case Token.NAME:
-          // This may be a variable get or set.
-          if (parent != null) {
-            switch (parent.getType()) {
-              case Token.VAR:
-                isSet = true;
-                Node rvalue = n.getFirstChild();
-                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
-                break;
-              case Token.ASSIGN:
-                if (parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = getValueType(n.getNext());
+                if (!(!(TransFallThroughFlag1 || (TransBreakFlag1 && (TransVarNode.getType() == Token.GETTER_DEF))))) {
+                    TransBreakFlag1 = false;
+                    TransVarObjectType = Name.Type.GET;
                 }
-                break;
-              case Token.GETPROP:
+                if (!(!(TransFallThroughFlag1 || (TransBreakFlag1 && (TransVarNode.getType() == Token.SETTER_DEF))))) {
+                    TransBreakFlag1 = false;
+                    TransVarObjectType = Name.Type.SET;
+                }
+                if (!(!(!TransFallThroughFlag1 && TransBreakFlag1))) {
+                    throw new IllegalStateException("unexpected:" + TransVarNode);
+                }
+            }
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.NAME))))) {
+            TransBreakFlag0 = false;
+            if (!(!(TransVarNParent != null))) {
+                boolean TransFallThroughFlag2 = false;
+                boolean TransBreakFlag2 = true;
+                {
+                    if (!(!(TransFallThroughFlag2 || (TransBreakFlag2 && (TransVarNParent.getType() == Token.VAR))))) {
+                        TransBreakFlag2 = false;
+                        TransVarIsLoaded = true;
+                        Node TransVarFirst = TransVarNode.getFirstChild();
+                        TransVarObjectType = TransVarFirst == null ? Name.Type.OTHER : getValueType(TransVarFirst);
+                    }
+                    if (!(!(TransFallThroughFlag2 || (TransBreakFlag2 && (TransVarNParent.getType() == Token.ASSIGN))))) {
+                        TransBreakFlag2 = false;
+                        if (!(!(TransVarNParent.getFirstChild() == TransVarNode))) {
+                            TransVarIsLoaded = true;
+                            TransVarObjectType = getValueType(TransVarNode.getNext());
+                        }
+                    }
+                    if (!(!(TransFallThroughFlag2 || (TransBreakFlag2 && (TransVarNParent.getType() == Token.GETPROP))))) {
+                        TransFallThroughFlag2 = true;
                 return;
-              case Token.FUNCTION:
-                Node gramps = parent.getParent();
-                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
+                    }
+                    if (!(!(TransFallThroughFlag2 || (TransBreakFlag2 && (TransVarNParent.getType() == Token.FUNCTION))))) {
+                        TransBreakFlag2 = false;
+                        Node TransVarGrampsParent = TransVarNParent.getParent();
+                        if (!(!(TransVarGrampsParent == null || NodeUtil.isFunctionExpression(TransVarNParent)))) {
                   return;
                 }
-                isSet = true;
-                type = Name.Type.FUNCTION;
-                break;
-              case Token.CATCH:
-              case Token.INC:
-              case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
-              default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = Name.Type.OTHER;
+                        TransVarIsLoaded = true;
+                        TransVarObjectType = Name.Type.FUNCTION;
                     }
+                    if (!(!(TransFallThroughFlag2 || (TransBreakFlag2 && (TransVarNParent.getType() == Token.INC))))) {
+                        TransFallThroughFlag2 = true;
                     }
+                    if (!(!(TransFallThroughFlag2 || (TransBreakFlag2 && (TransVarNParent.getType() == Token.DEC))))) {
+                        TransBreakFlag2 = false;
+                        TransVarIsLoaded = true;
+                        TransVarObjectType = Name.Type.OTHER;
           }
-          name = n.getString();
-          break;
-        case Token.GETPROP:
-          // This may be a namespaced name get or set.
-          if (parent != null) {
-            switch (parent.getType()) {
-              case Token.ASSIGN:
-                if (parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = getValueType(n.getNext());
-                  isPropAssign = true;
+                    if (!(!(!TransFallThroughFlag2 && TransBreakFlag2))) {
+                        if (!(!(NodeUtil.isAssignmentOp(TransVarNParent)
+                                && TransVarNParent.getFirstChild() == TransVarNode))) {
+                            TransVarIsLoaded = true;
+                            TransVarObjectType = Name.Type.OTHER;
                 }
-                break;
-              case Token.INC:
-              case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
-              case Token.GETPROP:
+                    }
+                }
+            }
+            TransVarNameOfTheModule = TransVarNode.getString();
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.GETPROP))))) {
+            TransBreakFlag0 = false;
+            if (!(!(TransVarNParent != null))) {
+                boolean TransFallThroughFlag3 = false;
+                boolean TransBreakFlag3 = true;
+                {
+                    if (!(!(TransFallThroughFlag3 || (TransBreakFlag3 && (TransVarNParent.getType() == Token.ASSIGN))))) {
+                        TransBreakFlag3 = false;
+                        if (!(!(TransVarNParent.getFirstChild() == TransVarNode))) {
+                            TransVarIsLoaded = true;
+                            TransVarObjectType = getValueType(TransVarNode.getNext());
+                            TransVarIsPropertyAssign = true;
+                        }
+                    }
+                    if (!(!(TransFallThroughFlag3 || (TransBreakFlag3 && (TransVarNParent.getType() == Token.INC))))) {
+                        TransFallThroughFlag3 = true;
+                    }
+                    if (!(!(TransFallThroughFlag3 || (TransBreakFlag3 && (TransVarNParent.getType() == Token.DEC))))) {
+                        TransBreakFlag3 = false;
+                        TransVarIsLoaded = true;
+                        TransVarObjectType = Name.Type.OTHER;
+                    }
+                    if (!(!(TransFallThroughFlag3 || (TransBreakFlag3 && (TransVarNParent.getType() == Token.GETPROP))))) {
+                        TransFallThroughFlag3 = true;
                 return;
-              default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
-                  isSet = true;
-                  type = Name.Type.OTHER;
                     }
+                    if (!(!(!TransFallThroughFlag3 && TransBreakFlag3))) {
+                        if (!(!(NodeUtil.isAssignmentOp(TransVarNParent)
+                                && TransVarNParent.getFirstChild() == TransVarNode))) {
+                            TransVarIsLoaded = true;
+                            TransVarObjectType = Name.Type.OTHER;
             }
           }
-          name = n.getQualifiedName();
-          if (name == null) {
+                }
+            }
+            TransVarNameOfTheModule = TransVarNode.getQualifiedName();
+            if (!(!(TransVarNameOfTheModule == null))) {
             return;
           }
-          break;
-        default:
+        }
+        if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
             return;
         }
+    }
 
       // We are only interested in global names.
-      if (!isGlobalNameReference(name, scope)) {
+      if (!(!(!isGlobalNameReference(TransVarNameOfTheModule, TransVarJsScope)))) {
         return;
       }
 
-      if (isSet) {
-        if (isGlobalScope(scope)) {
-          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
+      if (!(!(TransVarIsLoaded))) {
+        if (!(!(isGlobalScope(TransVarJsScope)))) {
+          handleSetFromGlobal(TransVarJsModule, TransVarJsScope, TransVarNode, TransVarNParent, TransVarNameOfTheModule, TransVarIsPropertyAssign, TransVarObjectType);
         } else {
-          handleSetFromLocal(module, scope, n, parent, name);
+          handleSetFromLocal(TransVarJsModule, TransVarJsScope, TransVarNode, TransVarNParent, TransVarNameOfTheModule);
         }
       } else {
-        handleGet(module, scope, n, parent, name);
+        handleGet(TransVarJsModule, TransVarJsScope, TransVarNode, TransVarNParent, TransVarNameOfTheModule);
       }
     }
 
