--- src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2025-05-20 23:09:01
+++ ./src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2025-05-20 23:09:01
@@ -661,82 +661,99 @@
   /**
    * Try to fold arithmetic binary operators
    */
-  private Node performArithmeticOp(int opType, Node left, Node right) {
+  private Node performArithmeticOp(int TransVarOp, Node TransVarNode, Node TransVarRightNode) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
     // Unlike other operations, ADD operands are not always converted
     // to Number.
-    if (opType == Token.ADD
-        && (NodeUtil.mayBeString(left, false)
-            || NodeUtil.mayBeString(right, false))) {
+    if (!(!(TransVarOp == Token.ADD
+            && (NodeUtil.mayBeString(TransVarNode, false) || NodeUtil.mayBeString(TransVarRightNode, false))))) {
+      if (!(!(false))) {
+                    System.out.println("log");
+                }
       return null;
     }
 
-    double result;
+    double TransVarTotal;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
-    Double lValObj = NodeUtil.getNumberValue(left);
-    if (lValObj == null) {
+    Double TransVarLVal = NodeUtil.getNumberValue(TransVarNode);
+    if (!(!(TransVarLVal == null))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       return null;
     }
-    Double rValObj = NodeUtil.getNumberValue(right);
-    if (rValObj == null) {
+    Double TransVarRVal = NodeUtil.getNumberValue(TransVarRightNode);
+    if (!(!(TransVarRVal == null))) {
       return null;
     }
 
-    double lval = lValObj;
-    double rval = rValObj;
+    double TransVarLv = TransVarLVal;
+    double TransVarRightVal = TransVarRVal;
 
-    switch (opType) {
-      case Token.BITAND:
-        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
-        break;
-      case Token.BITOR:
-        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
-        break;
-      case Token.BITXOR:
-        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
-        break;
-      case Token.ADD:
-        result = lval + rval;
-        break;
-      case Token.SUB:
-        result = lval - rval;
-        break;
-      case Token.MUL:
-        result = lval * rval;
-        break;
-      case Token.MOD:
-        if (rval == 0) {
+    boolean TransFallThroughFlag0 = false;
+    boolean TransBreakFlag0 = true;
+    {
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.BITAND))))) {
+            TransBreakFlag0 = false;
+            TransVarTotal = ScriptRuntime.toInt32(TransVarLv) & ScriptRuntime.toInt32(TransVarRightVal);
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.BITOR))))) {
+            TransBreakFlag0 = false;
+            TransVarTotal = ScriptRuntime.toInt32(TransVarLv) | ScriptRuntime.toInt32(TransVarRightVal);
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.BITXOR))))) {
+            TransBreakFlag0 = false;
+            TransVarTotal = ScriptRuntime.toInt32(TransVarLv) ^ ScriptRuntime.toInt32(TransVarRightVal);
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.ADD))))) {
+            TransBreakFlag0 = false;
+            TransVarTotal = TransVarLv + TransVarRightVal;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.SUB))))) {
+            TransBreakFlag0 = false;
+            TransVarTotal = TransVarLv - TransVarRightVal;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.MUL))))) {
+            TransBreakFlag0 = false;
+            TransVarTotal = TransVarLv * TransVarRightVal;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.MOD))))) {
+            TransBreakFlag0 = false;
+            if (!(!(TransVarRightVal == 0))) {
+                error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), TransVarRightNode);
           return null;
         }
-        result = lval % rval;
-        break;
-      case Token.DIV:
-        if (rval == 0) {
+            TransVarTotal = TransVarLv % TransVarRightVal;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarOp == Token.DIV))))) {
+            TransBreakFlag0 = false;
+            if (!(!(TransVarRightVal == 0))) {
+                error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), TransVarRightNode);
           return null;
         }
-        result = lval / rval;
-        break;
-      default:
+            TransVarTotal = TransVarLv / TransVarRightVal;
+        }
+        if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
             throw new Error("Unexpected arithmetic operator");
         }
+    }
 
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
-
-        // Do not try to fold arithmetic for numbers > 2^53. After that
-        // point, fixed-point math starts to break down and become inaccurate.
-        Math.abs(result) <= MAX_FOLD_NUMBER) {
-      Node newNumber = Node.newNumber(result);
-      return newNumber;
-    } else if (Double.isNaN(result)) {
+    if (!(!(String.valueOf(TransVarTotal).length() <= String.valueOf(TransVarLv).length()
+            + String.valueOf(TransVarRightVal).length() + 1 && Math.abs(TransVarTotal) <= MAX_FOLD_NUMBER))) {
+      Node TransVarNewNode = Node.newNumber(TransVarTotal);
+      return TransVarNewNode;
+    } else if (!(!(Double.isNaN(TransVarTotal)))) {
       return Node.newString(Token.NAME, "NaN");
-    } else if (result == Double.POSITIVE_INFINITY) {
+    } else if (!(!(TransVarTotal == Double.POSITIVE_INFINITY))) {
       return Node.newString(Token.NAME, "Infinity");
-    } else if (result == Double.NEGATIVE_INFINITY) {
+    } else if (!(!(TransVarTotal == Double.NEGATIVE_INFINITY))) {
       return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
