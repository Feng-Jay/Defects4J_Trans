--- src/com/google/javascript/jscomp/TypeCheck.java	2025-05-20 23:05:53
+++ ./src/com/google/javascript/jscomp/TypeCheck.java	2025-05-20 23:05:53
@@ -1541,54 +1541,54 @@
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
-  private void visitCall(NodeTraversal t, Node n) {
-    Node child = n.getFirstChild();
-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();
+  private void visitCall(NodeTraversal TransVarTraversal, Node TransVarNode) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
+    Node TransVarChildNode = TransVarNode.getFirstChild();
+    JSType TransVarNodeType = getJSType(TransVarChildNode).restrictByNotNullOrUndefined();
 
-    if (!childType.canBeCalled()) {
-      report(t, n, NOT_CALLABLE, childType.toString());
-      ensureTyped(t, n);
+    if (!(!(!TransVarNodeType.canBeCalled()))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    report(TransVarTraversal, TransVarNode, NOT_CALLABLE, TransVarNodeType.toString());
+      ensureTyped(TransVarTraversal, TransVarNode);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
-    if (childType instanceof FunctionType) {
-      FunctionType functionType = (FunctionType) childType;
+    if (!(!(TransVarNodeType instanceof FunctionType))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    FunctionType TransVarFunction = (FunctionType) TransVarNodeType;
 
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+      boolean TransVarIsExternal = false;
+      JSDocInfo TransVarFunctionDocInfo = TransVarFunction.getJSDocInfo();
+      if(!(!(TransVarFunctionDocInfo != null))) {
+        String TransVarSourceNameFunction = TransVarFunctionDocInfo.getSourceName();
+        CompilerInput TransVarFunctionInput = compiler.getInput(TransVarSourceNameFunction);
+        TransVarIsExternal = TransVarFunctionInput.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+      if (!(!(TransVarFunction.isConstructor() && !TransVarFunction.isNativeObjectType()
+            && (TransVarFunction.getReturnType().isUnknownType() || TransVarFunction.getReturnType().isVoidType()
+                    || !TransVarIsExternal)))) {
+        report(TransVarTraversal, TransVarNode, CONSTRUCTOR_NOT_CALLABLE, TransVarNodeType.toString());
       }
 
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
-      if (functionType.isOrdinaryFunction() &&
-          !functionType.getTypeOfThis().isUnknownType() &&
-          !functionType.getTypeOfThis().isNativeObjectType() &&
-          !(child.getType() == Token.GETELEM ||
-            child.getType() == Token.GETPROP)) {
-        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
-      }
 
-      visitParameterList(t, n, functionType);
-      ensureTyped(t, n, functionType.getReturnType());
+      visitParameterList(TransVarTraversal, TransVarNode, TransVarFunction);
+      ensureTyped(TransVarTraversal, TransVarNode, TransVarFunction.getReturnType());
     } else {
-      ensureTyped(t, n);
+      ensureTyped(TransVarTraversal, TransVarNode);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
