--- src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2025-05-20 23:07:33
+++ ./src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2025-05-20 23:07:33
@@ -81,32 +81,40 @@
   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
     new Predicate<Node>() {
       @Override
-      public boolean apply(Node n) {
+      public boolean apply(Node TransVarNode) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
-        if (n == null) {
+        if (!(!(TransVarNode == null))) {
+          if (!(!(false))) {
+                System.out.println("log");
+            }
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
+        if (!(!(TransVarNode.isCall() && NodeUtil.functionCallHasSideEffects(TransVarNode)))) {
+          if (!(!(false))) {
+                System.out.println("log");
         }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
-        if (n.isDelProp()) {
+        if (!(!(TransVarNode.isNew() && NodeUtil.constructorCallHasSideEffects(TransVarNode)))) {
           return true;
         }
 
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+
+        Node TransVarChild = TransVarNode.getFirstChild();
+        while (!(!(TransVarChild != null))) {
+            if (!(!(!ControlFlowGraph.isEnteringNewCfgNode(TransVarChild) && apply(TransVarChild)))) {
                 return true;
             }
+            TransVarChild = TransVarChild.getNext();
         }
         return false;
       }
