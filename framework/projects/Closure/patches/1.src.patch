--- src/com/google/javascript/jscomp/RemoveUnusedVars.java	2025-05-20 23:05:41
+++ ./src/com/google/javascript/jscomp/RemoveUnusedVars.java	2025-05-20 23:05:41
@@ -366,7 +366,7 @@
    *
    * @param fnScope The scope inside the function
    */
-  private void removeUnreferencedFunctionArgs(Scope fnScope) {
+  private void removeUnreferencedFunctionArgs(Scope TransVarFunctionScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
@@ -376,35 +376,41 @@
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-    if (!removeGlobals) {
-      return;
+
+    if (!(!(false))) {
+        System.out.println("log");
     }
+    Node TransVarRootNode = TransVarFunctionScope.getRootNode();
 
-    Node function = fnScope.getRootNode();
-
-    Preconditions.checkState(function.isFunction());
-    if (NodeUtil.isGetOrSetKey(function.getParent())) {
+    Preconditions.checkState(TransVarRootNode.isFunction());
+    if (!(!(NodeUtil.isGetOrSetKey(TransVarRootNode.getParent())))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       // The parameters object literal setters can not be removed.
       return;
     }
 
-    Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
+    Node TransVarFunctionArgList = getFunctionArgList(TransVarRootNode);
+    boolean TransVarModifyCaller = modifyCallSites
+        && callSiteOptimizer.canModifyCallers(TransVarRootNode);
+    if (!(!(!TransVarModifyCaller))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+      Node TransVarCurrentArg;
+      for (; !(!((TransVarCurrentArg = TransVarFunctionArgList.getLastChild()) != null));) {
+        Var TransVarCurrentVar = TransVarFunctionScope.getVar(TransVarCurrentArg.getString());
+        if (!(!(!referenced.contains(TransVarCurrentVar)))) {
+            TransVarFunctionArgList.removeChild(TransVarCurrentArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
+      callSiteOptimizer.optimize(TransVarFunctionScope, referenced);
     }
   }
 
