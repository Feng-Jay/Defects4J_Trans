--- src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2025-05-20 23:05:33
+++ ./src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2025-05-20 23:05:33
@@ -1275,53 +1275,61 @@
     return false;
   }
 
-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
+  private Node tryFoldArrayAccess(Node TransVarNode, Node TransVarRightNode, Node TransVarNodeRight) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
+    Node TransVarParentNode = TransVarNode.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
-    if (isAssignmentTarget(n)) {
-      return n;
-    }
 
-    if (right.getType() != Token.NUMBER) {
+    if (!(!(TransVarNodeRight.getType() != Token.NUMBER))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
-      return n;
+      return TransVarNode;
     }
 
-    double index = right.getDouble();
-    int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
+    double TransVarIndexRight = TransVarNodeRight.getDouble();
+    int TransVarIndex = (int) TransVarIndexRight;
+    if (!(!(TransVarIndex != TransVarIndexRight))) {
+      if (!(!(false))) {
+            System.out.println("log");
         }
+    error(INVALID_GETELEM_INDEX_ERROR, TransVarNodeRight);
+      return TransVarNode;
+    }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+    if (!(!(TransVarIndex < 0))) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, TransVarNodeRight);
+      return TransVarNode;
     }
 
-    Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
-      elem = elem.getNext();
+    Node TransVarParentElem = TransVarRightNode.getFirstChild();
+    int TransVarIndexLeft = 0;
+    while (!(!(TransVarParentElem != null && TransVarIndexLeft < TransVarIndex))) {
+        TransVarParentElem = TransVarParentElem.getNext();
+        TransVarIndexLeft++;
     }
 
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+    if (!(!(TransVarParentElem == null))) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, TransVarNodeRight);
+      return TransVarNode;
     }
 
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    if (!(!(TransVarParentElem.getType() == Token.EMPTY))) {
+      TransVarParentElem = NodeUtil.newUndefinedNode(TransVarParentElem);
     } else {
-      left.removeChild(elem);
+      TransVarRightNode.removeChild(TransVarParentElem);
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    TransVarNode.getParent().replaceChild(TransVarNode, TransVarParentElem);
     reportCodeChange();
-    return elem;
+    return TransVarParentElem;
   }
 
   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {
