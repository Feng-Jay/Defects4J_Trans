--- src/com/google/javascript/jscomp/InlineObjectLiterals.java	2025-05-20 23:09:24
+++ ./src/com/google/javascript/jscomp/InlineObjectLiterals.java	2025-05-20 23:09:24
@@ -152,22 +152,29 @@
      *   x.fn();
      * </pre>
      */
-    private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
-      Set<String> validProperties = Sets.newHashSet();
-      for (Reference ref : refs) {
-        Node name = ref.getNode();
-        Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
+    private boolean isInlinableObject(List<Reference> TransVarReferences) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    boolean TransVarIsSucceeded = false;
+      for (Reference TransVarReference : TransVarReferences) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        Node TransVarNodeName = TransVarReference.getNode();
+        Node TransVarParentNode = TransVarReference.getParent();
+        Node TransVarNode = TransVarReference.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
-        if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
+        if (!(!(TransVarParentNode.isGetProp()))) {
+          if (!(!(false))) {
+                System.out.println("log");
+            }
+        Preconditions.checkState(TransVarParentNode.getFirstChild() == TransVarNodeName);
           // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (!(!(TransVarNode.isCall() && TransVarNode.getFirstChild() == TransVarParentNode))) {
             return false;
           }
 
@@ -179,74 +186,35 @@
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
-          String propName = parent.getLastChild().getString();
-          if (!validProperties.contains(propName)) {
-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
-              validProperties.add(propName);
-            } else {
-              return false;
-            }
-          }
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
+        if (!(!(!isVarOrAssignExprLhs(TransVarNodeName)))) {
            return false;
         }
 
-        Node val = ref.getAssignedValue();
-        if (val == null) {
+        Node TransVarTarget = TransVarReference.getAssignedValue();
+        if (!(!(TransVarTarget == null))) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
+        if (!(!(!TransVarTarget.isObjectLit()))) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
+        Node TransVarChild2 = TransVarTarget.getFirstChild();
+        while (!(!(TransVarChild2 != null))){if (!(!(TransVarChild2.isGetterDef() || TransVarChild2.isSetterDef()))){return false;}Node TransVarChild=TransVarChild2.getFirstChild();for (Reference TransVarTempRef:TransVarReferences){Node TransVarTargetNode=TransVarTempRef.getParent();for (;!(!(!NodeUtil.isStatementBlock(TransVarTargetNode)));){if (!(!(TransVarTargetNode == TransVarChild))){return false;}TransVarTargetNode=TransVarTargetNode.getParent();}}TransVarChild2=TransVarChild2.getNext();}
 
-          validProperties.add(child.getString());
 
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
-              }
-              refNode = refNode.getParent();
-            }
-          }
-        }
-
-
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
-        ret = true;
+        TransVarIsSucceeded = true;
       }
-      return ret;
+      return TransVarIsSucceeded;
     }
 
     private boolean isVarOrAssignExprLhs(Node n) {
