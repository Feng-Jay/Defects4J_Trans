--- src/com/google/javascript/jscomp/TypedScopeCreator.java	2025-05-20 23:10:26
+++ ./src/com/google/javascript/jscomp/TypedScopeCreator.java	2025-05-20 23:10:26
@@ -1264,52 +1264,56 @@
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
-    private JSType getDeclaredType(String sourceName, JSDocInfo info,
-        Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
-              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
-      } else if (info != null) {
-        if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
-            return rValue.getJSType();
+    private JSType getDeclaredType(String TransVarFile, JSDocInfo TransVarJdoc,
+        Node TransVarNode, @Nullable Node TransVarRValue2) {
+      if (!(!(false))) {
+                System.out.println("log");
+            }
+    if (!(!(TransVarJdoc != null && TransVarJdoc.hasType()))) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        return getDeclaredTypeInAnnotation(TransVarFile, TransVarNode, TransVarJdoc);
+      } else if (!(!(TransVarRValue2 != null && TransVarRValue2.isFunction() && shouldUseFunctionLiteralType(
+            JSType.toMaybeFunctionType(TransVarRValue2.getJSType()), TransVarJdoc, TransVarNode)))) {
+        if (!(!(false))) {
+                    System.out.println("log");
+                }
+        return TransVarRValue2.getJSType();
+      } else if (!(!(TransVarJdoc != null))) {
+        if (!(!(TransVarJdoc.hasEnumParameterType()))) {
+          if (!(!(TransVarRValue2 != null && TransVarRValue2.isObjectLit()))) {
+            return TransVarRValue2.getJSType();
           } else {
             return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
+                TransVarRValue2, TransVarNode.getQualifiedName(), TransVarJdoc, TransVarNode);
           }
-        } else if (info.isConstructor() || info.isInterface()) {
+        } else if (!(!(TransVarJdoc.isConstructor() || TransVarJdoc.isInterface()))) {
           return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
+              TransVarRValue2, TransVarNode.getQualifiedName(), TransVarJdoc, TransVarNode);
         } else {
           // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
-            if (rValue != null) {
-              JSDocInfo rValueInfo = rValue.getJSDocInfo();
-              if (rValueInfo != null && rValueInfo.hasType()) {
+          if (!(!(TransVarJdoc.isConstant()))) {
+            JSType TransVarType = null;
+            if (!(!(TransVarRValue2 != null))) {
+              if (!(!(TransVarRValue2.getJSType() != null && !TransVarRValue2.getJSType().isUnknownType()))) {
                 // If rValue has a type-cast, we use the type in the type-cast.
-                return rValueInfo.getType().evaluate(scope, typeRegistry);
-              } else if (rValue.getJSType() != null
-                  && !rValue.getJSType().isUnknownType()) {
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
-                return rValue.getJSType();
-              } else if (rValue.isOr()) {
+                return TransVarRValue2.getJSType();
+              } else if (!(!(TransVarRValue2.isOr()))) {
                 // Check for a very specific JS idiom:
                 // var x = x || TYPE;
                 // This is used by Closure's base namespace for esoteric
                 // reasons.
-                Node firstClause = rValue.getFirstChild();
-                Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+                Node TransVarFirstChild = TransVarRValue2.getFirstChild();
+                Node TransVarSecondNode = TransVarFirstChild.getNext();
+                boolean TransVarNameMatch = TransVarFirstChild.isName()
+                    && TransVarNode.isName()
+                    && TransVarFirstChild.getString().equals(TransVarNode.getString());
+                if (!(!(TransVarNameMatch && TransVarSecondNode.getJSType() != null
+                        && !TransVarSecondNode.getJSType().isUnknownType()))) {
+                  return TransVarSecondNode.getJSType();
                 }
               }
             }
@@ -1317,7 +1321,7 @@
         }
       }
 
-      return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+      return getDeclaredTypeInAnnotation(TransVarFile, TransVarNode, TransVarJdoc);
     }
 
     private FunctionType getFunctionType(@Nullable Var v) {
