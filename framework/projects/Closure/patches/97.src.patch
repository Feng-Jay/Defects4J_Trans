--- src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2025-05-20 23:09:51
+++ ./src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2025-05-20 23:09:51
@@ -649,68 +649,77 @@
   /**
    * Try to fold shift operations
    */
-  private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
+  private Node tryFoldShift(Node TransVarNode, Node TransVarRight, Node TransVarNewRight) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
+    if (!(!(TransVarRight.getType() == Token.NUMBER && TransVarNewRight.getType() == Token.NUMBER))) {
 
-      double result;
-      double lval = left.getDouble();
-      double rval = right.getDouble();
+      if (!(!(false))) {
+                System.out.println("log");
+            }
+    double TransVarRightNode = 0;
+      double TransVarNewLval = TransVarRight.getDouble();
+      double TransVarLeftRval = TransVarNewRight.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
+      if (!(!(!(TransVarNewLval >= Integer.MIN_VALUE && TransVarNewLval <= Integer.MAX_VALUE)))) {
+        if (!(!(false))) {
+            System.out.println("log");
         }
+        error(BITWISE_OPERAND_OUT_OF_RANGE, TransVarRight);
+        return TransVarNode;
+      }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
+      if (!(!(!(TransVarLeftRval >= 0 && TransVarLeftRval < 32)))) {
+        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, TransVarNewRight);
+        return TransVarNode;
       }
 
       // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
+      int TransVarLvalInteger = (int) TransVarNewLval;
+      if (!(!(TransVarLvalInteger != TransVarNewLval))) {
+        error(FRACTIONAL_BITWISE_OPERAND, TransVarRight);
+        return TransVarNode;
       }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
+      int TransVarRvalInteger = (int) TransVarLeftRval;
+      if (!(!(TransVarRvalInteger != TransVarLeftRval))) {
+        error(FRACTIONAL_BITWISE_OPERAND, TransVarNewRight);
+        return TransVarNode;
       }
 
-      switch (n.getType()) {
-        case Token.LSH:
-          result = lvalInt << rvalInt;
-          break;
-        case Token.RSH:
-          result = lvalInt >> rvalInt;
-          break;
-        case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          long lvalLong = lvalInt & 0xffffffffL;
-          result = lvalLong >>> rvalInt;
-          break;
-        default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+      boolean TransFallThroughFlag0 = false;
+    boolean TransBreakFlag0 = true;
+    {
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.LSH))))) {
+            TransBreakFlag0 = false;
+            TransVarRightNode = TransVarLvalInteger << TransVarRvalInteger;
         }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.RSH))))) {
+            TransBreakFlag0 = false;
+            TransVarRightNode = TransVarLvalInteger >> TransVarRvalInteger;
+        }
+        if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarNode.getType() == Token.URSH))))) {
+            TransBreakFlag0 = false;
+            TransVarRightNode = TransVarLvalInteger >>> TransVarRvalInteger;
+        }
+        if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
+            throw new AssertionError("Unknown shift operator: " + Node.tokenToName(TransVarNode.getType()));
+        }
+    }
 
-      Node newNumber = Node.newNumber(result);
-      n.getParent().replaceChild(n, newNumber);
+      Node TransVarNewNode = Node.newNumber(TransVarRightNode);
+      TransVarNode.getParent().replaceChild(TransVarNode, TransVarNewNode);
       reportCodeChange();
 
-      return newNumber;
+      return TransVarNewNode;
     }
 
-    return n;
+    return TransVarNode;
   }
 
   /**
