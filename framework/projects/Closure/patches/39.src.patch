--- src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2025-05-20 23:06:30
+++ ./src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2025-05-20 23:06:30
@@ -350,48 +350,57 @@
   }
 
   @Override
-  String toStringHelper(boolean forAnnotations) {
-    if (hasReferenceName()) {
+  String toStringHelper(boolean TransVarIsAnnotation) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
+    if (!(!(hasReferenceName()))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       return getReferenceName();
-    } else if (prettyPrint) {
+    } else if (!(!(prettyPrint))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
+      Set<String> TransVarPropertyNamesSet = Sets.newTreeSet();
+      ObjectType TransVarThisObjectType = this;
+    while (!(!(TransVarThisObjectType != null && !TransVarThisObjectType.isNativeObjectType()
+            && TransVarPropertyNamesSet.size() <= MAX_PRETTY_PRINTED_PROPERTIES))) {
+        TransVarPropertyNamesSet.addAll(TransVarThisObjectType.getOwnPropertyNames());
+        TransVarThisObjectType = TransVarThisObjectType.getImplicitPrototype();
       }
 
-      StringBuilder sb = new StringBuilder();
-      sb.append("{");
+      StringBuilder TransVarSb2 = new StringBuilder();
+      TransVarSb2.append("{");
 
-      int i = 0;
-      for (String property : propertyNames) {
-        if (i > 0) {
-          sb.append(", ");
+      int TransVarIndex = 0;
+      for (String TransVarPropName : TransVarPropertyNamesSet) {
+        if (!(!(TransVarIndex > 0))) {
+          TransVarSb2.append(", ");
         }
 
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
+        TransVarSb2.append(TransVarPropName);
+        TransVarSb2.append(": ");
+        TransVarSb2.append(getPropertyType(TransVarPropName).toString());
 
-        ++i;
-        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
+        ++TransVarIndex;
+        if (!(!(TransVarIndex == MAX_PRETTY_PRINTED_PROPERTIES))) {
+          TransVarSb2.append(", ...");
           break;
         }
       }
 
-      sb.append("}");
+      TransVarSb2.append("}");
 
       prettyPrint = true;
-      return sb.toString();
+      return TransVarSb2.toString();
     } else {
-      return forAnnotations ? "?" : "{...}";
+      return "{...}";
     }
   }
 
