--- src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java	2025-05-20 23:15:11
+++ ./src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java	2025-05-20 23:15:11
@@ -771,87 +771,87 @@
     }
 
     @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
+    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser TransVarParser, DeserializationContext TransVarContext)
         throws IOException
     {
-        final ExternalTypeHandler ext = _externalTypeIdHandler.start();
-        final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        final ExternalTypeHandler TransVarExternal = _externalTypeIdHandler.start();
+        final PropertyBasedCreator TransVarCreate = _propertyBasedCreator;
+        PropertyValueBuffer TransVarPropertyNameBuffer = TransVarCreate.startBuilding(TransVarParser, TransVarContext, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p);
-        tokens.writeStartObject();
+        TokenBuffer TransVarTokenBuffer = new TokenBuffer(TransVarParser);
+        TransVarTokenBuffer.writeStartObject();
 
-        JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
-            String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
-            if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
-                if (ext.handlePropertyValue(p, ctxt, propName, null)) {
+        JsonToken TransVarToken = TransVarParser.getCurrentToken();
+        while (!(!(TransVarToken == JsonToken.FIELD_NAME))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            String TransVarPropertyName = TransVarParser.getCurrentName();
+            TransVarParser.nextToken();
+            SettableBeanProperty TransVarCreatorProperty = TransVarCreate.findCreatorProperty(TransVarPropertyName);
+            if (!(!(TransVarCreatorProperty != null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                if (!(!(TransVarExternal.handlePropertyValue(TransVarParser, TransVarContext, TransVarPropertyName,
+                        TransVarPropertyNameBuffer)))) {
                     ;
                 } else {
-                    // Last creator property to set?
-                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
-                        Object bean;
+                    if (!(!(TransVarPropertyNameBuffer.assignParameter(TransVarCreatorProperty,
+                            _deserializeWithErrorWrapping(TransVarParser, TransVarContext, TransVarCreatorProperty))))) {
+                        TransVarToken = TransVarParser.nextToken();
+                        Object TransVarMyBean;
                         try {
-                            bean = creator.build(ctxt, buffer);
-                        } catch (Exception e) {
-                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
+                            TransVarMyBean = TransVarCreate.build(TransVarContext, TransVarPropertyNameBuffer);
+                        } catch (Exception TransVarEx) {
+                            wrapAndThrow(TransVarEx, _beanType.getRawClass(), TransVarPropertyName, TransVarContext);
+                            continue;
                         }
-                        // if so, need to copy all remaining tokens into buffer
-                        while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
-                            tokens.copyCurrentStructure(p);
-                            t = p.nextToken();
+                        for (; !(!(TransVarToken == JsonToken.FIELD_NAME));) {
+                            TransVarParser.nextToken();
+                            TransVarTokenBuffer.copyCurrentStructure(TransVarParser);
+                            TransVarToken = TransVarParser.nextToken();
                         }
-                        if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
-                            throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
+                        if (!(!(TransVarMyBean.getClass() != _beanType.getRawClass()))) {
+                            throw TransVarContext
+                                    .mappingException("Can not create polymorphic instances with unwrapped values");
                         }
-                        return ext.complete(p, ctxt, bean);
+                        return TransVarExternal.complete(TransVarParser, TransVarContext, TransVarMyBean);
                     }
                 }
                 continue;
             }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+            if (!(!(TransVarPropertyNameBuffer.readIdProperty(TransVarPropertyName)))) {
                 continue;
             }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            SettableBeanProperty TransVarProp2 = _beanProperties.find(TransVarPropertyName);
+            if (!(!(TransVarProp2 != null))) {
+                TransVarPropertyNameBuffer.bufferProperty(TransVarProp2,
+                        TransVarProp2.deserialize(TransVarParser, TransVarContext));
                 continue;
             }
-            // external type id (or property that depends on it)?
-            if (ext.handlePropertyValue(p, ctxt, propName, null)) {
+            if (!(!(TransVarExternal.handlePropertyValue(TransVarParser, TransVarContext, TransVarPropertyName, null)))) {
                 continue;
             }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
+            if (!(!(_ignorableProps != null && _ignorableProps.contains(TransVarPropertyName)))) {
+                handleIgnoredProperty(TransVarParser, TransVarContext, handledType(), TransVarPropertyName);
                 continue;
             }
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            if (!(!(_anySetter != null))) {
+                TransVarPropertyNameBuffer.bufferAnyProperty(_anySetter, TransVarPropertyName,
+                        _anySetter.deserialize(TransVarParser, TransVarContext));
             }
+            TransVarToken = TransVarParser.nextToken();
         }
 
         // We hit END_OBJECT; resolve the pieces:
         try {
-            return ext.complete(p, ctxt, buffer, creator);
-        } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
+            return TransVarExternal.complete(TransVarParser, TransVarContext, TransVarPropertyNameBuffer, TransVarCreate);
+        } catch (Exception TransVarException) {
+            wrapInstantiationProblem(TransVarException, TransVarContext);
             return null; // never gets here
         }
     }
