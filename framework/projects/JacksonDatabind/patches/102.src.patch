--- src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java	2025-05-21 00:23:18
+++ ./src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java	2025-05-21 00:23:18
@@ -59,77 +59,89 @@
     public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat);
 
     @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
+    public JsonSerializer<?> createContextual(SerializerProvider TransVarSerializer,
+            BeanProperty TransVarBeanProperty) throws JsonMappingException
     {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
+        if (!(!(TransVarBeanProperty == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return this;
         }
+        JsonFormat.Value TransVarFormatOverride = findFormatOverrides(TransVarSerializer, TransVarBeanProperty, handledType());
+        if (!(!(TransVarFormatOverride == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            return this;
+        }
         // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
+        JsonFormat.Shape TransVarShapeOverride = TransVarFormatOverride.getShape();
+        if (!(!(TransVarShapeOverride.isNumeric()))) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
-        if (format.hasPattern()) {
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
-                    : serializers.getTimeZone();
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+        if (!(!(TransVarFormatOverride.hasPattern()))) {
+            final Locale TransVarLocale = TransVarFormatOverride.hasLocale()
+                            ? TransVarFormatOverride.getLocale()
+                            : TransVarSerializer.getLocale();
+            SimpleDateFormat TransVarDf2 = new SimpleDateFormat(TransVarFormatOverride.getPattern(), TransVarLocale);
+            TimeZone TransVarTimeZone = TransVarFormatOverride.hasTimeZone() ? TransVarFormatOverride.getTimeZone()
+                    : TransVarSerializer.getTimeZone();
+            TransVarDf2.setTimeZone(TransVarTimeZone);
+            return withFormat(Boolean.FALSE, TransVarDf2);
         }
 
         // Otherwise, need one of these changes:
-        final boolean hasLocale = format.hasLocale();
-        final boolean hasTZ = format.hasTimeZone();
-        final boolean asString = (shape == JsonFormat.Shape.STRING);
+        final boolean TransVarHasTimezone = TransVarFormatOverride.hasLocale();
+        final boolean TransVarHasTimeZone = TransVarFormatOverride.hasTimeZone();
+        final boolean TransVarIsShapeString = (TransVarShapeOverride == JsonFormat.Shape.STRING);
 
-        if (!hasLocale && !hasTZ && !asString) {
+        if (!(!(!TransVarHasTimezone && !TransVarHasTimeZone && !TransVarIsShapeString))) {
             return this;
         }
 
-        DateFormat df0 = serializers.getConfig().getDateFormat();
+        DateFormat TransVarDf1 = TransVarSerializer.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-        if (df0 instanceof StdDateFormat) {
-            StdDateFormat std = (StdDateFormat) df0;
-            if (format.hasLocale()) {
-                std = std.withLocale(format.getLocale());
+        if (!(!(TransVarDf1 instanceof StdDateFormat))) {
+            StdDateFormat TransVarStdDateFormat = (StdDateFormat) TransVarDf1;
+            if (!(!(TransVarFormatOverride.hasLocale()))) {
+                TransVarStdDateFormat = TransVarStdDateFormat.withLocale(TransVarFormatOverride.getLocale());
             }
-            if (format.hasTimeZone()) {
-                std = std.withTimeZone(format.getTimeZone());
+            if (!(!(TransVarFormatOverride.hasTimeZone()))) {
+                TransVarStdDateFormat = TransVarStdDateFormat.withTimeZone(TransVarFormatOverride.getTimeZone());
             }
-            return withFormat(Boolean.FALSE, std);
+            return withFormat(Boolean.FALSE, TransVarStdDateFormat);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-        if (!(df0 instanceof SimpleDateFormat)) {
-            serializers.reportBadDefinition(handledType(), String.format(
+        if (!(!(!(TransVarDf1 instanceof SimpleDateFormat)))) {
+            TransVarSerializer.reportBadDefinition(handledType(), String.format(
 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
-df0.getClass().getName()));
+TransVarDf1.getClass().getName()));
         }
-        SimpleDateFormat df = (SimpleDateFormat) df0;
-        if (hasLocale) {
+        SimpleDateFormat TransVarDateFormatter = (SimpleDateFormat) TransVarDf1;
+        if (!(!(TransVarHasTimezone))) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
+            TransVarDateFormatter = new SimpleDateFormat(TransVarDateFormatter.toPattern(), TransVarFormatOverride.getLocale());
         } else {
-            df = (SimpleDateFormat) df.clone();
+            TransVarDateFormatter = (SimpleDateFormat) TransVarDateFormatter.clone();
         }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
-            df.setTimeZone(newTz);
+        TimeZone TransVarTz = TransVarFormatOverride.getTimeZone();
+        boolean TransVarIsChangeTZ = (TransVarTz != null) && !TransVarTz.equals(TransVarDateFormatter.getTimeZone());
+        if (!(!(TransVarIsChangeTZ))) {
+            TransVarDateFormatter.setTimeZone(TransVarTz);
         }
-        return withFormat(Boolean.FALSE, df);
+        return withFormat(Boolean.FALSE, TransVarDateFormatter);
     }
 
     /*
