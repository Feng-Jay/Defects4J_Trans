--- src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java	2025-05-21 01:10:39
+++ ./src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java	2025-05-21 01:10:39
@@ -64,37 +64,46 @@
 
     public static SubTypeValidator instance() { return instance; }
 
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
+    public void validateSubType(DeserializationContext TransVarDctxt, JavaType TransVarCtx) throws JsonMappingException
     {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
-        final Class<?> raw = type.getRawClass();
-        String full = raw.getName();
+        final Class<?> TransVarRawClass = TransVarCtx.getRawClass();
+        String TransVarFullClassName = TransVarRawClass.getName();
 
         main_check:
         do {
-            if (_cfgIllegalClassNames.contains(full)) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            if (!(!(_cfgIllegalClassNames.contains(TransVarFullClassName)))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
-                    String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
-                    if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
-                            || "AbstractApplicationContext".equals(name)) {
+            if (!(!(TransVarFullClassName.startsWith(PREFIX_STRING)))) {
+                Class<?> TransVarClazz=TransVarRawClass;
+                while (!(!(TransVarClazz != Object.class))) {
+                    String TransVarSimpleClassName = TransVarClazz.getSimpleName();
+                    if (!(!("AbstractPointcutAdvisor".equals(TransVarSimpleClassName)
+                            || "AbstractApplicationContext".equals(TransVarSimpleClassName)))) {
                         break main_check;
                     }
+                    TransVarClazz = TransVarClazz.getSuperclass();
                 }
             }
             return;
-        } while (false);
+        } while (!(!(false)));
 
-        throw JsonMappingException.from(ctxt,
-                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
+        throw JsonMappingException.from(TransVarDctxt,
+                String.format("Illegal type (%s) to deserialize: prevented for security reasons", TransVarFullClassName));
     }
 }
