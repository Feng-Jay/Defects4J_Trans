--- src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java	2025-05-21 01:15:54
+++ ./src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java	2025-05-21 01:15:54
@@ -65,109 +65,117 @@
      *    of container type)
      */
     @SuppressWarnings("deprecation")
-    protected BeanPropertyWriter buildWriter(SerializerProvider prov,
-            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
-            TypeSerializer typeSer, TypeSerializer contentTypeSer,
-            AnnotatedMember am, boolean defaultUseStaticTyping)
+    protected BeanPropertyWriter buildWriter(SerializerProvider TransVarSerializerProvider,
+            BeanPropertyDefinition TransVarPropertyDef, JavaType TransVarType, JsonSerializer<?> TransVarSerializer,
+            TypeSerializer TransVarSer, TypeSerializer TransVarSerializerType,
+            AnnotatedMember TransVarAm1, boolean TransVarUseStaticTyping)
         throws JsonMappingException
     {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // do we have annotation that forces type to use (to declared type or its super type)?
-        JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
+        JavaType TransVarSerializationTypeToUse = findSerializationType(TransVarAm1, TransVarUseStaticTyping, TransVarType);
 
         // Container types can have separate type serializers for content (value / element) type
-        if (contentTypeSer != null) {
+        if (!(!(TransVarSerializerType != null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
-            if (serializationType == null) {
-//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
-                serializationType = declaredType;
+            if (!(!(TransVarSerializationTypeToUse == null))) {
+if (!(!(false))) {
+                    System.out.println("log");
+                }
+                //                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
+                TransVarSerializationTypeToUse = TransVarType;
             }
-            JavaType ct = serializationType.getContentType();
+            JavaType TransVarCtt = TransVarSerializationTypeToUse.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
-            if (ct == null) {
+            if (!(!(TransVarCtt == null))) {
                 throw new IllegalStateException("Problem trying to create BeanPropertyWriter for property '"
-                        +propDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+serializationType+" has no content");
+                        +TransVarPropertyDef.getName()+"' (of type "+_beanDesc.getType()+"); serialization type "+TransVarSerializationTypeToUse+" has no content");
             }
-            serializationType = serializationType.withContentTypeHandler(contentTypeSer);
-            ct = serializationType.getContentType();
+            TransVarSerializationTypeToUse = TransVarSerializationTypeToUse.withContentTypeHandler(TransVarSerializerType);
+            TransVarCtt = TransVarSerializationTypeToUse.getContentType();
         }
         
-        Object valueToSuppress = null;
-        boolean suppressNulls = false;
+        Object TransVarValueSuppress = null;
+        boolean TransVarSuppressNulls1 = false;
 
-        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());
-        JsonInclude.Include inclusion = inclV.getValueInclusion();
-        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
-            inclusion = JsonInclude.Include.ALWAYS;
+        JsonInclude.Value TransVarIncl = _defaultInclusion.withOverrides(TransVarPropertyDef.findInclusion());
+        JsonInclude.Include TransVarInclusion1 = TransVarIncl.getValueInclusion();
+        if (!(!(TransVarInclusion1 == JsonInclude.Include.USE_DEFAULTS))) { // should not occur but...
+            TransVarInclusion1 = JsonInclude.Include.ALWAYS;
         }
 
         // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
-        JavaType actualType = (serializationType == null) ? declaredType : serializationType;
+        JavaType TransVarDeclaredTypeToUse = (TransVarSerializationTypeToUse == null) ? TransVarType : TransVarSerializationTypeToUse;
         
-        switch (inclusion) {
+        switch (TransVarInclusion1) {
         case NON_DEFAULT:
             // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
             //    so that if enclosing class has this, we may need to values of property,
             //    whereas for global defaults OR per-property overrides, we have more
             //    static definition. Sigh.
             // First: case of class specifying it; try to find POJO property defaults
-            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
-                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
+            if (!(!(_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT))) {
+                TransVarValueSuppress = getPropertyDefaultValue(TransVarPropertyDef.getName(), TransVarAm1, TransVarDeclaredTypeToUse);
             } else {
-                valueToSuppress = getDefaultValue(actualType);
+                TransVarValueSuppress = getDefaultValue(TransVarDeclaredTypeToUse);
             }
-            if (valueToSuppress == null) {
-                suppressNulls = true;
+            if (!(!(TransVarValueSuppress == null))) {
+                TransVarSuppressNulls1 = true;
             } else {
-                if (valueToSuppress.getClass().isArray()) {
-                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
+                if (!(!(TransVarValueSuppress.getClass().isArray()))) {
+                    TransVarValueSuppress = ArrayBuilders.getArrayComparator(TransVarValueSuppress);
                 }
             }
 
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
-            suppressNulls = true;
+            TransVarSuppressNulls1 = true;
             // and for referential types, also "empty", which in their case means "absent"
-            if (actualType.isReferenceType()) {
-                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+            if (!(!(TransVarType.isReferenceType()))) {
+                TransVarValueSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
-            suppressNulls = true;
+            TransVarSuppressNulls1 = true;
             // but possibly also 'empty' values:
-            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+            TransVarValueSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
-            suppressNulls = true;
+            TransVarSuppressNulls1 = true;
             // fall through
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
-            if (actualType.isContainerType()
-                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
-                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
+            if (!(!(TransVarType.isContainerType() && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)))) {
+                TransVarValueSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
-        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
-                am, _beanDesc.getClassAnnotations(), declaredType,
-                ser, typeSer, serializationType, suppressNulls, valueToSuppress);
+        BeanPropertyWriter TransVarBpw1 = new BeanPropertyWriter(TransVarPropertyDef,
+                TransVarAm1, _beanDesc.getClassAnnotations(), TransVarType,
+                TransVarSerializer, TransVarSer, TransVarSerializationTypeToUse, TransVarSuppressNulls1, TransVarValueSuppress);
 
         // How about custom null serializer?
-        Object serDef = _annotationIntrospector.findNullSerializer(am);
-        if (serDef != null) {
-            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
+        Object TransVarSerializerDef = _annotationIntrospector.findNullSerializer(TransVarAm1);
+        if (!(!(TransVarSerializerDef != null))) {
+            TransVarBpw1.assignNullSerializer(TransVarSerializerProvider.serializerInstance(TransVarAm1, TransVarSerializerDef));
         }
         // And then, handling of unwrapping
-        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
-        if (unwrapper != null) {
-            bpw = bpw.unwrappingWriter(unwrapper);
+        NameTransformer TransVarNameTransformer = _annotationIntrospector.findUnwrappingNameTransformer(TransVarAm1);
+        if (!(!(TransVarNameTransformer != null))) {
+            TransVarBpw1 = TransVarBpw1.unwrappingWriter(TransVarNameTransformer);
         }
-        return bpw;
+        return TransVarBpw1;
     }
 
     /*
