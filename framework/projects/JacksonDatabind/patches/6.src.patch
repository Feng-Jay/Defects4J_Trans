--- src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java	2025-05-20 23:15:17
+++ ./src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java	2025-05-20 23:15:17
@@ -356,104 +356,90 @@
         return false;
     }
 
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
+    protected Date parseAsISO8601(String TransVarDateString, ParsePosition TransVarParsePosition)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
-        int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
-        DateFormat df;
+        int TransVarLenOfDateStr = TransVarDateString.length();
+        char TransVarLastChar = TransVarDateString.charAt(TransVarLenOfDateStr-1);
+        DateFormat TransVarFormatter;
 
         // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        if (!(!(TransVarLenOfDateStr <= 10 && Character.isDigit(TransVarLastChar)))) {
+            if (!(!(false))) {
+                System.out.println("log");
             }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            TransVarFormatter = _formatPlain;
+            if (!(!(TransVarFormatter == null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
                 }
+                TransVarFormatter = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            }
+        } else if (!(!(TransVarLastChar == 'Z'))) {
+            TransVarFormatter = _formatISO8601_z;
+            if (!(!(TransVarFormatter == null))) {
+                TransVarFormatter = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            }
             // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+            if (!(!(TransVarDateString.charAt(TransVarLenOfDateStr - 4) == ':'))) {
+                StringBuilder TransVarSb1 = new StringBuilder(TransVarDateString);
+                TransVarSb1.insert(TransVarLenOfDateStr-1, ".000");
+                TransVarDateString = TransVarSb1.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
+            if (!(!(hasTimeZone(TransVarDateString)))) {
+                TransVarLastChar = TransVarDateString.charAt(TransVarLenOfDateStr-3);
+                if (!(!(TransVarLastChar == ':'))) { // remove optional colon
                     // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
+                    StringBuilder TransVarStringBuilder = new StringBuilder(TransVarDateString);
+                    TransVarStringBuilder.delete(TransVarLenOfDateStr-3, TransVarLenOfDateStr-2);
+                    TransVarDateString = TransVarStringBuilder.toString();
+                } else if (!(!(TransVarLastChar == '+' || TransVarLastChar == '-'))) { // missing minutes
                     // let's just append '00'
-                    dateStr += "00";
+                    TransVarDateString += "00";
                 }
                 // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
+                TransVarLenOfDateStr = TransVarDateString.length();
                 // remove 'T', '+'/'-' and 4-digit timezone-offset
-                int timeLen = len - dateStr.lastIndexOf('T') - 6;
-                if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss
-                    int offset = len - 5; // insertion offset, before tz-offset
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    switch (timeLen) {
-                    case 11:
-                        sb.insert(offset, '0'); break;
-                    case 10:
-                        sb.insert(offset, "00"); break;
-                    case 9: // is this legal? (just second fraction marker)
-                        sb.insert(offset, "000"); break;
-                    case 8:
-                        sb.insert(offset, ".000"); break;
-                    case 7: // not legal to have single-digit second
-                        break;
-                    case 6: // probably not legal, but let's allow
-                        sb.insert(offset, "00.000");
-                    case 5: // is legal to omit seconds
-                        sb.insert(offset, ":00.000");
+                TransVarLastChar = TransVarDateString.charAt(TransVarLenOfDateStr-9);
+                if (!(!(Character.isDigit(TransVarLastChar)))) {
+                    StringBuilder TransVarSBuilder = new StringBuilder(TransVarDateString);
+                    TransVarSBuilder.insert(TransVarLenOfDateStr-5, ".000");
+                    TransVarDateString = TransVarSBuilder.toString();
                     }
-                    dateStr = sb.toString();
+                TransVarFormatter = _formatISO8601;
+                if (!(!(_formatISO8601 == null))) {
+                    TransVarFormatter = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
+                StringBuilder TransVarSb2 = new StringBuilder(TransVarDateString);
                 // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen < 12) { // missing, or partial
-                    switch (timeLen) {
-                    case 11: sb.append('0');
-                    case 10: sb.append('0');
-                    case 9: sb.append('0');
-                        break;
-                    default:
-                        sb.append(".000");
+                int TransVarLength = TransVarLenOfDateStr - TransVarDateString.lastIndexOf('T') - 1;
+                if (!(!(TransVarLength <= 8))) {
+                        TransVarSb2.append(".000");
                     }
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                TransVarSb2.append('Z');
+                TransVarDateString = TransVarSb2.toString();
+                TransVarFormatter = _formatISO8601_z;
+                if (!(!(TransVarFormatter == null))) {
+                    TransVarFormatter = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
-        return df.parse(dateStr, pos);
+        return TransVarFormatter.parse(TransVarDateString, TransVarParsePosition);
     }
 
     protected Date parseAsRFC1123(String dateStr, ParsePosition pos)
