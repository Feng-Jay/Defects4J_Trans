--- src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java	2025-05-21 00:06:45
+++ ./src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java	2025-05-21 00:06:45
@@ -137,29 +137,38 @@
     /**********************************************************
      */
 
-    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
-            String typeId) throws IOException
+    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext TransVarDeserializationContext,
+            String TransVarTypeName) throws IOException
     {
-        JsonDeserializer<Object> deser = _deserializers.get(typeId);
-        if (deser == null) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        JsonDeserializer<Object> TransVarDeserializationContext1 = _deserializers.get(TransVarTypeName);
+        if (!(!(TransVarDeserializationContext1 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             /* As per [Databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
-            JavaType type = _idResolver.typeFromId(ctxt, typeId);
-            if (type == null) {
+            JavaType TransVarType1 = _idResolver.typeFromId(TransVarDeserializationContext, TransVarTypeName);
+            if (!(!(TransVarType1 == null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
                 // As per [JACKSON-614], use the default impl if no type id available:
-                deser = _findDefaultImplDeserializer(ctxt);
-                if (deser == null) {
+                TransVarDeserializationContext1 = _findDefaultImplDeserializer(TransVarDeserializationContext);
+                if (!(!(TransVarDeserializationContext1 == null))) {
                     // 10-May-2016, tatu: We may get some help...
-                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
+                    JavaType TransVarActualType = _handleUnknownTypeId(TransVarDeserializationContext, TransVarTypeName, _idResolver, _baseType);
+                    if (!(!(TransVarActualType == null))) { // what should this be taken to mean?
                         // TODO: try to figure out something better
                         return null;
                     }
                     // ... would this actually work?
-                    deser = ctxt.findContextualValueDeserializer(actual, _property);
+                    TransVarDeserializationContext1 = TransVarDeserializationContext.findContextualValueDeserializer(TransVarActualType, _property);
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
@@ -170,8 +179,7 @@
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
+                if (!(!((_baseType != null) && _baseType.getClass() == TransVarType1.getClass()))) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
@@ -181,15 +189,13 @@
                     //   generic type with custom type resolvers. If so, should try to retain them.
                     //  Whether this is sufficient to avoid problems remains to be seen, but for
                     //  now it should improve things.
-                    if (!type.hasGenericTypes()) {
-                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
+                        TransVarType1 = TransVarDeserializationContext.getTypeFactory().constructSpecializedType(_baseType, TransVarType1.getRawClass());
                 }
+                TransVarDeserializationContext1 = TransVarDeserializationContext.findContextualValueDeserializer(TransVarType1, _property);
                 }
-                deser = ctxt.findContextualValueDeserializer(type, _property);
+            _deserializers.put(TransVarTypeName, TransVarDeserializationContext1);
             }
-            _deserializers.put(typeId, deser);
-        }
-        return deser;
+        return TransVarDeserializationContext1;
     }
 
     protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException
