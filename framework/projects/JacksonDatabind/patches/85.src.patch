--- src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java	2025-05-21 02:39:51
+++ ./src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java	2025-05-21 02:39:51
@@ -46,79 +46,61 @@
     public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat);
 
     @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
+    public JsonSerializer<?> createContextual(SerializerProvider TransVarProvider,
+            BeanProperty TransVarPropertyOfBean) throws JsonMappingException
     {
-        if (property == null) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarPropertyOfBean == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return this;
         }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
+        JsonFormat.Value TransVarFormat1 = findFormatOverrides(TransVarProvider, TransVarPropertyOfBean, handledType());
+        if (!(!(TransVarFormat1 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
+        JsonFormat.Shape TransVarShapeType = TransVarFormat1.getShape();
+        if (!(!(TransVarShapeType.isNumeric()))) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
-        if (format.hasPattern()) {
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
-                    : serializers.getTimeZone();
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+                if (!(!((TransVarShapeType == JsonFormat.Shape.STRING) || TransVarFormat1.hasPattern()
+                        || TransVarFormat1.hasLocale() || TransVarFormat1.hasTimeZone()))) {
+                    TimeZone TransVarTimeZone = TransVarFormat1.getTimeZone();
+                    final String TransVarPatternOfDate = TransVarFormat1.hasPattern()
+                                    ? TransVarFormat1.getPattern()
+                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            final Locale TransVarLocale = TransVarFormat1.hasLocale()
+                            ? TransVarFormat1.getLocale()
+                            : TransVarProvider.getLocale();
+                    SimpleDateFormat TransVarS = new SimpleDateFormat(TransVarPatternOfDate, TransVarLocale);
+                    if (!(!(TransVarTimeZone == null))) {
+                        TransVarTimeZone = TransVarProvider.getTimeZone();
                     }
+            TransVarS.setTimeZone(TransVarTimeZone);
+            return withFormat(Boolean.FALSE, TransVarS);
+        }
 
         // Otherwise, need one of these changes:
-        final boolean hasLocale = format.hasLocale();
-        final boolean hasTZ = format.hasTimeZone();
-        final boolean asString = (shape == JsonFormat.Shape.STRING);
 
-        if (!hasLocale && !hasTZ && !asString) {
-            return this;
-        }
 
-        DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-        if (df0 instanceof StdDateFormat) {
-            StdDateFormat std = (StdDateFormat) df0;
-            if (format.hasLocale()) {
-                std = std.withLocale(format.getLocale());
-            }
-            if (format.hasTimeZone()) {
-                std = std.withTimeZone(format.getTimeZone());
-            }
-            return withFormat(Boolean.FALSE, std);
-        }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-        if (!(df0 instanceof SimpleDateFormat)) {
 //            serializers.reportBadDefinition(handledType(), String.format(
-            serializers.reportMappingProblem(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",
-df0.getClass().getName());
-        }
-        SimpleDateFormat df = (SimpleDateFormat) df0;
-        if (hasLocale) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
-        } else {
-            df = (SimpleDateFormat) df.clone();
-        }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
-            df.setTimeZone(newTz);
-        }
-        return withFormat(Boolean.FALSE, df);
+        return this;
     }
 
     /*
