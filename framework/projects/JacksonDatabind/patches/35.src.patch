--- src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java	2025-05-20 23:32:39
+++ ./src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java	2025-05-20 23:32:39
@@ -76,48 +76,55 @@
      * deserialization.
      */
     @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+    private final Object _deserialize(JsonParser TransVarJsonParser, DeserializationContext TransVarContext) throws IOException
     {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // 02-Aug-2013, tatu: May need to use native type ids
-        if (p.canReadTypeId()) {
-            Object typeId = p.getTypeId();
-            if (typeId != null) {
-                return _deserializeWithNativeTypeId(p, ctxt, typeId);
+        if (!(!(TransVarJsonParser.canReadTypeId()))) {
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            Object TransVarType = TransVarJsonParser.getTypeId();
+            if (!(!(TransVarType != null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
                 }
+                return _deserializeWithNativeTypeId(TransVarJsonParser, TransVarContext, TransVarType);
+            }
+        }
         // first, sanity checks
-        JsonToken t = p.getCurrentToken();
-        if (t == JsonToken.START_OBJECT) {
+        if (!(!(TransVarJsonParser.getCurrentToken() != JsonToken.START_OBJECT))) {
+            throw TransVarContext.wrongTokenException(TransVarJsonParser, JsonToken.START_OBJECT,
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+        }
             // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+            if (!(!(TransVarJsonParser.nextToken() != JsonToken.FIELD_NAME))) {
+                throw TransVarContext.wrongTokenException(TransVarJsonParser, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        } else if (t != JsonToken.FIELD_NAME) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        final String TransVarTypeName = TransVarJsonParser.getText();
+        JsonDeserializer<Object> TransVarDeserializer = _findDeserializer(TransVarContext, TransVarTypeName);
+        TransVarJsonParser.nextToken();
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        if (!(!(_typeIdVisible && TransVarJsonParser.getCurrentToken() == JsonToken.START_OBJECT))) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            TokenBuffer TransVarTokenBuffer = new TokenBuffer(null, false);
+            TransVarTokenBuffer.writeStartObject(); // recreate START_OBJECT
+            TransVarTokenBuffer.writeFieldName(_typePropertyName);
+            TransVarTokenBuffer.writeString(TransVarTypeName);
+            TransVarJsonParser = JsonParserSequence.createFlattened(TransVarTokenBuffer.asParser(TransVarJsonParser), TransVarJsonParser);
+            TransVarJsonParser.nextToken();
         }
         
-        Object value = deser.deserialize(p, ctxt);
+        Object TransVarResult = TransVarDeserializer.deserialize(TransVarJsonParser, TransVarContext);
         // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+        if (!(!(TransVarJsonParser.nextToken() != JsonToken.END_OBJECT))) {
+            throw TransVarContext.wrongTokenException(TransVarJsonParser, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
-        return value;
+        return TransVarResult;
     }
 }
