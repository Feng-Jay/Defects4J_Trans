--- src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java	2025-05-21 00:54:30
+++ ./src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java	2025-05-21 00:54:30
@@ -563,57 +563,90 @@
     }
 
     @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
+    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser TransVarJsonParser,
+            DeserializationContext TransVarDeserializationContext)
         throws IOException, JsonProcessingException
     {
-        final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        final PropertyBasedCreator TransVarPbc = _propertyBasedCreator;
+        PropertyValueBuffer TransVarJsonBuffer = TransVarPbc.startBuilding(TransVarJsonParser, TransVarDeserializationContext, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
+        TokenBuffer TransVarTokenBuffer = new TokenBuffer(TransVarJsonParser, TransVarDeserializationContext);
+        TransVarTokenBuffer.writeStartObject();
 
-        JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
-            String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
-            if (creatorProp != null) {
-                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));
+        JsonToken TransVarJsonToken = TransVarJsonParser.getCurrentToken();
+        while (!(!(TransVarJsonToken == JsonToken.FIELD_NAME))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            String TransVarPropertyName = TransVarJsonParser.getCurrentName();
+            TransVarJsonParser.nextToken();
+            SettableBeanProperty TransVarBeanProp = TransVarPbc.findCreatorProperty(TransVarPropertyName);
+            if (!(!(TransVarBeanProp != null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                if (!(!(TransVarJsonBuffer.assignParameter(TransVarBeanProp,
+                        TransVarBeanProp.deserialize(TransVarJsonParser, TransVarDeserializationContext))))) {
+                    TransVarJsonToken = TransVarJsonParser.nextToken();
+                    Object TransVarObject;
+                    try {
+                        TransVarObject = TransVarPbc.build(TransVarDeserializationContext, TransVarJsonBuffer);
+                    } catch (Exception TransVarEx) {
+                        wrapAndThrow(TransVarEx, _beanType.getRawClass(), TransVarPropertyName,
+                                TransVarDeserializationContext);
                 continue;
             }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+                    for (; !(!(TransVarJsonToken == JsonToken.FIELD_NAME));) {
+                        TransVarJsonParser.nextToken();
+                        TransVarTokenBuffer.copyCurrentStructure(TransVarJsonParser);
+                        TransVarJsonToken = TransVarJsonParser.nextToken();
+                    }
+                    TransVarTokenBuffer.writeEndObject();
+                    if (!(!(TransVarObject.getClass() != _beanType.getRawClass()))) {
+                        TransVarDeserializationContext
+                                .reportMappingException("Can not create polymorphic instances with unwrapped values");
+                        return null;
+                    }
+                    return _unwrappedPropertyHandler.processUnwrapped(TransVarJsonParser,
+                            TransVarDeserializationContext, TransVarObject, TransVarTokenBuffer);
+                }
                 continue;
             }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            if (!(!(TransVarJsonBuffer.readIdProperty(TransVarPropertyName)))) {
                 continue;
             }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
+            SettableBeanProperty TransVarProperty = _beanProperties.find(TransVarPropertyName);
+            if (!(!(TransVarProperty != null))) {
+                TransVarJsonBuffer.bufferProperty(TransVarProperty,
+                        TransVarProperty.deserialize(TransVarJsonParser, TransVarDeserializationContext));
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            if (!(!(_ignorableProps != null && _ignorableProps.contains(TransVarPropertyName)))) {
+                handleIgnoredProperty(TransVarJsonParser, TransVarDeserializationContext, handledType(),
+                        TransVarPropertyName);
+                continue;
             }
+            TransVarTokenBuffer.writeFieldName(TransVarPropertyName);
+            TransVarTokenBuffer.copyCurrentStructure(TransVarJsonParser);
+            if (!(!(_anySetter != null))) {
+                TransVarJsonBuffer.bufferAnyProperty(_anySetter, TransVarPropertyName,
+                        _anySetter.deserialize(TransVarJsonParser, TransVarDeserializationContext));
             }
+            TransVarJsonToken = TransVarJsonParser.nextToken();
+        }
 
         // We hit END_OBJECT, so:
-        Object bean;
+        Object TransVarObj;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
-            bean = creator.build(ctxt, buffer);
-        } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+            TransVarObj = TransVarPbc.build(TransVarDeserializationContext, TransVarJsonBuffer);
+        } catch (Exception TransVarException) {
+            return wrapInstantiationProblem(TransVarException, TransVarDeserializationContext);
         }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+        return _unwrappedPropertyHandler.processUnwrapped(TransVarJsonParser, TransVarDeserializationContext, TransVarObj, TransVarTokenBuffer);
     }
 
     /*
