--- src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java	2025-05-21 00:54:32
+++ ./src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java	2025-05-21 00:54:32
@@ -167,52 +167,53 @@
      * for.
      */
     @Override
-    public CollectionDeserializer createContextual(DeserializationContext ctxt,
-            BeanProperty property) throws JsonMappingException
+    public CollectionDeserializer createContextual(DeserializationContext TransVarDeserializationContext,
+            BeanProperty TransVarBeanProperty) throws JsonMappingException
     {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                if (delegateType == null) {
+        JsonDeserializer<Object> TransVarJsonDeserializer = null;
+        if (!(!(_valueInstantiator != null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            if (!(!(_valueInstantiator.canCreateUsingDelegate()))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                JavaType TransVarDelegateType1 = _valueInstantiator.getDelegateType(TransVarDeserializationContext.getConfig());
+                if (!(!(TransVarDelegateType1 == null))) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
-                delegateDeser = findDeserializer(ctxt, delegateType, property);
-            } else if (_valueInstantiator.canCreateUsingArrayDelegate()) {
-                JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
-                if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid array-delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
+                TransVarJsonDeserializer = findDeserializer(TransVarDeserializationContext, TransVarDelegateType1, TransVarBeanProperty);
                 }
-                delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
-        }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
-        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
+        Boolean TransVarIsUnwrapSingle = findFormatFeature(TransVarDeserializationContext, TransVarBeanProperty, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
-        JsonDeserializer<?> valueDeser = _valueDeserializer;
+        JsonDeserializer<?> TransVarValueDeserializer = _valueDeserializer;
         
         // May have a content converter
-        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
-        if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
+        TransVarValueDeserializer = findConvertingContentDeserializer(TransVarDeserializationContext, TransVarBeanProperty, TransVarValueDeserializer);
+        final JavaType TransVarContentJavaType = _collectionType.getContentType();
+        if (!(!(TransVarValueDeserializer == null))) {
+            TransVarValueDeserializer = TransVarDeserializationContext.findContextualValueDeserializer(TransVarContentJavaType, TransVarBeanProperty);
         } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+            TransVarValueDeserializer = TransVarDeserializationContext.handleSecondaryContextualization(TransVarValueDeserializer, TransVarBeanProperty, TransVarContentJavaType);
         }
         // and finally, type deserializer needs context as well
-        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
-        if (valueTypeDeser != null) {
-            valueTypeDeser = valueTypeDeser.forProperty(property);
+        TypeDeserializer TransVarValueTypeDeserializer = _valueTypeDeserializer;
+        if (!(!(TransVarValueTypeDeserializer != null))) {
+            TransVarValueTypeDeserializer = TransVarValueTypeDeserializer.forProperty(TransVarBeanProperty);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+        return withResolved(TransVarJsonDeserializer, TransVarValueDeserializer, TransVarValueTypeDeserializer, TransVarIsUnwrapSingle);
     }
 
     /*
