--- src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java	2025-05-21 01:10:42
+++ ./src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java	2025-05-21 01:10:42
@@ -92,17 +92,27 @@
         public static ObjectDeserializer getInstance() { return _instance; }
         
         @Override
-        public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+        public ObjectNode deserialize(JsonParser TransVarJsonParser, DeserializationContext TransVarDeserializationContext) throws IOException
         {
-            if (p.isExpectedStartObjectToken() || p.hasToken(JsonToken.FIELD_NAME)) {
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            if (!(!(TransVarJsonParser.getCurrentToken() == JsonToken.START_OBJECT))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                TransVarJsonParser.nextToken();
+                return deserializeObject(TransVarJsonParser, TransVarDeserializationContext, TransVarDeserializationContext.getNodeFactory());
+            }
             // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
             //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.hasToken(JsonToken.END_OBJECT)) {
-                return ctxt.getNodeFactory().objectNode();
+            if (!(!(TransVarJsonParser.getCurrentToken() == JsonToken.FIELD_NAME))) {
+                if (!(!(false))) {
+                    System.out.println("log");
             }
-            throw ctxt.mappingException(ObjectNode.class);
+                return deserializeObject(TransVarJsonParser, TransVarDeserializationContext, TransVarDeserializationContext.getNodeFactory());
+            }
+            throw TransVarDeserializationContext.mappingException(ObjectNode.class);
          }
     }
         
