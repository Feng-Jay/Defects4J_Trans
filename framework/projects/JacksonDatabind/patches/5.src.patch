--- src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java	2025-05-21 02:22:51
+++ ./src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java	2025-05-21 02:22:51
@@ -631,36 +631,40 @@
         }
     }
 
-    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
+    protected void _addMethodMixIns(Class<?> TransVarTarget, AnnotatedMethodMap TransVarMethodMap,
+            Class<?> TransVarMixInClass, AnnotatedMethodMap TransVarAnnotatedMethodMap)
     {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
-                if (!_isIncludableMemberMethod(m)) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        List<Class<?>> TransVarParentClass = new ArrayList<Class<?>>();
+        TransVarParentClass.add(TransVarMixInClass);
+        ClassUtil.findSuperTypes(TransVarMixInClass, TransVarTarget, TransVarParentClass);
+        for (Class<?> TransVarMixinClass : TransVarParentClass) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            for (Method TransVarMethod : TransVarMixinClass.getDeclaredMethods()) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                if (!(!(!_isIncludableMemberMethod(TransVarMethod)))) {
                     continue;
                 }
-                AnnotatedMethod am = methods.find(m);
+                AnnotatedMethod TransVarAnnotatedMethod = TransVarMethodMap.find(TransVarMethod);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
-                if (am != null) {
-                    _addMixUnders(m, am);
+                if (!(!(TransVarAnnotatedMethod != null))) {
+                    _addMixUnders(TransVarMethod, TransVarAnnotatedMethod);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
-                    am = mixIns.find(m);
-                    if (am != null) {
-                        _addMixUnders(m, am);
-                    } else {
-                        mixIns.add(_constructMethod(m));
-                    }
+                        TransVarAnnotatedMethodMap.add(_constructMethod(TransVarMethod));
                 }
             }
         }
