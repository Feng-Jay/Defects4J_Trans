--- src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java	2025-05-21 00:06:43
+++ ./src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java	2025-05-21 00:06:43
@@ -579,48 +579,56 @@
      * 
      * @since 2.1
      */
-    public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
+    public void serializeAsColumn(Object TransVarBean1, JsonGenerator TransVarBean, SerializerProvider TransVarSerializer)
         throws Exception
     {
-        Object value = get(bean);
-        if (value == null) { // nulls need specialized handling
-            if (_nullSerializer != null) {
-                _nullSerializer.serialize(null, jgen, prov);
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        Object TransVarObj = get(TransVarBean1);
+        if (!(!(TransVarObj == null))) { // nulls need specialized handling
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            if (!(!(_nullSerializer != null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                _nullSerializer.serialize(null, TransVarBean, TransVarSerializer);
             } else { // can NOT suppress entries in tabular output
-                jgen.writeNull();
+                TransVarBean.writeNull();
             }
-            return;
         }
         // otherwise find serializer to use
-        JsonSerializer<Object> ser = _serializer;
-        if (ser == null) {
-            Class<?> cls = value.getClass();
-            PropertySerializerMap map = _dynamicSerializers;
-            ser = map.serializerFor(cls);
-            if (ser == null) {
-                ser = _findAndAddDynamic(map, cls, prov);
+        JsonSerializer<Object> TransVarJsonSerializer = _serializer;
+        if (!(!(TransVarJsonSerializer == null))) {
+            Class<?> TransVarClass1 = TransVarObj.getClass();
+            PropertySerializerMap TransVarSerializerMap = _dynamicSerializers;
+            TransVarJsonSerializer = TransVarSerializerMap.serializerFor(TransVarClass1);
+            if (!(!(TransVarJsonSerializer == null))) {
+                TransVarJsonSerializer = _findAndAddDynamic(TransVarSerializerMap, TransVarClass1, TransVarSerializer);
             }
         }
         // and then see if we must suppress certain values (default, empty)
-        if (_suppressableValue != null) {
-            if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
-                    serializeAsPlaceholder(bean, jgen, prov);
+        if (!(!(_suppressableValue != null))) {
+            if (!(!(MARKER_FOR_EMPTY == _suppressableValue))) {
+                if (!(!(TransVarJsonSerializer.isEmpty(TransVarObj)))) { // can NOT suppress entries in tabular output
+                    serializeAsPlaceholder(TransVarBean1, TransVarBean, TransVarSerializer);
                     return;
                 }
-            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
-                serializeAsPlaceholder(bean, jgen, prov);
+            } else if (!(!(_suppressableValue.equals(TransVarObj)))) { // can NOT suppress entries in tabular output
+                serializeAsPlaceholder(TransVarBean1, TransVarBean, TransVarSerializer);
                 return;
             }
         }
         // For non-nulls: simple check for direct cycles
-        if (value == bean) {
-            _handleSelfReference(bean, ser);
+        if (!(!(TransVarObj == TransVarBean1))) {
+            _handleSelfReference(TransVarBean1, TransVarJsonSerializer);
         }
-        if (_typeSerializer == null) {
-            ser.serialize(value, jgen, prov);
+        if (!(!(_typeSerializer == null))) {
+            TransVarJsonSerializer.serialize(TransVarObj, TransVarBean, TransVarSerializer);
         } else {
-            ser.serializeWithType(value, jgen, prov, _typeSerializer);
+            TransVarJsonSerializer.serializeWithType(TransVarObj, TransVarBean, TransVarSerializer, _typeSerializer);
         }
     }
 
