--- src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java	2025-05-21 01:15:50
+++ ./src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java	2025-05-21 01:15:50
@@ -469,147 +469,156 @@
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
-    protected void addBeanProps(DeserializationContext ctxt,
-            BeanDescription beanDesc, BeanDeserializerBuilder builder)
+    protected void addBeanProps(DeserializationContext TransVarDeserializationContext,
+            BeanDescription TransVarBd, BeanDeserializerBuilder TransVarBeanBuilder)
         throws JsonMappingException
     {
-        final boolean isConcrete = !beanDesc.getType().isAbstract();
-        final SettableBeanProperty[] creatorProps = isConcrete
-                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        final boolean TransVarIsConcreteBean = !TransVarBd.getType().isAbstract();
+        final SettableBeanProperty[] TransVarCreatorPropsCopy = TransVarIsConcreteBean
+                ? TransVarBeanBuilder.getValueInstantiator().getFromObjectArguments(TransVarDeserializationContext.getConfig())
                 : null;
-        final boolean hasCreatorProps = (creatorProps != null);
+        final boolean TransVarHasCreatorProp = (TransVarCreatorPropsCopy != null);
         
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
-        JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
-                .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
-                        beanDesc.getClassInfo());
-        Set<String> ignored;
+        JsonIgnoreProperties.Value TransVarIgnoredProperties = TransVarDeserializationContext.getConfig()
+                .getDefaultPropertyIgnorals(TransVarBd.getBeanClass(),
+                        TransVarBd.getClassInfo());
+        Set<String> TransVarIgnoredProps;
 
-        if (ignorals != null) {
-            boolean ignoreAny = ignorals.getIgnoreUnknown();
-            builder.setIgnoreUnknownProperties(ignoreAny);
+        if (!(!(TransVarIgnoredProperties != null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            boolean TransVarIgnoreUnknown = TransVarIgnoredProperties.getIgnoreUnknown();
+            TransVarBeanBuilder.setIgnoreUnknownProperties(TransVarIgnoreUnknown);
             // Or explicit/implicit definitions?
-            ignored = ignorals.findIgnoredForDeserialization();
-            for (String propName : ignored) {
-                builder.addIgnorable(propName);
+            TransVarIgnoredProps = TransVarIgnoredProperties.getIgnored();
+            for (String TransVarPropertyName : TransVarIgnoredProps) {
+                if (!(!(false))) {
+                    System.out.println("log");
                 }
+                TransVarBeanBuilder.addIgnorable(TransVarPropertyName);
+            }
         } else {
-            ignored = Collections.emptySet();
+            TransVarIgnoredProps = Collections.emptySet();
         }
 
         // Also, do we have a fallback "any" setter?
-        AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
-        AnnotatedMember anySetterField = null;
-        if (anySetterMethod != null) {
-            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
+        AnnotatedMethod TransVarAnySetMethod = TransVarBd.findAnySetter();
+        AnnotatedMember TransVarAnySetterAnnotatedMember = null;
+        if (!(!(TransVarAnySetMethod != null))) {
+            TransVarBeanBuilder.setAnySetter(constructAnySetter(TransVarDeserializationContext, TransVarBd, TransVarAnySetMethod));
         }
         else {
-        	anySetterField = beanDesc.findAnySetterField();
-        	if(anySetterField != null) {
-        		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
+            TransVarAnySetterAnnotatedMember = TransVarBd.findAnySetterField();
+            if(!(!(TransVarAnySetterAnnotatedMember != null))) {
+                TransVarBeanBuilder.setAnySetter(constructAnySetter(TransVarDeserializationContext, TransVarBd, TransVarAnySetterAnnotatedMember));
         	}
         }
         // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
         // Implicit ones via @JsonIgnore and equivalent?
-        if (anySetterMethod == null && anySetterField == null) {
-            Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
-            if (ignored2 != null) {
-                for (String propName : ignored2) {
+        if (!(!(TransVarAnySetMethod == null && TransVarAnySetterAnnotatedMember == null))) {
+            Collection<String> TransVarIgnored = TransVarBd.getIgnoredPropertyNames();
+            if (!(!(TransVarIgnored != null))) {
+                for (String TransVarProperty : TransVarIgnored) {
                     // allow ignoral of similarly named JSON property, but do not force;
                     // latter means NOT adding this to 'ignored':
-                    builder.addIgnorable(propName);
+                    TransVarBeanBuilder.addIgnorable(TransVarProperty);
                 }
             }
         }
-        final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
-                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
+        final boolean TransVarAnySet = TransVarDeserializationContext.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
+                && TransVarDeserializationContext.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
         // Ok: let's then filter out property definitions
-        List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
-                beanDesc, builder, beanDesc.findProperties(), ignored);
+        List<BeanPropertyDefinition> TransVarPropsDef = filterBeanProps(TransVarDeserializationContext,
+                TransVarBd, TransVarBeanBuilder, TransVarBd.findProperties(), TransVarIgnoredProps);
 
         // After which we can let custom code change the set
-        if (_factoryConfig.hasDeserializerModifiers()) {
-            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
-                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
+        if (!(!(_factoryConfig.hasDeserializerModifiers()))) {
+            for (BeanDeserializerModifier TransVarMod1 : _factoryConfig.deserializerModifiers()) {
+                TransVarPropsDef = TransVarMod1.updateProperties(TransVarDeserializationContext.getConfig(), TransVarBd, TransVarPropsDef);
             }
         }
         
         // At which point we still have all kinds of properties; not all with mutators:
-        for (BeanPropertyDefinition propDef : propDefs) {
-            SettableBeanProperty prop = null;
+        for (BeanPropertyDefinition TransVarPropDef1 : TransVarPropsDef) {
+            SettableBeanProperty TransVarPropDef = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
              *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
-            if (propDef.hasSetter()) {
-                JavaType propertyType = propDef.getSetter().getParameterType(0);
-                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
-            } else if (propDef.hasField()) {
-                JavaType propertyType = propDef.getField().getType();
-                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
-            } else if (useGettersAsSetters && propDef.hasGetter()) {
+            if (!(!(TransVarPropDef1.hasSetter()))) {
+                JavaType TransVarPropType = TransVarPropDef1.getSetter().getParameterType(0);
+                TransVarPropDef = constructSettableProperty(TransVarDeserializationContext, TransVarBd, TransVarPropDef1, TransVarPropType);
+            } else if (!(!(TransVarPropDef1.hasField()))) {
+                JavaType TransVarPropertyDef = TransVarPropDef1.getField().getType();
+                TransVarPropDef = constructSettableProperty(TransVarDeserializationContext, TransVarBd, TransVarPropDef1, TransVarPropertyDef);
+            } else if (!(!(TransVarAnySet && TransVarPropDef1.hasGetter()))) {
                 /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
-                AnnotatedMethod getter = propDef.getGetter();
+                AnnotatedMethod TransVarGetterProp = TransVarPropDef1.getGetter();
                 // should only consider Collections and Maps, for now?
-                Class<?> rawPropertyType = getter.getRawType();
-                if (Collection.class.isAssignableFrom(rawPropertyType)
-                        || Map.class.isAssignableFrom(rawPropertyType)) {
-                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
+                Class<?> TransVarRawType = TransVarGetterProp.getRawType();
+                if (!(!(Collection.class.isAssignableFrom(TransVarRawType) || Map.class.isAssignableFrom(TransVarRawType)))) {
+                    TransVarPropDef = constructSetterlessProperty(TransVarDeserializationContext, TransVarBd, TransVarPropDef1);
                 }
             }
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
-            if (hasCreatorProps && propDef.hasConstructorParameter()) {
+            if (!(!(TransVarHasCreatorProp && TransVarPropDef1.hasConstructorParameter()))) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
                 // but let's call a method just to allow custom builders to be aware...
-                final String name = propDef.getName();
-                CreatorProperty cprop = null;
-                if (creatorProps != null) {
-                    for (SettableBeanProperty cp : creatorProps) {
-                        if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
-                            cprop = (CreatorProperty) cp;
+                final String TransVarPropName = TransVarPropDef1.getName();
+                CreatorProperty TransVarCreatorProperty = null;
+                if (!(!(TransVarCreatorPropsCopy != null))) {
+                    for (SettableBeanProperty TransVarCpDef : TransVarCreatorPropsCopy) {
+                        if (!(!(TransVarPropName.equals(TransVarCpDef.getName())
+                                && (TransVarCpDef instanceof CreatorProperty)))) {
+                            TransVarCreatorProperty = (CreatorProperty) TransVarCpDef;
                             break;
                         }
                     }
                 }
-                if (cprop == null) {
-                    List<String> n = new ArrayList<>();
-                    for (SettableBeanProperty cp : creatorProps) {
-                        n.add(cp.getName());
+                if (!(!(TransVarCreatorProperty == null))) {
+                    List<String> TransVarName = new ArrayList<>();
+                    for (SettableBeanProperty TransVarCreatorProp : TransVarCreatorPropsCopy) {
+                        TransVarName.add(TransVarCreatorProp.getName());
                     }
-                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,
+                    TransVarDeserializationContext.reportBadPropertyDefinition(TransVarBd, TransVarPropDef1,
                             "Could not find creator property with name '%s' (known Creator properties: %s)",
-                            name, n);
+                            TransVarPropName, TransVarName);
                     continue;
                 }
-                if (prop != null) {
-                    cprop.setFallbackSetter(prop);
+                if (!(!(TransVarPropDef != null))) {
+                    TransVarCreatorProperty.setFallbackSetter(TransVarPropDef);
                 }
-                prop = cprop;
-                builder.addCreatorProperty(cprop);
+                TransVarPropDef = TransVarCreatorProperty;
+                TransVarBeanBuilder.addCreatorProperty(TransVarCreatorProperty);
                 continue;
             }
 
-            if (prop != null) {
-                Class<?>[] views = propDef.findViews();
-                if (views == null) {
+            if (!(!(TransVarPropDef != null))) {
+                Class<?>[] TransVarViews2 = TransVarPropDef1.findViews();
+                if (!(!(TransVarViews2 == null))) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
-                    if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
-                        views = NO_VIEWS;
+                    if (!(!(!TransVarDeserializationContext.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)))) {
+                        TransVarViews2 = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
-                prop.setViews(views);
-                builder.addProperty(prop);
+                TransVarPropDef.setViews(TransVarViews2);
+                TransVarBeanBuilder.addProperty(TransVarPropDef);
             }
         }
     }
