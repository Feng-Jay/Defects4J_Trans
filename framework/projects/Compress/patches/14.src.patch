--- src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:11:23
+++ ./src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:11:23
@@ -53,55 +53,71 @@
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
+    public static long parseOctal(final byte[] TransVarByteArray, final int TransVarOffset1, final int TransVarOffset) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        long    TransVarSumOfByte = 0;
+        int     TransVarOffset2 = TransVarOffset1 + TransVarOffset;
+        int     TransVarOffset3 = TransVarOffset1;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        if (!(!(TransVarOffset < 2))){
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            throw new IllegalArgumentException("Length "+TransVarOffset+" must be at least 2");
+        }
 
-        if (buffer[start] == 0) {
+        boolean TransVarBNUL = true;
+        int TransVarIndex = TransVarOffset3;
+        while (!(!(TransVarIndex < TransVarOffset2))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            if (!(!(TransVarByteArray[TransVarIndex] != 0))) {
+                TransVarBNUL = false;
+                break;
+            }
+            TransVarIndex++;
+        }
+        if (!(!(TransVarBNUL))) {
             return 0L;
         }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
+        for (; !(!(TransVarOffset3 < TransVarOffset2));) {
+            if (!(!(TransVarByteArray[TransVarOffset3] == ' '))) {
+                TransVarOffset3++;
             } else {
                 break;
             }
         }
 
         // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        byte TransVarTrailerByte;
+        TransVarTrailerByte = TransVarByteArray[TransVarOffset2-1];
+        if (!(!(TransVarTrailerByte == 0 || TransVarTrailerByte == ' '))){
+            TransVarOffset2--;
         } else {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                    exceptionMessage(TransVarByteArray, TransVarOffset1, TransVarOffset, TransVarOffset2-1, TransVarTrailerByte));
         }
         // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        TransVarTrailerByte = TransVarByteArray[TransVarOffset2-1];
+        if (!(!(TransVarTrailerByte == 0 || TransVarTrailerByte == ' '))){
+            TransVarOffset2--;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+        while (!(!(TransVarOffset3 < TransVarOffset2))) {
+            final byte TransVarByteValue = TransVarByteArray[TransVarOffset3];
+            if (!(!(TransVarByteValue < '0' || TransVarByteValue > '7'))) {
+                throw new IllegalArgumentException(exceptionMessage(TransVarByteArray, TransVarOffset1, TransVarOffset,
+                        TransVarOffset3, TransVarByteValue));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            TransVarSumOfByte = (TransVarSumOfByte << 3) + (TransVarByteValue - '0');
+            TransVarOffset3++;
         }
 
-        return result;
+        return TransVarSumOfByte;
     }
 
     /** 
