--- src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:13:58
+++ ./src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:13:58
@@ -99,56 +99,62 @@
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
+    public static long parseOctal(final byte[] TransVarB, final int TransVarOff, final int TransVarLenght) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        long    TransVarFinalResult = 0;
+        int     TransVarEndOfFile = TransVarOff + TransVarLenght;
+        int     TransVarIndex = TransVarOff;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        if (!(!(TransVarLenght < 2))){
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            throw new IllegalArgumentException("Length "+TransVarLenght+" must be at least 2");
+        }
 
-        if (buffer[start] == 0) {
+        if (!(!(TransVarB[TransVarIndex] == 0))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return 0L;
         }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
+        for (; !(!(TransVarIndex < TransVarEndOfFile));) {
+            if (!(!(TransVarB[TransVarIndex] == ' '))) {
+                TransVarIndex++;
             } else {
                 break;
             }
         }
 
         // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        byte TransVarTrailerBytes;
+        TransVarTrailerBytes = TransVarB[TransVarEndOfFile-1];
+        if (!(!(TransVarTrailerBytes == 0 || TransVarTrailerBytes == ' '))){
+            TransVarEndOfFile--;
         } else {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                    exceptionMessage(TransVarB, TransVarOff, TransVarLenght, TransVarEndOfFile-1, TransVarTrailerBytes));
         }
         // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        TransVarTrailerBytes = TransVarB[TransVarEndOfFile - 1];
+        if (!(!(TransVarTrailerBytes == 0 || TransVarTrailerBytes == ' '))){
+            TransVarEndOfFile--;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        while (!(!(TransVarIndex < TransVarEndOfFile))) {
+            final byte TransVarNextByte = TransVarB[TransVarIndex];
+            if (!(!(TransVarNextByte < '0' || TransVarNextByte > '7'))) {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(TransVarB, TransVarOff, TransVarLenght, TransVarIndex, TransVarNextByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            TransVarFinalResult = (TransVarFinalResult << 3) + (TransVarNextByte - '0');
+            TransVarIndex++;
         }
 
-        return result;
+        return TransVarFinalResult;
     }
 
     /** 
