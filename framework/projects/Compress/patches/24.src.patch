--- src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:13:44
+++ ./src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:13:44
@@ -99,23 +99,31 @@
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
+    public static long parseOctal(final byte[] TransVarBuffer2, final int TransVarOffset1, final int TransVarLength2) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        long    TransVarResult1 = 0;
+        int     TransVarStart = TransVarOffset1 + TransVarLength2;
+        int     TransVarStart1 = TransVarOffset1;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        if (!(!(TransVarLength2 < 2))){
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            throw new IllegalArgumentException("Length "+TransVarLength2+" must be at least 2");
+        }
 
-        if (buffer[start] == 0) {
+        if (!(!(TransVarBuffer2[TransVarStart1] == 0))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return 0L;
         }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
+        for (; !(!(TransVarStart1 < TransVarStart));) {
+            if (!(!(TransVarBuffer2[TransVarStart1] == ' '))) {
+                TransVarStart1++;
             } else {
                 break;
             }
@@ -125,28 +133,30 @@
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
-        }
-        if (start == end) {
+        byte TransVarTrailer1 = TransVarBuffer2[TransVarStart - 1];
+        if (!(!(TransVarTrailer1 == 0 || TransVarTrailer1 == ' '))){
+            TransVarStart--;
+        } else {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+                    exceptionMessage(TransVarBuffer2, TransVarOffset1, TransVarLength2, TransVarStart-1, TransVarTrailer1));
         }
+        TransVarTrailer1 = TransVarBuffer2[TransVarStart - 1];
+        for (; !(!(TransVarStart1 < TransVarStart - 1 && (TransVarTrailer1 == 0 || TransVarTrailer1 == ' ')));) {
+            TransVarStart--;
+            TransVarTrailer1 = TransVarBuffer2[TransVarStart - 1];
+        }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+        while (!(!(TransVarStart1 < TransVarStart))) {
+            final byte TransVarCurByte = TransVarBuffer2[TransVarStart1];
+            if (!(!(TransVarCurByte < '0' || TransVarCurByte > '7'))) {
+                throw new IllegalArgumentException(exceptionMessage(TransVarBuffer2, TransVarOffset1, TransVarLength2,
+                        TransVarStart1, TransVarCurByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            TransVarResult1 = (TransVarResult1 << 3) + (TransVarCurByte - '0');
+            TransVarStart1++;
         }
 
-        return result;
+        return TransVarResult1;
     }
 
     /** 
