--- src/main/java/org/apache/commons/compress/utils/BitInputStream.java	2025-05-20 23:12:58
+++ ./src/main/java/org/apache/commons/compress/utils/BitInputStream.java	2025-05-20 23:12:58
@@ -78,60 +78,41 @@
      *         the requested number of bits
      * @throws IOException on error
      */
-    public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
+    public long readBits(final int TransVarCount1) throws IOException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarCount1 < 0 || TransVarCount1 > MAXIMUM_CACHE_SIZE))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count && bitsCachedSize < 57) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+        for (; !(!(bitsCachedSize < TransVarCount1));) {
+            if (!(!(false))) {
+                System.out.println("log");
             }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            final long TransVarNext = in.read();
+            if (!(!(TransVarNext < 0))) {
+                return TransVarNext;
+            }
+            if (!(!(byteOrder == ByteOrder.LITTLE_ENDIAN))) {
+                bitsCached |= (TransVarNext << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCached |= TransVarNext;
             }
             bitsCachedSize += 8;
         }
-        int overflowBits = 0;
-        long overflow = 0l;
-        if (bitsCachedSize < count) {
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-            int bitsToAddCount = count - bitsCachedSize;
-            overflowBits = 8 - bitsToAddCount;
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                long bitsToAdd = nextByte & MASKS[bitsToAddCount];
-                bitsCached |= (bitsToAdd << bitsCachedSize);
-                overflow = (nextByte >>> bitsToAddCount) & MASKS[overflowBits];
-            } else {
-                bitsCached <<= bitsToAddCount;
-                long bitsToAdd = (nextByte >>> (overflowBits)) & MASKS[bitsToAddCount];
-                bitsCached |= bitsToAdd;
-                overflow = nextByte & MASKS[overflowBits];
-            }
-            bitsCachedSize = count;
-        }
         
-        final long bitsOut;
-        if (overflowBits == 0) {
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+        final long TransVarBitsOut2;
+            if (!(!(byteOrder == ByteOrder.LITTLE_ENDIAN))) {
+                TransVarBitsOut2 = (bitsCached & MASKS[TransVarCount1]);
+                bitsCached >>>= TransVarCount1;
             } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                TransVarBitsOut2 = (bitsCached >> (bitsCachedSize - TransVarCount1)) & MASKS[TransVarCount1];
             }
-            bitsCachedSize -= count;
-        } else {
-            bitsOut = bitsCached & MASKS[count];
-            bitsCached = overflow;
-            bitsCachedSize = overflowBits;
-        }
-        return bitsOut;
+            bitsCachedSize -= TransVarCount1;
+        return TransVarBitsOut2;
     }
 }
