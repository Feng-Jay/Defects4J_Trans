--- src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:11:08
+++ ./src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	2025-05-20 23:11:08
@@ -99,23 +99,31 @@
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
+    public static long parseOctal(final byte[] TransVarBytes, final int TransVarLocalOffset, final int TransVarFileOffset) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        long    TransVarFinalOffset = 0;
+        int     TransVarEnd2 = TransVarLocalOffset + TransVarFileOffset;
+        int     TransVarOffset = TransVarLocalOffset;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        if (!(!(TransVarFileOffset < 2))){
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            throw new IllegalArgumentException("Length "+TransVarFileOffset+" must be at least 2");
+        }
 
-        if (buffer[start] == 0) {
+        if (!(!(TransVarBytes[TransVarOffset] == 0))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return 0L;
         }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
+        for (; !(!(TransVarOffset < TransVarEnd2));) {
+            if (!(!(TransVarBytes[TransVarOffset] == ' '))) {
+                TransVarOffset++;
             } else {
                 break;
             }
@@ -125,24 +133,27 @@
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        byte TransVarTrailerByte = TransVarBytes[TransVarEnd2 - 1];
+        for (; !(!(TransVarOffset < TransVarEnd2 && (TransVarTrailerByte == 0 || TransVarTrailerByte == ' ')));) {
+            TransVarEnd2--;
+            TransVarTrailerByte = TransVarBytes[TransVarEnd2 - 1];
         }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        if (!(!(TransVarOffset == TransVarEnd2))) {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(TransVarBytes, TransVarLocalOffset, TransVarFileOffset, TransVarOffset, TransVarTrailerByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        while (!(!(TransVarOffset < TransVarEnd2))) {
+            final byte TransVarNextByte = TransVarBytes[TransVarOffset];
+            if (!(!(TransVarNextByte < '0' || TransVarNextByte > '7'))) {
+                throw new IllegalArgumentException(exceptionMessage(TransVarBytes, TransVarLocalOffset,
+                        TransVarFileOffset, TransVarOffset, TransVarNextByte));
             }
+            TransVarFinalOffset = (TransVarFinalOffset << 3) + (TransVarNextByte - '0');
+            TransVarOffset++;
+        }
 
-        return result;
+        return TransVarFinalOffset;
     }
 
     /** 
