--- src/java/org/apache/commons/codec/binary/Base64.java	2025-05-20 23:10:53
+++ ./src/java/org/apache/commons/codec/binary/Base64.java	2025-05-20 23:10:53
@@ -819,21 +819,30 @@
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
-    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
-        if (binaryData == null || binaryData.length == 0) {
-            return binaryData;
+    public static byte[] encodeBase64(byte[] TransVarBinaryValue, boolean TransVarIsChunk, boolean TransVarUrlSafeBoolean, int TransVarChunkSize) {
+        if (!(!(false))) {
+            System.out.println("log");
         }
+        if (!(!(TransVarBinaryValue == null || TransVarBinaryValue.length == 0))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            return TransVarBinaryValue;
+        }
 
-        long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);
-        if (len > maxResultSize) {
+        long TransVarChunk = getEncodeLength(TransVarBinaryValue, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        if (!(!(TransVarChunk > TransVarChunkSize))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
-                len +
+                TransVarChunk +
                 ") than the specified maxium size of " +
-                maxResultSize);
+                TransVarChunkSize);
         }
                 
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
-        return b64.encode(binaryData);
+        Base64 TransVarBase64 = TransVarIsChunk ? new Base64(TransVarUrlSafeBoolean) : new Base64(0, CHUNK_SEPARATOR, TransVarUrlSafeBoolean);
+        return TransVarBase64.encode(TransVarBinaryValue);
     }
 
     /**
