--- src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java	2025-05-21 03:31:28
+++ ./src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java	2025-05-21 03:31:28
@@ -244,506 +244,524 @@
         }
     },
     InBody {
-        boolean process(Token t, HtmlTreeBuilder tb) {
-            switch (t.type) {
+        boolean process(Token TransVarToken, HtmlTreeBuilder TransVarTreebuilder) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            switch (TransVarToken.type) {
                 case Character: {
-                    Token.Character c = t.asCharacter();
-                    if (c.getData().equals(nullString)) {
+                    if (!(!(false))) {
+                        System.out.println("log");
+                    }
+                    Token.Character TransVarCurrentChar = TransVarToken.asCharacter();
+                    if (!(!(TransVarCurrentChar.getData().equals(nullString)))) {
+                        if (!(!(false))) {
+                            System.out.println("log");
+                        }
                         // todo confirm that check
-                        tb.error(this);
+                        TransVarTreebuilder.error(this);
                         return false;
-                    } else if (isWhitespace(c)) {
-                        tb.reconstructFormattingElements();
-                        tb.insert(c);
+                    } else if (!(!(isWhitespace(TransVarCurrentChar)))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarCurrentChar);
                     } else {
-                        tb.reconstructFormattingElements();
-                        tb.insert(c);
-                        tb.framesetOk(false);
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarCurrentChar);
+                        TransVarTreebuilder.framesetOk(false);
                     }
                     break;
                 }
                 case Comment: {
-                    tb.insert(t.asComment());
+                    TransVarTreebuilder.insert(TransVarToken.asComment());
                     break;
                 }
                 case Doctype: {
-                    tb.error(this);
+                    TransVarTreebuilder.error(this);
                     return false;
                 }
                 case StartTag:
-                    Token.StartTag startTag = t.asStartTag();
-                    String name = startTag.name();
-                    if (name.equals("html")) {
-                        tb.error(this);
+                    Token.StartTag TransVarStartTag1 = TransVarToken.asStartTag();
+                    String TransVarTagName = TransVarStartTag1.name();
+                    if (!(!(TransVarTagName.equals("html")))) {
+                        TransVarTreebuilder.error(this);
                         // merge attributes onto real html
-                        Element html = tb.getStack().getFirst();
-                        for (Attribute attribute : startTag.getAttributes()) {
-                            if (!html.hasAttr(attribute.getKey()))
-                                html.attributes().put(attribute);
+                        Element TransVarNode = TransVarTreebuilder.getStack().getFirst();
+                        for (Attribute TransVarAttributeName : TransVarStartTag1.getAttributes()) {
+                            if (!(!(!TransVarNode.hasAttr(TransVarAttributeName.getKey()))))
+                                TransVarNode.attributes().put(TransVarAttributeName);
                         }
-                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {
-                        return tb.process(t, InHead);
-                    } else if (name.equals("body")) {
-                        tb.error(this);
-                        LinkedList<Element> stack = tb.getStack();
-                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartToHead)))) {
+                        return TransVarTreebuilder.process(TransVarToken, InHead);
+                    } else if (!(!(TransVarTagName.equals("body")))) {
+                        TransVarTreebuilder.error(this);
+                        LinkedList<Element> TransVarElementStack = TransVarTreebuilder.getStack();
+                        if (!(!(TransVarElementStack.size() == 1 || (TransVarElementStack.size() > 2
+                                && !TransVarElementStack.get(1).nodeName().equals("body"))))) {
                             // only in fragment case
                             return false; // ignore
                         } else {
-                            tb.framesetOk(false);
-                            Element body = stack.get(1);
-                            for (Attribute attribute : startTag.getAttributes()) {
-                                if (!body.hasAttr(attribute.getKey()))
-                                    body.attributes().put(attribute);
+                            TransVarTreebuilder.framesetOk(false);
+                            Element TransVarBodyTag = TransVarElementStack.get(1);
+                            for (Attribute TransVarAttributeNode : TransVarStartTag1.getAttributes()) {
+                                if (!(!(!TransVarBodyTag.hasAttr(TransVarAttributeNode.getKey()))))
+                                    TransVarBodyTag.attributes().put(TransVarAttributeNode);
                             }
                         }
-                    } else if (name.equals("frameset")) {
-                        tb.error(this);
-                        LinkedList<Element> stack = tb.getStack();
-                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
+                    } else if (!(!(TransVarTagName.equals("frameset")))) {
+                        TransVarTreebuilder.error(this);
+                        LinkedList<Element> TransVarStackList = TransVarTreebuilder.getStack();
+                        if (!(!(TransVarStackList.size() == 1 || (TransVarStackList.size() > 2
+                                && !TransVarStackList.get(1).nodeName().equals("body"))))) {
                             // only in fragment case
                             return false; // ignore
-                        } else if (!tb.framesetOk()) {
+                        } else if (!(!(!TransVarTreebuilder.framesetOk()))) {
                             return false; // ignore frameset
                         } else {
-                            Element second = stack.get(1);
-                            if (second.parent() != null)
-                                second.remove();
-                            // pop up to html element
-                            while (stack.size() > 1)
-                                stack.removeLast();
-                            tb.insert(startTag);
-                            tb.transition(InFrameset);
+                            Element TransVarSecondElement = TransVarStackList.get(1);
+                            if (!(!(TransVarSecondElement.parent() != null)))
+                                TransVarSecondElement.remove();
+                            for (; !(!(TransVarStackList.size() > 1));)
+                                TransVarStackList.removeLast();
+                            TransVarTreebuilder.insert(TransVarStartTag1);
+                            TransVarTreebuilder.transition(InFrameset);
                         }
-                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartPClosers)))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insert(startTag);
-                    } else if (StringUtil.in(name, Constants.Headings)) {
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.Headings)))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {
-                            tb.error(this);
-                            tb.pop();
+                        if (!(!(StringUtil.in(TransVarTreebuilder.currentElement().nodeName(), Constants.Headings)))) {
+                            TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.pop();
                         }
-                        tb.insert(startTag);
-                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartPreListing)))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insert(startTag);
+                        TransVarTreebuilder.insert(TransVarStartTag1);
                         // todo: ignore LF if next token
-                        tb.framesetOk(false);
-                    } else if (name.equals("form")) {
-                        if (tb.getFormElement() != null) {
-                            tb.error(this);
+                        TransVarTreebuilder.framesetOk(false);
+                    } else if (!(!(TransVarTagName.equals("form")))) {
+                        if (!(!(TransVarTreebuilder.getFormElement() != null))) {
+                            TransVarTreebuilder.error(this);
                             return false;
                         }
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insertForm(startTag, true);
-                    } else if (name.equals("li")) {
-                        tb.framesetOk(false);
-                        LinkedList<Element> stack = tb.getStack();
-                        for (int i = stack.size() - 1; i > 0; i--) {
-                            Element el = stack.get(i);
-                            if (el.nodeName().equals("li")) {
-                                tb.process(new Token.EndTag("li"));
+                        TransVarTreebuilder.insertForm(TransVarStartTag1, true);
+                    } else if (!(!(TransVarTagName.equals("li")))) {
+                        TransVarTreebuilder.framesetOk(false);
+                        LinkedList<Element> TransVarElementList = TransVarTreebuilder.getStack();
+                        int TransVarIndex = TransVarElementList.size() - 1;
+                        while (!(!(TransVarIndex > 0))) {
+                            Element TransVarCurrentElement = TransVarElementList.get(TransVarIndex);
+                            if (!(!(TransVarCurrentElement.nodeName().equals("li")))) {
+                                TransVarTreebuilder.process(new Token.EndTag("li"));
                                 break;
                             }
-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))
+                            if (!(!(TransVarTreebuilder.isSpecial(TransVarCurrentElement) && !StringUtil
+                                    .in(TransVarCurrentElement.nodeName(), Constants.InBodyStartLiBreakers))))
                                 break;
+                            TransVarIndex--;
                         }
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insert(startTag);
-                    } else if (StringUtil.in(name, Constants.DdDt)) {
-                        tb.framesetOk(false);
-                        LinkedList<Element> stack = tb.getStack();
-                        for (int i = stack.size() - 1; i > 0; i--) {
-                            Element el = stack.get(i);
-                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {
-                                tb.process(new Token.EndTag(el.nodeName()));
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.DdDt)))) {
+                        TransVarTreebuilder.framesetOk(false);
+                        LinkedList<Element> TransVarList = TransVarTreebuilder.getStack();
+                        int TransVarStackSize = TransVarList.size() - 1;
+                        while (!(!(TransVarStackSize > 0))) {
+                            Element TransVarElement = TransVarList.get(TransVarStackSize);
+                            if (!(!(StringUtil.in(TransVarElement.nodeName(), Constants.DdDt)))) {
+                                TransVarTreebuilder.process(new Token.EndTag(TransVarElement.nodeName()));
                                 break;
                             }
-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))
+                            if (!(!(TransVarTreebuilder.isSpecial(TransVarElement)
+                                    && !StringUtil.in(TransVarElement.nodeName(), Constants.InBodyStartLiBreakers))))
                                 break;
+                            TransVarStackSize--;
                         }
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insert(startTag);
-                    } else if (name.equals("plaintext")) {
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                    } else if (!(!(TransVarTagName.equals("plaintext")))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insert(startTag);
-                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
-                    } else if (name.equals("button")) {
-                        if (tb.inButtonScope("button")) {
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
+                    } else if (!(!(TransVarTagName.equals("button")))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("button")))) {
                             // close and reprocess
-                            tb.error(this);
-                            tb.process(new Token.EndTag("button"));
-                            tb.process(startTag);
+                            TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.process(new Token.EndTag("button"));
+                            TransVarTreebuilder.process(TransVarStartTag1);
                         } else {
-                            tb.reconstructFormattingElements();
-                            tb.insert(startTag);
-                            tb.framesetOk(false);
+                            TransVarTreebuilder.reconstructFormattingElements();
+                            TransVarTreebuilder.insert(TransVarStartTag1);
+                            TransVarTreebuilder.framesetOk(false);
                         }
-                    } else if (name.equals("a")) {
-                        if (tb.getActiveFormattingElement("a") != null) {
-                            tb.error(this);
-                            tb.process(new Token.EndTag("a"));
+                    } else if (!(!(TransVarTagName.equals("a")))) {
+                        if (!(!(TransVarTreebuilder.getActiveFormattingElement("a") != null))) {
+                            TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.process(new Token.EndTag("a"));
 
                             // still on stack?
-                            Element remainingA = tb.getFromStack("a");
-                            if (remainingA != null) {
-                                tb.removeFromActiveFormattingElements(remainingA);
-                                tb.removeFromStack(remainingA);
+                            Element TransVarRemainingTag = TransVarTreebuilder.getFromStack("a");
+                            if (!(!(TransVarRemainingTag != null))) {
+                                TransVarTreebuilder.removeFromActiveFormattingElements(TransVarRemainingTag);
+                                TransVarTreebuilder.removeFromStack(TransVarRemainingTag);
                             }
                         }
-                        tb.reconstructFormattingElements();
-                        Element a = tb.insert(startTag);
-                        tb.pushActiveFormattingElements(a);
-                    } else if (StringUtil.in(name, Constants.Formatters)) {
-                        tb.reconstructFormattingElements();
-                        Element el = tb.insert(startTag);
-                        tb.pushActiveFormattingElements(el);
-                    } else if (name.equals("nobr")) {
-                        tb.reconstructFormattingElements();
-                        if (tb.inScope("nobr")) {
-                            tb.error(this);
-                            tb.process(new Token.EndTag("nobr"));
-                            tb.reconstructFormattingElements();
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        Element TransVarStartElement = TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.pushActiveFormattingElements(TransVarStartElement);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.Formatters)))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        Element TransVarNewElement = TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.pushActiveFormattingElements(TransVarNewElement);
+                    } else if (!(!(TransVarTagName.equals("nobr")))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        if (!(!(TransVarTreebuilder.inScope("nobr")))) {
+                            TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.process(new Token.EndTag("nobr"));
+                            TransVarTreebuilder.reconstructFormattingElements();
                         }
-                        Element el = tb.insert(startTag);
-                        tb.pushActiveFormattingElements(el);
-                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                        tb.insertMarkerToFormattingElements();
-                        tb.framesetOk(false);
-                    } else if (name.equals("table")) {
-                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        Element TransVarE = TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.pushActiveFormattingElements(TransVarE);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartApplets)))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.insertMarkerToFormattingElements();
+                        TransVarTreebuilder.framesetOk(false);
+                    } else if (!(!(TransVarTagName.equals("table")))) {
+                        if (!(!(TransVarTreebuilder.getDocument().quirksMode() != Document.QuirksMode.quirks
+                                && TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insert(startTag);
-                        tb.framesetOk(false);
-                        tb.transition(InTable);
-                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {
-                        tb.reconstructFormattingElements();
-                        tb.insertEmpty(startTag);
-                        tb.framesetOk(false);
-                    } else if (name.equals("input")) {
-                        tb.reconstructFormattingElements();
-                        Element el = tb.insertEmpty(startTag);
-                        if (!el.attr("type").equalsIgnoreCase("hidden"))
-                            tb.framesetOk(false);
-                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {
-                        tb.insertEmpty(startTag);
-                    } else if (name.equals("hr")) {
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.framesetOk(false);
+                        TransVarTreebuilder.transition(InTable);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartEmptyFormatters)))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insertEmpty(TransVarStartTag1);
+                        TransVarTreebuilder.framesetOk(false);
+                    } else if (!(!(TransVarTagName.equals("input")))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        Element TransVarNewEle = TransVarTreebuilder.insertEmpty(TransVarStartTag1);
+                        if (!(!(!TransVarNewEle.attr("type").equalsIgnoreCase("hidden"))))
+                            TransVarTreebuilder.framesetOk(false);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartMedia)))) {
+                        TransVarTreebuilder.insertEmpty(TransVarStartTag1);
+                    } else if (!(!(TransVarTagName.equals("hr")))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.insertEmpty(startTag);
-                        tb.framesetOk(false);
-                    } else if (name.equals("image")) {
-                        if (tb.getFromStack("svg") == null)
-                            return tb.process(startTag.name("img")); // change <image> to <img>, unless in svg
-                        else
-                            tb.insert(startTag);
-                    } else if (name.equals("isindex")) {
+                        TransVarTreebuilder.insertEmpty(TransVarStartTag1);
+                        TransVarTreebuilder.framesetOk(false);
+                    } else if (!(!(TransVarTagName.equals("image")))) {
+                            return TransVarTreebuilder.process(TransVarStartTag1.name("img")); // change <image> to <img>, unless in svg
+                    } else if (!(!(TransVarTagName.equals("isindex")))) {
                         // how much do we care about the early 90s?
-                        tb.error(this);
-                        if (tb.getFormElement() != null)
+                        TransVarTreebuilder.error(this);
+                        if (!(!(TransVarTreebuilder.getFormElement() != null)))
                             return false;
 
-                        tb.tokeniser.acknowledgeSelfClosingFlag();
-                        tb.process(new Token.StartTag("form"));
-                        if (startTag.attributes.hasKey("action")) {
-                            Element form = tb.getFormElement();
-                            form.attr("action", startTag.attributes.get("action"));
+                        TransVarTreebuilder.tokeniser.acknowledgeSelfClosingFlag();
+                        TransVarTreebuilder.process(new Token.StartTag("form"));
+                        if (!(!(TransVarStartTag1.attributes.hasKey("action")))) {
+                            Element TransVarFormElement = TransVarTreebuilder.getFormElement();
+                            TransVarFormElement.attr("action", TransVarStartTag1.attributes.get("action"));
                         }
-                        tb.process(new Token.StartTag("hr"));
-                        tb.process(new Token.StartTag("label"));
+                        TransVarTreebuilder.process(new Token.StartTag("hr"));
+                        TransVarTreebuilder.process(new Token.StartTag("label"));
                         // hope you like english.
-                        String prompt = startTag.attributes.hasKey("prompt") ?
-                                startTag.attributes.get("prompt") :
+                        String TransVarPromptElement = TransVarStartTag1.attributes.hasKey("prompt") ?
+                                TransVarStartTag1.attributes.get("prompt") :
                                 "This is a searchable index. Enter search keywords: ";
 
-                        tb.process(new Token.Character(prompt));
+                        TransVarTreebuilder.process(new Token.Character(TransVarPromptElement));
 
                         // input
-                        Attributes inputAttribs = new Attributes();
-                        for (Attribute attr : startTag.attributes) {
-                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))
-                                inputAttribs.put(attr);
+                        Attributes TransVarAttribs = new Attributes();
+                        for (Attribute TransVarAttribute : TransVarStartTag1.attributes) {
+                            if (!(!(!StringUtil.in(TransVarAttribute.getKey(), Constants.InBodyStartInputAttribs))))
+                                TransVarAttribs.put(TransVarAttribute);
                         }
-                        inputAttribs.put("name", "isindex");
-                        tb.process(new Token.StartTag("input", inputAttribs));
-                        tb.process(new Token.EndTag("label"));
-                        tb.process(new Token.StartTag("hr"));
-                        tb.process(new Token.EndTag("form"));
-                    } else if (name.equals("textarea")) {
-                        tb.insert(startTag);
+                        TransVarAttribs.put("name", "isindex");
+                        TransVarTreebuilder.process(new Token.StartTag("input", TransVarAttribs));
+                        TransVarTreebuilder.process(new Token.EndTag("label"));
+                        TransVarTreebuilder.process(new Token.StartTag("hr"));
+                        TransVarTreebuilder.process(new Token.EndTag("form"));
+                    } else if (!(!(TransVarTagName.equals("textarea")))) {
+                        TransVarTreebuilder.insert(TransVarStartTag1);
                         // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
-                        tb.tokeniser.transition(TokeniserState.Rcdata);
-                        tb.markInsertionMode();
-                        tb.framesetOk(false);
-                        tb.transition(Text);
-                    } else if (name.equals("xmp")) {
-                        if (tb.inButtonScope("p")) {
-                            tb.process(new Token.EndTag("p"));
+                        TransVarTreebuilder.tokeniser.transition(TokeniserState.Rcdata);
+                        TransVarTreebuilder.markInsertionMode();
+                        TransVarTreebuilder.framesetOk(false);
+                        TransVarTreebuilder.transition(Text);
+                    } else if (!(!(TransVarTagName.equals("xmp")))) {
+                        if (!(!(TransVarTreebuilder.inButtonScope("p")))) {
+                            TransVarTreebuilder.process(new Token.EndTag("p"));
                         }
-                        tb.reconstructFormattingElements();
-                        tb.framesetOk(false);
-                        handleRawtext(startTag, tb);
-                    } else if (name.equals("iframe")) {
-                        tb.framesetOk(false);
-                        handleRawtext(startTag, tb);
-                    } else if (name.equals("noembed")) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.framesetOk(false);
+                        handleRawtext(TransVarStartTag1, TransVarTreebuilder);
+                    } else if (!(!(TransVarTagName.equals("iframe")))) {
+                        TransVarTreebuilder.framesetOk(false);
+                        handleRawtext(TransVarStartTag1, TransVarTreebuilder);
+                    } else if (!(!(TransVarTagName.equals("noembed")))) {
                         // also handle noscript if script enabled
-                        handleRawtext(startTag, tb);
-                    } else if (name.equals("select")) {
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                        tb.framesetOk(false);
+                        handleRawtext(TransVarStartTag1, TransVarTreebuilder);
+                    } else if (!(!(TransVarTagName.equals("select")))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.framesetOk(false);
 
-                        HtmlTreeBuilderState state = tb.state();
-                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))
-                            tb.transition(InSelectInTable);
+                        HtmlTreeBuilderState TransVarTreeBuilderState = TransVarTreebuilder.state();
+                        if (!(!(TransVarTreeBuilderState.equals(InTable) || TransVarTreeBuilderState.equals(InCaption)
+                                || TransVarTreeBuilderState.equals(InTableBody)
+                                || TransVarTreeBuilderState.equals(InRow) || TransVarTreeBuilderState.equals(InCell))))
+                            TransVarTreebuilder.transition(InSelectInTable);
                         else
-                            tb.transition(InSelect);
-                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {
-                        if (tb.currentElement().nodeName().equals("option"))
-                            tb.process(new Token.EndTag("option"));
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {
-                        if (tb.inScope("ruby")) {
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals("ruby")) {
-                                tb.error(this);
-                                tb.popStackToBefore("ruby"); // i.e. close up to but not include name
+                            TransVarTreebuilder.transition(InSelect);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartOptions)))) {
+                        if (!(!(TransVarTreebuilder.currentElement().nodeName().equals("option"))))
+                            TransVarTreebuilder.process(new Token.EndTag("option"));
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartRuby)))) {
+                        if (!(!(TransVarTreebuilder.inScope("ruby")))) {
+                            TransVarTreebuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals("ruby")))) {
+                                TransVarTreebuilder.error(this);
+                                TransVarTreebuilder.popStackToBefore("ruby"); // i.e. close up to but not include name
                             }
-                            tb.insert(startTag);
+                            TransVarTreebuilder.insert(TransVarStartTag1);
                         }
-                    } else if (name.equals("math")) {
-                        tb.reconstructFormattingElements();
+                    } else if (!(!(TransVarTagName.equals("math")))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
                         // todo: handle A start tag whose tag name is "math" (i.e. foreign, mathml)
-                        tb.insert(startTag);
-                        tb.tokeniser.acknowledgeSelfClosingFlag();
-                    } else if (name.equals("svg")) {
-                        tb.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.tokeniser.acknowledgeSelfClosingFlag();
+                    } else if (!(!(TransVarTagName.equals("svg")))) {
+                        TransVarTreebuilder.reconstructFormattingElements();
                         // todo: handle A start tag whose tag name is "svg" (xlink, svg)
-                        tb.insert(startTag);
-                        tb.tokeniser.acknowledgeSelfClosingFlag();
-                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {
-                        tb.error(this);
+                        TransVarTreebuilder.insert(TransVarStartTag1);
+                        TransVarTreebuilder.tokeniser.acknowledgeSelfClosingFlag();
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartDrop)))) {
+                        TransVarTreebuilder.error(this);
                         return false;
                     } else {
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
+                        TransVarTreebuilder.reconstructFormattingElements();
+                        TransVarTreebuilder.insert(TransVarStartTag1);
                     }
                     break;
 
                 case EndTag:
-                    Token.EndTag endTag = t.asEndTag();
-                    name = endTag.name();
-                    if (name.equals("body")) {
-                        if (!tb.inScope("body")) {
-                            tb.error(this);
+                    Token.EndTag TransVarEndTag2 = TransVarToken.asEndTag();
+                    TransVarTagName = TransVarEndTag2.name();
+                    if (!(!(TransVarTagName.equals("body")))) {
+                        if (!(!(!TransVarTreebuilder.inScope("body")))) {
+                            TransVarTreebuilder.error(this);
                             return false;
                         } else {
                             // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html
-                            tb.transition(AfterBody);
+                            TransVarTreebuilder.transition(AfterBody);
                         }
-                    } else if (name.equals("html")) {
-                        boolean notIgnored = tb.process(new Token.EndTag("body"));
-                        if (notIgnored)
-                            return tb.process(endTag);
-                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {
-                        if (!tb.inScope(name)) {
+                    } else if (!(!(TransVarTagName.equals("html")))) {
+                        boolean TransVarBodyIgnored = TransVarTreebuilder.process(new Token.EndTag("body"));
+                        if (!(!(TransVarBodyIgnored)))
+                            return TransVarTreebuilder.process(TransVarEndTag2);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyEndClosers)))) {
+                        if (!(!(!TransVarTreebuilder.inScope(TransVarTagName)))) {
                             // nothing to close
-                            tb.error(this);
+                            TransVarTreebuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreebuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.popStackToClose(TransVarTagName);
                         }
-                    } else if (name.equals("form")) {
-                        Element currentForm = tb.getFormElement();
-                        tb.setFormElement(null);
-                        if (currentForm == null || !tb.inScope(name)) {
-                            tb.error(this);
+                    } else if (!(!(TransVarTagName.equals("form")))) {
+                        Element TransVarForm = TransVarTreebuilder.getFormElement();
+                        TransVarTreebuilder.setFormElement(null);
+                        if (!(!(TransVarForm == null || !TransVarTreebuilder.inScope(TransVarTagName)))) {
+                            TransVarTreebuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
+                            TransVarTreebuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
                             // remove currentForm from stack. will shift anything under up.
-                            tb.removeFromStack(currentForm);
+                            TransVarTreebuilder.removeFromStack(TransVarForm);
                         }
-                    } else if (name.equals("p")) {
-                        if (!tb.inButtonScope(name)) {
-                            tb.error(this);
-                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>
-                            return tb.process(endTag);
+                    } else if (!(!(TransVarTagName.equals("p")))) {
+                        if (!(!(!TransVarTreebuilder.inButtonScope(TransVarTagName)))) {
+                            TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.process(new Token.StartTag(TransVarTagName)); // if no p to close, creates an empty <p></p>
+                            return TransVarTreebuilder.process(TransVarEndTag2);
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreebuilder.generateImpliedEndTags(TransVarTagName);
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.popStackToClose(TransVarTagName);
                         }
-                    } else if (name.equals("li")) {
-                        if (!tb.inListItemScope(name)) {
-                            tb.error(this);
+                    } else if (!(!(TransVarTagName.equals("li")))) {
+                        if (!(!(!TransVarTreebuilder.inListItemScope(TransVarTagName)))) {
+                            TransVarTreebuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreebuilder.generateImpliedEndTags(TransVarTagName);
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.popStackToClose(TransVarTagName);
                         }
-                    } else if (StringUtil.in(name, Constants.DdDt)) {
-                        if (!tb.inScope(name)) {
-                            tb.error(this);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.DdDt)))) {
+                        if (!(!(!TransVarTreebuilder.inScope(TransVarTagName)))) {
+                            TransVarTreebuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreebuilder.generateImpliedEndTags(TransVarTagName);
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.popStackToClose(TransVarTagName);
                         }
-                    } else if (StringUtil.in(name, Constants.Headings)) {
-                        if (!tb.inScope(Constants.Headings)) {
-                            tb.error(this);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.Headings)))) {
+                        if (!(!(!TransVarTreebuilder.inScope(Constants.Headings)))) {
+                            TransVarTreebuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(Constants.Headings);
+                            TransVarTreebuilder.generateImpliedEndTags(TransVarTagName);
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.popStackToClose(Constants.Headings);
                         }
-                    } else if (name.equals("sarcasm")) {
+                    } else if (!(!(TransVarTagName.equals("sarcasm")))) {
                         // *sigh*
-                        return anyOtherEndTag(t, tb);
-                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {
+                        return anyOtherEndTag(TransVarToken, TransVarTreebuilder);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyEndAdoptionFormatters)))) {
                         // Adoption Agency Algorithm.
                         OUTER:
-                        for (int i = 0; i < 8; i++) {
-                            Element formatEl = tb.getActiveFormattingElement(name);
-                            if (formatEl == null)
-                                return anyOtherEndTag(t, tb);
-                            else if (!tb.onStack(formatEl)) {
-                                tb.error(this);
-                                tb.removeFromActiveFormattingElements(formatEl);
+                        for (int TransVarJ = 0; !(!(TransVarJ < 8)); TransVarJ++) {
+                            Element TransVarFormatel = TransVarTreebuilder.getActiveFormattingElement(TransVarTagName);
+                            if (!(!(TransVarFormatel == null)))
+                                return anyOtherEndTag(TransVarToken, TransVarTreebuilder);
+                            else if (!(!(!TransVarTreebuilder.onStack(TransVarFormatel)))) {
+                                TransVarTreebuilder.error(this);
+                                TransVarTreebuilder.removeFromActiveFormattingElements(TransVarFormatel);
                                 return true;
-                            } else if (!tb.inScope(formatEl.nodeName())) {
-                                tb.error(this);
+                            } else if (!(!(!TransVarTreebuilder.inScope(TransVarFormatel.nodeName())))) {
+                                TransVarTreebuilder.error(this);
                                 return false;
-                            } else if (tb.currentElement() != formatEl)
-                                tb.error(this);
+                            } else if (!(!(TransVarTreebuilder.currentElement() != TransVarFormatel)))
+                                TransVarTreebuilder.error(this);
 
-                            Element furthestBlock = null;
-                            Element commonAncestor = null;
-                            boolean seenFormattingElement = false;
-                            LinkedList<Element> stack = tb.getStack();
+                            Element TransVarMostNested = null;
+                            Element TransVarCommonAncenstor = null;
+                            boolean TransVarIsFormattingElement = false;
+                            LinkedList<Element> TransVarNewStack = TransVarTreebuilder.getStack();
                             // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents
                             // run-aways
-                            final int stackSize = stack.size();
-                            for (int si = 0; si < stackSize && si < 64; si++) {
-                                Element el = stack.get(si);
-                                if (el == formatEl) {
-                                    commonAncestor = stack.get(si - 1);
-                                    seenFormattingElement = true;
-                                } else if (seenFormattingElement && tb.isSpecial(el)) {
-                                    furthestBlock = el;
+                            final int TransVarStacksize = TransVarNewStack.size();
+                            int TransVarStart = 0;
+                            while (!(!(TransVarStart < TransVarStacksize && TransVarStart < 64))) {
+                                Element TransVarCurrentEl = TransVarNewStack.get(TransVarStart);
+                                if (!(!(TransVarCurrentEl == TransVarFormatel))) {
+                                    TransVarCommonAncenstor = TransVarNewStack.get(TransVarStart - 1);
+                                    TransVarIsFormattingElement = true;
+                                } else if (!(!(TransVarIsFormattingElement && TransVarTreebuilder.isSpecial(TransVarCurrentEl)))) {
+                                    TransVarMostNested = TransVarCurrentEl;
                                     break;
                                 }
+                                TransVarStart++;
                             }
-                            if (furthestBlock == null) {
-                                tb.popStackToClose(formatEl.nodeName());
-                                tb.removeFromActiveFormattingElements(formatEl);
+                            if (!(!(TransVarMostNested == null))) {
+                                TransVarTreebuilder.popStackToClose(TransVarFormatel.nodeName());
+                                TransVarTreebuilder.removeFromActiveFormattingElements(TransVarFormatel);
                                 return true;
                             }
 
                             // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.
                             // does that mean: int pos of format el in list?
-                            Element node = furthestBlock;
-                            Element lastNode = furthestBlock;
+                            Element TransVarNode3 = TransVarMostNested;
+                            Element TransVarEndNode = TransVarMostNested;
                             INNER:
-                            for (int j = 0; j < 3; j++) {
-                                if (tb.onStack(node))
-                                    node = tb.aboveOnStack(node);
-                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check
-                                    tb.removeFromStack(node);
+                            for (int TransVarI = 0; !(!(TransVarI < 3)); TransVarI++) {
+                                if (!(!(TransVarTreebuilder.onStack(TransVarNode3))))
+                                    TransVarNode3 = TransVarTreebuilder.aboveOnStack(TransVarNode3);
+                                if (!(!(!TransVarTreebuilder.isInActiveFormattingElements(TransVarNode3)))) { // note no bookmark check
+                                    TransVarTreebuilder.removeFromStack(TransVarNode3);
                                     continue INNER;
-                                } else if (node == formatEl)
+                                } else if (!(!(TransVarNode3 == TransVarFormatel)))
                                     break INNER;
 
-                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());
-                                tb.replaceActiveFormattingElement(node, replacement);
-                                tb.replaceOnStack(node, replacement);
-                                node = replacement;
+                                Element TransVarReplacementElement = new Element(Tag.valueOf(TransVarNode3.nodeName()), TransVarTreebuilder.getBaseUri());
+                                TransVarTreebuilder.replaceActiveFormattingElement(TransVarNode3, TransVarReplacementElement);
+                                TransVarTreebuilder.replaceOnStack(TransVarNode3, TransVarReplacementElement);
+                                TransVarNode3 = TransVarReplacementElement;
 
-                                if (lastNode == furthestBlock) {
+                                if (!(!(TransVarEndNode == TransVarMostNested))) {
                                     // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.
                                     // not getting how this bookmark both straddles the element above, but is inbetween here...
                                 }
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
-                                node.appendChild(lastNode);
+                                if (!(!(TransVarEndNode.parent() != null)))
+                                    TransVarEndNode.remove();
+                                TransVarNode3.appendChild(TransVarEndNode);
 
-                                lastNode = node;
+                                TransVarEndNode = TransVarNode3;
                             }
 
-                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
-                                tb.insertInFosterParent(lastNode);
+                            if (!(!(StringUtil.in(TransVarCommonAncenstor.nodeName(), Constants.InBodyEndTableFosters)))) {
+                                if (!(!(TransVarEndNode.parent() != null)))
+                                    TransVarEndNode.remove();
+                                TransVarTreebuilder.insertInFosterParent(TransVarEndNode);
                             } else {
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
-                                commonAncestor.appendChild(lastNode);
+                                if (!(!(TransVarEndNode.parent() != null)))
+                                    TransVarEndNode.remove();
+                                TransVarCommonAncenstor.appendChild(TransVarEndNode);
                             }
 
-                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());
-                            adopter.attributes().addAll(formatEl.attributes());
-                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);
-                            for (Node childNode : childNodes) {
-                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.
+                            Element TransVarAdoptee = new Element(TransVarFormatel.tag(), TransVarTreebuilder.getBaseUri());
+                            TransVarAdoptee.attributes().addAll(TransVarFormatel.attributes());
+                            Node[] TransVarFurthestBlockChildNodes = TransVarMostNested.childNodes().toArray(new Node[TransVarMostNested.childNodeSize()]);
+                            for (Node TransVarChildNodeNode : TransVarFurthestBlockChildNodes) {
+                                TransVarAdoptee.appendChild(TransVarChildNodeNode); // append will reparent. thus the clone to avoid concurrent mod.
                             }
-                            furthestBlock.appendChild(adopter);
-                            tb.removeFromActiveFormattingElements(formatEl);
+                            TransVarMostNested.appendChild(TransVarAdoptee);
+                            TransVarTreebuilder.removeFromActiveFormattingElements(TransVarFormatel);
                             // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.
-                            tb.removeFromStack(formatEl);
-                            tb.insertOnStackAfter(furthestBlock, adopter);
+                            TransVarTreebuilder.removeFromStack(TransVarFormatel);
+                            TransVarTreebuilder.insertOnStackAfter(TransVarMostNested, TransVarAdoptee);
                         }
-                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {
-                        if (!tb.inScope("name")) {
-                            if (!tb.inScope(name)) {
-                                tb.error(this);
+                    } else if (!(!(StringUtil.in(TransVarTagName, Constants.InBodyStartApplets)))) {
+                        if (!(!(!TransVarTreebuilder.inScope("name")))) {
+                            if (!(!(!TransVarTreebuilder.inScope(TransVarTagName)))) {
+                                TransVarTreebuilder.error(this);
                                 return false;
                             }
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
-                            tb.clearFormattingElementsToLastMarker();
+                            TransVarTreebuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreebuilder.currentElement().nodeName().equals(TransVarTagName))))
+                                TransVarTreebuilder.error(this);
+                            TransVarTreebuilder.popStackToClose(TransVarTagName);
+                            TransVarTreebuilder.clearFormattingElementsToLastMarker();
                         }
-                    } else if (name.equals("br")) {
-                        tb.error(this);
-                        tb.process(new Token.StartTag("br"));
+                    } else if (!(!(TransVarTagName.equals("br")))) {
+                        TransVarTreebuilder.error(this);
+                        TransVarTreebuilder.process(new Token.StartTag("br"));
                         return false;
                     } else {
-                        return anyOtherEndTag(t, tb);
+                        return anyOtherEndTag(TransVarToken, TransVarTreebuilder);
                     }
 
                     break;
