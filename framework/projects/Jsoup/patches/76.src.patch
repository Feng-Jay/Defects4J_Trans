--- src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java	2025-05-21 05:08:13
+++ ./src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java	2025-05-21 05:08:13
@@ -249,510 +249,440 @@
         }
     },
     InBody {
-        boolean process(Token t, HtmlTreeBuilder tb) {
-            switch (t.type) {
+        boolean process(Token TransVarT1, HtmlTreeBuilder TransVarTreeBuilder) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            switch (TransVarT1.type) {
                 case Character: {
-                    Token.Character c = t.asCharacter();
-                    if (c.getData().equals(nullString)) {
+                    if (!(!(false))) {
+                        System.out.println("log");
+                    }
+                    Token.Character TransVarCh = TransVarT1.asCharacter();
+                    if (!(!(TransVarCh.getData().equals(nullString)))) {
+                        if (!(!(false))) {
+                            System.out.println("log");
+                        }
                         // todo confirm that check
-                        tb.error(this);
+                        TransVarTreeBuilder.error(this);
                         return false;
-                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed
-                        tb.reconstructFormattingElements();
-                        tb.insert(c);
+                    } else if (!(!(TransVarTreeBuilder.framesetOk() && isWhitespace(TransVarCh)))) { // don't check if whitespace if frames already closed
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarCh);
                     } else {
-                        tb.reconstructFormattingElements();
-                        tb.insert(c);
-                        tb.framesetOk(false);
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarCh);
+                        TransVarTreeBuilder.framesetOk(false);
                     }
                     break;
                 }
                 case Comment: {
-                    tb.insert(t.asComment());
+                    TransVarTreeBuilder.insert(TransVarT1.asComment());
                     break;
                 }
                 case Doctype: {
-                    tb.error(this);
+                    TransVarTreeBuilder.error(this);
                     return false;
                 }
                 case StartTag:
-                    Token.StartTag startTag = t.asStartTag();
+                    Token.StartTag TransVarStartTag2 = TransVarT1.asStartTag();
                     // todo - refactor to a switch statement
-                    String name = startTag.normalName();
-                    if (name.equals("a")) {
-                        if (tb.getActiveFormattingElement("a") != null) {
-                            tb.error(this);
-                            tb.processEndTag("a");
+                    String TransVarLocalName = TransVarStartTag2.normalName();
+                    if (!(!(TransVarLocalName.equals("a")))) {
+                        if (!(!(TransVarTreeBuilder.getActiveFormattingElement("a") != null))) {
+                            TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.processEndTag("a");
 
                             // still on stack?
-                            Element remainingA = tb.getFromStack("a");
-                            if (remainingA != null) {
-                                tb.removeFromActiveFormattingElements(remainingA);
-                                tb.removeFromStack(remainingA);
+                            Element TransVarRemainingElement = TransVarTreeBuilder.getFromStack("a");
+                            if (!(!(TransVarRemainingElement != null))) {
+                                TransVarTreeBuilder.removeFromActiveFormattingElements(TransVarRemainingElement);
+                                TransVarTreeBuilder.removeFromStack(TransVarRemainingElement);
                             }
                         }
-                        tb.reconstructFormattingElements();
-                        Element a = tb.insert(startTag);
-                        tb.pushActiveFormattingElements(a);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {
-                        tb.reconstructFormattingElements();
-                        tb.insertEmpty(startTag);
-                        tb.framesetOk(false);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        Element TransVarElement = TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.pushActiveFormattingElements(TransVarElement);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartEmptyFormatters)))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insertEmpty(TransVarStartTag2);
+                        TransVarTreeBuilder.framesetOk(false);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartPClosers)))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insert(startTag);
-                    } else if (name.equals("span")) {
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("span")))) {
                         // same as final else, but short circuits lots of checks
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                    } else if (name.equals("li")) {
-                        tb.framesetOk(false);
-                        ArrayList<Element> stack = tb.getStack();
-                        for (int i = stack.size() - 1; i > 0; i--) {
-                            Element el = stack.get(i);
-                            if (el.nodeName().equals("li")) {
-                                tb.processEndTag("li");
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("li")))) {
+                        TransVarTreeBuilder.framesetOk(false);
+                        ArrayList<Element> TransVarTagStack = TransVarTreeBuilder.getStack();
+                        int TransVarIndex = TransVarTagStack.size() - 1;
+                        while (!(!(TransVarIndex > 0))) {
+                            Element TransVarLocalElement = TransVarTagStack.get(TransVarIndex);
+                            if (!(!(TransVarLocalElement.nodeName().equals("li")))) {
+                                TransVarTreeBuilder.processEndTag("li");
                                 break;
                             }
-                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))
+                            if (!(!(TransVarTreeBuilder.isSpecial(TransVarLocalElement) && !StringUtil
+                                    .inSorted(TransVarLocalElement.nodeName(), Constants.InBodyStartLiBreakers))))
                                 break;
+                            TransVarIndex--;
                         }
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insert(startTag);
-                    } else if (name.equals("html")) {
-                        tb.error(this);
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("html")))) {
+                        TransVarTreeBuilder.error(this);
                         // merge attributes onto real html
-                        Element html = tb.getStack().get(0);
-                        for (Attribute attribute : startTag.getAttributes()) {
-                            if (!html.hasAttr(attribute.getKey()))
-                                html.attributes().put(attribute);
+                        Element TransVarTag = TransVarTreeBuilder.getStack().get(0);
+                        for (Attribute TransVarAttributeLocalName : TransVarStartTag2.getAttributes()) {
+                            if (!(!(!TransVarTag.hasAttr(TransVarAttributeLocalName.getKey()))))
+                                TransVarTag.attributes().put(TransVarAttributeLocalName);
                         }
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {
-                        return tb.process(t, InHead);
-                    } else if (name.equals("body")) {
-                        tb.error(this);
-                        ArrayList<Element> stack = tb.getStack();
-                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartToHead)))) {
+                        return TransVarTreeBuilder.process(TransVarT1, InHead);
+                    } else if (!(!(TransVarLocalName.equals("body")))) {
+                        TransVarTreeBuilder.error(this);
+                        ArrayList<Element> TransVarElementStack = TransVarTreeBuilder.getStack();
+                        if (!(!(TransVarElementStack.size() == 1 || (TransVarElementStack.size() > 2
+                                && !TransVarElementStack.get(1).nodeName().equals("body"))))) {
                             // only in fragment case
                             return false; // ignore
                         } else {
-                            tb.framesetOk(false);
-                            Element body = stack.get(1);
-                            for (Attribute attribute : startTag.getAttributes()) {
-                                if (!body.hasAttr(attribute.getKey()))
-                                    body.attributes().put(attribute);
+                            TransVarTreeBuilder.framesetOk(false);
+                            Element TransVarBody1 = TransVarElementStack.get(1);
+                            for (Attribute TransVarAtt : TransVarStartTag2.getAttributes()) {
+                                if (!(!(!TransVarBody1.hasAttr(TransVarAtt.getKey()))))
+                                    TransVarBody1.attributes().put(TransVarAtt);
                             }
                         }
-                    } else if (name.equals("frameset")) {
-                        tb.error(this);
-                        ArrayList<Element> stack = tb.getStack();
-                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
+                    } else if (!(!(TransVarLocalName.equals("frameset")))) {
+                        TransVarTreeBuilder.error(this);
+                        ArrayList<Element> TransVarElementList = TransVarTreeBuilder.getStack();
+                        if (!(!(TransVarElementList.size() == 1 || (TransVarElementList.size() > 2
+                                && !TransVarElementList.get(1).nodeName().equals("body"))))) {
                             // only in fragment case
                             return false; // ignore
-                        } else if (!tb.framesetOk()) {
+                        } else if (!(!(!TransVarTreeBuilder.framesetOk()))) {
                             return false; // ignore frameset
                         } else {
-                            Element second = stack.get(1);
-                            if (second.parent() != null)
-                                second.remove();
-                            // pop up to html element
-                            while (stack.size() > 1)
-                                stack.remove(stack.size()-1);
-                            tb.insert(startTag);
-                            tb.transition(InFrameset);
+                            Element TransVarSecondElement = TransVarElementList.get(1);
+                            if (!(!(TransVarSecondElement.parent() != null)))
+                                TransVarSecondElement.remove();
+                            for (; !(!(TransVarElementList.size() > 1));)
+                                TransVarElementList.remove(TransVarElementList.size() - 1);
+                            TransVarTreeBuilder.insert(TransVarStartTag2);
+                            TransVarTreeBuilder.transition(InFrameset);
                         }
-                    } else if (StringUtil.inSorted(name, Constants.Headings)) {
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.Headings)))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {
-                            tb.error(this);
-                            tb.pop();
+                        if (!(!(StringUtil.inSorted(TransVarTreeBuilder.currentElement().nodeName(), Constants.Headings)))) {
+                            TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.pop();
                         }
-                        tb.insert(startTag);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartPreListing)))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insert(startTag);
-                        tb.reader.matchConsume("\n"); // ignore LF if next token
-                        tb.framesetOk(false);
-                    } else if (name.equals("form")) {
-                        if (tb.getFormElement() != null) {
-                            tb.error(this);
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.framesetOk(false);
+                    } else if (!(!(TransVarLocalName.equals("form")))) {
+                        if (!(!(TransVarTreeBuilder.getFormElement() != null))) {
+                            TransVarTreeBuilder.error(this);
                             return false;
                         }
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insertForm(startTag, true);
-                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {
-                        tb.framesetOk(false);
-                        ArrayList<Element> stack = tb.getStack();
-                        for (int i = stack.size() - 1; i > 0; i--) {
-                            Element el = stack.get(i);
-                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {
-                                tb.processEndTag(el.nodeName());
+                        TransVarTreeBuilder.insertForm(TransVarStartTag2, true);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.DdDt)))) {
+                        TransVarTreeBuilder.framesetOk(false);
+                        ArrayList<Element> TransVarStackList = TransVarTreeBuilder.getStack();
+                        int TransVarCounter = TransVarStackList.size() - 1;
+                        while (!(!(TransVarCounter > 0))) {
+                            Element TransVarFirstElement = TransVarStackList.get(TransVarCounter);
+                            if (!(!(StringUtil.inSorted(TransVarFirstElement.nodeName(), Constants.DdDt)))) {
+                                TransVarTreeBuilder.processEndTag(TransVarFirstElement.nodeName());
                                 break;
                             }
-                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))
+                            if (!(!(TransVarTreeBuilder.isSpecial(TransVarFirstElement) && !StringUtil
+                                    .inSorted(TransVarFirstElement.nodeName(), Constants.InBodyStartLiBreakers))))
                                 break;
+                            TransVarCounter--;
                         }
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insert(startTag);
-                    } else if (name.equals("plaintext")) {
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("plaintext")))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insert(startTag);
-                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
-                    } else if (name.equals("button")) {
-                        if (tb.inButtonScope("button")) {
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
+                    } else if (!(!(TransVarLocalName.equals("button")))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("button")))) {
                             // close and reprocess
-                            tb.error(this);
-                            tb.processEndTag("button");
-                            tb.process(startTag);
+                            TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.processEndTag("button");
+                            TransVarTreeBuilder.process(TransVarStartTag2);
                         } else {
-                            tb.reconstructFormattingElements();
-                            tb.insert(startTag);
-                            tb.framesetOk(false);
+                            TransVarTreeBuilder.reconstructFormattingElements();
+                            TransVarTreeBuilder.insert(TransVarStartTag2);
+                            TransVarTreeBuilder.framesetOk(false);
                         }
-                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {
-                        tb.reconstructFormattingElements();
-                        Element el = tb.insert(startTag);
-                        tb.pushActiveFormattingElements(el);
-                    } else if (name.equals("nobr")) {
-                        tb.reconstructFormattingElements();
-                        if (tb.inScope("nobr")) {
-                            tb.error(this);
-                            tb.processEndTag("nobr");
-                            tb.reconstructFormattingElements();
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.Formatters)))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        Element TransVarStartElement = TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.pushActiveFormattingElements(TransVarStartElement);
+                    } else if (!(!(TransVarLocalName.equals("nobr")))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        if (!(!(TransVarTreeBuilder.inScope("nobr")))) {
+                            TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.processEndTag("nobr");
+                            TransVarTreeBuilder.reconstructFormattingElements();
                         }
-                        Element el = tb.insert(startTag);
-                        tb.pushActiveFormattingElements(el);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                        tb.insertMarkerToFormattingElements();
-                        tb.framesetOk(false);
-                    } else if (name.equals("table")) {
-                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        Element TransVarNewElement = TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.pushActiveFormattingElements(TransVarNewElement);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartApplets)))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.insertMarkerToFormattingElements();
+                        TransVarTreeBuilder.framesetOk(false);
+                    } else if (!(!(TransVarLocalName.equals("table")))) {
+                        if (!(!(TransVarTreeBuilder.getDocument().quirksMode() != Document.QuirksMode.quirks
+                                && TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insert(startTag);
-                        tb.framesetOk(false);
-                        tb.transition(InTable);
-                    } else if (name.equals("input")) {
-                        tb.reconstructFormattingElements();
-                        Element el = tb.insertEmpty(startTag);
-                        if (!el.attr("type").equalsIgnoreCase("hidden"))
-                            tb.framesetOk(false);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {
-                        tb.insertEmpty(startTag);
-                    } else if (name.equals("hr")) {
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.framesetOk(false);
+                        TransVarTreeBuilder.transition(InTable);
+                    } else if (!(!(TransVarLocalName.equals("input")))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        Element TransVarEl1 = TransVarTreeBuilder.insertEmpty(TransVarStartTag2);
+                        if (!(!(!TransVarEl1.attr("type").equalsIgnoreCase("hidden"))))
+                            TransVarTreeBuilder.framesetOk(false);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartMedia)))) {
+                        TransVarTreeBuilder.insertEmpty(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("hr")))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.insertEmpty(startTag);
-                        tb.framesetOk(false);
-                    } else if (name.equals("image")) {
-                        if (tb.getFromStack("svg") == null)
-                            return tb.process(startTag.name("img")); // change <image> to <img>, unless in svg
+                        TransVarTreeBuilder.insertEmpty(TransVarStartTag2);
+                        TransVarTreeBuilder.framesetOk(false);
+                    } else if (!(!(TransVarLocalName.equals("image")))) {
+                        if (!(!(TransVarTreeBuilder.getFromStack("svg") == null)))
+                            return TransVarTreeBuilder.process(TransVarStartTag2.name("img")); // change <image> to <img>, unless in svg
                         else
-                            tb.insert(startTag);
-                    } else if (name.equals("isindex")) {
+                            TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("isindex")))) {
                         // how much do we care about the early 90s?
-                        tb.error(this);
-                        if (tb.getFormElement() != null)
+                        TransVarTreeBuilder.error(this);
+                        if (!(!(TransVarTreeBuilder.getFormElement() != null)))
                             return false;
 
-                        tb.processStartTag("form");
-                        if (startTag.attributes.hasKey("action")) {
-                            Element form = tb.getFormElement();
-                            form.attr("action", startTag.attributes.get("action"));
+                        TransVarTreeBuilder.processStartTag("form");
+                        if (!(!(TransVarStartTag2.attributes.hasKey("action")))) {
+                            Element TransVarFormElement = TransVarTreeBuilder.getFormElement();
+                            TransVarFormElement.attr("action", TransVarStartTag2.attributes.get("action"));
                         }
-                        tb.processStartTag("hr");
-                        tb.processStartTag("label");
+                        TransVarTreeBuilder.processStartTag("hr");
+                        TransVarTreeBuilder.processStartTag("label");
                         // hope you like english.
-                        String prompt = startTag.attributes.hasKey("prompt") ?
-                                startTag.attributes.get("prompt") :
+                        String TransVarPromptMessage = TransVarStartTag2.attributes.hasKey("prompt") ?
+                                TransVarStartTag2.attributes.get("prompt") :
                                 "This is a searchable index. Enter search keywords: ";
 
-                        tb.process(new Token.Character().data(prompt));
+                        TransVarTreeBuilder.process(new Token.Character().data(TransVarPromptMessage));
 
                         // input
-                        Attributes inputAttribs = new Attributes();
-                        for (Attribute attr : startTag.attributes) {
-                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))
-                                inputAttribs.put(attr);
+                        Attributes TransVarAtts = new Attributes();
+                        for (Attribute TransVarAttribute : TransVarStartTag2.attributes) {
+                            if (!(!(!StringUtil.inSorted(TransVarAttribute.getKey(), Constants.InBodyStartInputAttribs))))
+                                TransVarAtts.put(TransVarAttribute);
                         }
-                        inputAttribs.put("name", "isindex");
-                        tb.processStartTag("input", inputAttribs);
-                        tb.processEndTag("label");
-                        tb.processStartTag("hr");
-                        tb.processEndTag("form");
-                    } else if (name.equals("textarea")) {
-                        tb.insert(startTag);
+                        TransVarAtts.put("name", "isindex");
+                        TransVarTreeBuilder.processStartTag("input", TransVarAtts);
+                        TransVarTreeBuilder.processEndTag("label");
+                        TransVarTreeBuilder.processStartTag("hr");
+                        TransVarTreeBuilder.processEndTag("form");
+                    } else if (!(!(TransVarLocalName.equals("textarea")))) {
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
                         // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
-                        tb.tokeniser.transition(TokeniserState.Rcdata);
-                        tb.markInsertionMode();
-                        tb.framesetOk(false);
-                        tb.transition(Text);
-                    } else if (name.equals("xmp")) {
-                        if (tb.inButtonScope("p")) {
-                            tb.processEndTag("p");
+                        TransVarTreeBuilder.tokeniser.transition(TokeniserState.Rcdata);
+                        TransVarTreeBuilder.markInsertionMode();
+                        TransVarTreeBuilder.framesetOk(false);
+                        TransVarTreeBuilder.transition(Text);
+                    } else if (!(!(TransVarLocalName.equals("xmp")))) {
+                        if (!(!(TransVarTreeBuilder.inButtonScope("p")))) {
+                            TransVarTreeBuilder.processEndTag("p");
                         }
-                        tb.reconstructFormattingElements();
-                        tb.framesetOk(false);
-                        handleRawtext(startTag, tb);
-                    } else if (name.equals("iframe")) {
-                        tb.framesetOk(false);
-                        handleRawtext(startTag, tb);
-                    } else if (name.equals("noembed")) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.framesetOk(false);
+                        handleRawtext(TransVarStartTag2, TransVarTreeBuilder);
+                    } else if (!(!(TransVarLocalName.equals("iframe")))) {
+                        TransVarTreeBuilder.framesetOk(false);
+                        handleRawtext(TransVarStartTag2, TransVarTreeBuilder);
+                    } else if (!(!(TransVarLocalName.equals("noembed")))) {
                         // also handle noscript if script enabled
-                        handleRawtext(startTag, tb);
-                    } else if (name.equals("select")) {
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                        tb.framesetOk(false);
+                        handleRawtext(TransVarStartTag2, TransVarTreeBuilder);
+                    } else if (!(!(TransVarLocalName.equals("select")))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                        TransVarTreeBuilder.framesetOk(false);
 
-                        HtmlTreeBuilderState state = tb.state();
-                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))
-                            tb.transition(InSelectInTable);
+                        HtmlTreeBuilderState TransVarStateObject = TransVarTreeBuilder.state();
+                        if (!(!(TransVarStateObject.equals(InTable) || TransVarStateObject.equals(InCaption)
+                                || TransVarStateObject.equals(InTableBody) || TransVarStateObject.equals(InRow)
+                                || TransVarStateObject.equals(InCell))))
+                            TransVarTreeBuilder.transition(InSelectInTable);
                         else
-                            tb.transition(InSelect);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {
-                        if (tb.currentElement().nodeName().equals("option"))
-                            tb.processEndTag("option");
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {
-                        if (tb.inScope("ruby")) {
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals("ruby")) {
-                                tb.error(this);
-                                tb.popStackToBefore("ruby"); // i.e. close up to but not include name
+                            TransVarTreeBuilder.transition(InSelect);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartOptions)))) {
+                        if (!(!(TransVarTreeBuilder.currentElement().nodeName().equals("option"))))
+                            TransVarTreeBuilder.processEndTag("option");
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartRuby)))) {
+                        if (!(!(TransVarTreeBuilder.inScope("ruby")))) {
+                            TransVarTreeBuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals("ruby")))) {
+                                TransVarTreeBuilder.error(this);
+                                TransVarTreeBuilder.popStackToBefore("ruby"); // i.e. close up to but not include name
                             }
-                            tb.insert(startTag);
+                            TransVarTreeBuilder.insert(TransVarStartTag2);
                         }
-                    } else if (name.equals("math")) {
-                        tb.reconstructFormattingElements();
+                    } else if (!(!(TransVarLocalName.equals("math")))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
                         // todo: handle A start tag whose tag name is "math" (i.e. foreign, mathml)
-                        tb.insert(startTag);
-                    } else if (name.equals("svg")) {
-                        tb.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(TransVarLocalName.equals("svg")))) {
+                        TransVarTreeBuilder.reconstructFormattingElements();
                         // todo: handle A start tag whose tag name is "svg" (xlink, svg)
-                        tb.insert(startTag);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {
-                        tb.error(this);
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartDrop)))) {
+                        TransVarTreeBuilder.error(this);
                         return false;
                     } else {
-                        tb.reconstructFormattingElements();
-                        tb.insert(startTag);
+                        TransVarTreeBuilder.reconstructFormattingElements();
+                        TransVarTreeBuilder.insert(TransVarStartTag2);
                     }
                     break;
 
                 case EndTag:
-                    Token.EndTag endTag = t.asEndTag();
-                    name = endTag.normalName();
-                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {
-                        // Adoption Agency Algorithm.
-                        for (int i = 0; i < 8; i++) {
-                            Element formatEl = tb.getActiveFormattingElement(name);
-                            if (formatEl == null)
-                                return anyOtherEndTag(t, tb);
-                            else if (!tb.onStack(formatEl)) {
-                                tb.error(this);
-                                tb.removeFromActiveFormattingElements(formatEl);
-                                return true;
-                            } else if (!tb.inScope(formatEl.nodeName())) {
-                                tb.error(this);
-                                return false;
-                            } else if (tb.currentElement() != formatEl)
-                                tb.error(this);
-
-                            Element furthestBlock = null;
-                            Element commonAncestor = null;
-                            boolean seenFormattingElement = false;
-                            ArrayList<Element> stack = tb.getStack();
-                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents
-                            // run-aways
-                            final int stackSize = stack.size();
-                            for (int si = 0; si < stackSize && si < 64; si++) {
-                                Element el = stack.get(si);
-                                if (el == formatEl) {
-                                    commonAncestor = stack.get(si - 1);
-                                    seenFormattingElement = true;
-                                } else if (seenFormattingElement && tb.isSpecial(el)) {
-                                    furthestBlock = el;
-                                    break;
-                                }
-                            }
-                            if (furthestBlock == null) {
-                                tb.popStackToClose(formatEl.nodeName());
-                                tb.removeFromActiveFormattingElements(formatEl);
-                                return true;
-                            }
-
-                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.
-                            // does that mean: int pos of format el in list?
-                            Element node = furthestBlock;
-                            Element lastNode = furthestBlock;
-                            for (int j = 0; j < 3; j++) {
-                                if (tb.onStack(node))
-                                    node = tb.aboveOnStack(node);
-                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check
-                                    tb.removeFromStack(node);
-                                    continue;
-                                } else if (node == formatEl)
-                                    break;
-
-                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());
-                                // case will follow the original node (so honours ParseSettings)
-                                tb.replaceActiveFormattingElement(node, replacement);
-                                tb.replaceOnStack(node, replacement);
-                                node = replacement;
-
-                                if (lastNode == furthestBlock) {
-                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.
-                                    // not getting how this bookmark both straddles the element above, but is inbetween here...
-                                }
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
-                                node.appendChild(lastNode);
-
-                                lastNode = node;
-                            }
-
-                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
-                                tb.insertInFosterParent(lastNode);
-                            } else {
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
-                                commonAncestor.appendChild(lastNode);
-                            }
-
-                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());
-                            adopter.attributes().addAll(formatEl.attributes());
-                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);
-                            for (Node childNode : childNodes) {
-                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.
-                            }
-                            furthestBlock.appendChild(adopter);
-                            tb.removeFromActiveFormattingElements(formatEl);
-                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.
-                            tb.removeFromStack(formatEl);
-                            tb.insertOnStackAfter(furthestBlock, adopter);
-                        }
-                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {
-                        if (!tb.inScope(name)) {
+                    Token.EndTag TransVarEndTag2 = TransVarT1.asEndTag();
+                    TransVarLocalName = TransVarEndTag2.normalName();
+                    if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyEndAdoptionFormatters)))) {
+                        int TransVarK = 0;
+                        while (!(!(TransVarK < 8))){Element TransVarFormatElement=TransVarTreeBuilder.getActiveFormattingElement(TransVarLocalName);if (!(!(TransVarFormatElement == null)))return anyOtherEndTag(TransVarT1,TransVarTreeBuilder); else if (!(!(!TransVarTreeBuilder.onStack(TransVarFormatElement)))){TransVarTreeBuilder.error(this);TransVarTreeBuilder.removeFromActiveFormattingElements(TransVarFormatElement);return true;} else if (!(!(!TransVarTreeBuilder.inScope(TransVarFormatElement.nodeName())))){TransVarTreeBuilder.error(this);return false;} else if (!(!(TransVarTreeBuilder.currentElement() != TransVarFormatElement)))TransVarTreeBuilder.error(this);Element TransVarFurthestElement=null;Element TransVarAncestor=null;boolean TransVarInFormattingElement=false;ArrayList<Element> TransVarElStack=TransVarTreeBuilder.getStack();final int TransVarStacksize=TransVarElStack.size();int TransVarSIndex=0;while (!(!(TransVarSIndex < TransVarStacksize && TransVarSIndex < 64))){Element TransVarCurrentElement=TransVarElStack.get(TransVarSIndex);if (!(!(TransVarCurrentElement == TransVarFormatElement))){TransVarAncestor=TransVarElStack.get(TransVarSIndex - 1);TransVarInFormattingElement=true;} else if (!(!(TransVarInFormattingElement && TransVarTreeBuilder.isSpecial(TransVarCurrentElement)))){TransVarFurthestElement=TransVarCurrentElement;break;}TransVarSIndex++;}if (!(!(TransVarFurthestElement == null))){TransVarTreeBuilder.popStackToClose(TransVarFormatElement.nodeName());TransVarTreeBuilder.removeFromActiveFormattingElements(TransVarFormatElement);return true;}Element TransVarFurthestBlock=TransVarFurthestElement;Element TransVarLastTag=TransVarFurthestElement;int TransVarCount=0;while (!(!(TransVarCount < 3))){if (!(!(TransVarTreeBuilder.onStack(TransVarFurthestBlock))))TransVarFurthestBlock=TransVarTreeBuilder.aboveOnStack(TransVarFurthestBlock);if (!(!(!TransVarTreeBuilder.isInActiveFormattingElements(TransVarFurthestBlock)))){TransVarTreeBuilder.removeFromStack(TransVarFurthestBlock);continue;} else if (!(!(TransVarFurthestBlock == TransVarFormatElement)))break;Element TransVarReplacementElement=new Element(Tag.valueOf(TransVarFurthestBlock.nodeName(),ParseSettings.preserveCase),TransVarTreeBuilder.getBaseUri());TransVarTreeBuilder.replaceActiveFormattingElement(TransVarFurthestBlock,TransVarReplacementElement);TransVarTreeBuilder.replaceOnStack(TransVarFurthestBlock,TransVarReplacementElement);TransVarFurthestBlock=TransVarReplacementElement;if (!(!(TransVarLastTag == TransVarFurthestElement))){}if (!(!(TransVarLastTag.parent() != null)))TransVarLastTag.remove();TransVarFurthestBlock.appendChild(TransVarLastTag);TransVarLastTag=TransVarFurthestBlock;TransVarCount++;}if (!(!(StringUtil.inSorted(TransVarAncestor.nodeName(), Constants.InBodyEndTableFosters)))){if (!(!(TransVarLastTag.parent() != null)))TransVarLastTag.remove();TransVarTreeBuilder.insertInFosterParent(TransVarLastTag);} else {if (!(!(TransVarLastTag.parent() != null)))TransVarLastTag.remove();TransVarAncestor.appendChild(TransVarLastTag);}Element TransVarFormatAdp=new Element(TransVarFormatElement.tag(),TransVarTreeBuilder.getBaseUri());TransVarFormatAdp.attributes().addAll(TransVarFormatElement.attributes());Node[] TransVarChild=TransVarFurthestElement.childNodes().toArray(new Node[TransVarFurthestElement.childNodeSize()]);for (Node TransVarNewChildNode:TransVarChild){TransVarFormatAdp.appendChild(TransVarNewChildNode);}TransVarFurthestElement.appendChild(TransVarFormatAdp);TransVarTreeBuilder.removeFromActiveFormattingElements(TransVarFormatElement);TransVarTreeBuilder.removeFromStack(TransVarFormatElement);TransVarTreeBuilder.insertOnStackAfter(TransVarFurthestElement,TransVarFormatAdp);TransVarK++;}
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyEndClosers)))) {
+                        if (!(!(!TransVarTreeBuilder.inScope(TransVarLocalName)))) {
                             // nothing to close
-                            tb.error(this);
+                            TransVarTreeBuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreeBuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.popStackToClose(TransVarLocalName);
                         }
-                    } else if (name.equals("span")) {
+                    } else if (!(!(TransVarLocalName.equals("span")))) {
                         // same as final fall through, but saves short circuit
-                        return anyOtherEndTag(t, tb);
-                    } else if (name.equals("li")) {
-                        if (!tb.inListItemScope(name)) {
-                            tb.error(this);
+                        return anyOtherEndTag(TransVarT1, TransVarTreeBuilder);
+                    } else if (!(!(TransVarLocalName.equals("li")))) {
+                        if (!(!(!TransVarTreeBuilder.inListItemScope(TransVarLocalName)))) {
+                            TransVarTreeBuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreeBuilder.generateImpliedEndTags(TransVarLocalName);
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.popStackToClose(TransVarLocalName);
                         }
-                    } else if (name.equals("body")) {
-                        if (!tb.inScope("body")) {
-                            tb.error(this);
+                    } else if (!(!(TransVarLocalName.equals("body")))) {
+                        if (!(!(!TransVarTreeBuilder.inScope("body")))) {
+                            TransVarTreeBuilder.error(this);
                             return false;
                         } else {
                             // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html
-                            tb.transition(AfterBody);
+                            TransVarTreeBuilder.transition(AfterBody);
                         }
-                    } else if (name.equals("html")) {
-                        boolean notIgnored = tb.processEndTag("body");
-                        if (notIgnored)
-                            return tb.process(endTag);
-                    } else if (name.equals("form")) {
-                        Element currentForm = tb.getFormElement();
-                        tb.setFormElement(null);
-                        if (currentForm == null || !tb.inScope(name)) {
-                            tb.error(this);
+                    } else if (!(!(TransVarLocalName.equals("html")))) {
+                        boolean TransVarIsIgnored = TransVarTreeBuilder.processEndTag("body");
+                        if (!(!(TransVarIsIgnored)))
+                            return TransVarTreeBuilder.process(TransVarEndTag2);
+                    } else if (!(!(TransVarLocalName.equals("form")))) {
+                        Element TransVarForm = TransVarTreeBuilder.getFormElement();
+                        TransVarTreeBuilder.setFormElement(null);
+                        if (!(!(TransVarForm == null || !TransVarTreeBuilder.inScope(TransVarLocalName)))) {
+                            TransVarTreeBuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
+                            TransVarTreeBuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
                             // remove currentForm from stack. will shift anything under up.
-                            tb.removeFromStack(currentForm);
+                            TransVarTreeBuilder.removeFromStack(TransVarForm);
                         }
-                    } else if (name.equals("p")) {
-                        if (!tb.inButtonScope(name)) {
-                            tb.error(this);
-                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>
-                            return tb.process(endTag);
+                    } else if (!(!(TransVarLocalName.equals("p")))) {
+                        if (!(!(!TransVarTreeBuilder.inButtonScope(TransVarLocalName)))) {
+                            TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.processStartTag(TransVarLocalName); // if no p to close, creates an empty <p></p>
+                            return TransVarTreeBuilder.process(TransVarEndTag2);
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreeBuilder.generateImpliedEndTags(TransVarLocalName);
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.popStackToClose(TransVarLocalName);
                         }
-                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {
-                        if (!tb.inScope(name)) {
-                            tb.error(this);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.DdDt)))) {
+                        if (!(!(!TransVarTreeBuilder.inScope(TransVarLocalName)))) {
+                            TransVarTreeBuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
+                            TransVarTreeBuilder.generateImpliedEndTags(TransVarLocalName);
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.popStackToClose(TransVarLocalName);
                         }
-                    } else if (StringUtil.inSorted(name, Constants.Headings)) {
-                        if (!tb.inScope(Constants.Headings)) {
-                            tb.error(this);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.Headings)))) {
+                        if (!(!(!TransVarTreeBuilder.inScope(Constants.Headings)))) {
+                            TransVarTreeBuilder.error(this);
                             return false;
                         } else {
-                            tb.generateImpliedEndTags(name);
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(Constants.Headings);
+                            TransVarTreeBuilder.generateImpliedEndTags(TransVarLocalName);
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.popStackToClose(Constants.Headings);
                         }
-                    } else if (name.equals("sarcasm")) {
+                    } else if (!(!(TransVarLocalName.equals("sarcasm")))) {
                         // *sigh*
-                        return anyOtherEndTag(t, tb);
-                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {
-                        if (!tb.inScope("name")) {
-                            if (!tb.inScope(name)) {
-                                tb.error(this);
+                        return anyOtherEndTag(TransVarT1, TransVarTreeBuilder);
+                    } else if (!(!(StringUtil.inSorted(TransVarLocalName, Constants.InBodyStartApplets)))) {
+                        if (!(!(!TransVarTreeBuilder.inScope("name")))) {
+                            if (!(!(!TransVarTreeBuilder.inScope(TransVarLocalName)))) {
+                                TransVarTreeBuilder.error(this);
                                 return false;
                             }
-                            tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
-                                tb.error(this);
-                            tb.popStackToClose(name);
-                            tb.clearFormattingElementsToLastMarker();
+                            TransVarTreeBuilder.generateImpliedEndTags();
+                            if (!(!(!TransVarTreeBuilder.currentElement().nodeName().equals(TransVarLocalName))))
+                                TransVarTreeBuilder.error(this);
+                            TransVarTreeBuilder.popStackToClose(TransVarLocalName);
+                            TransVarTreeBuilder.clearFormattingElementsToLastMarker();
                         }
-                    } else if (name.equals("br")) {
-                        tb.error(this);
-                        tb.processStartTag("br");
+                    } else if (!(!(TransVarLocalName.equals("br")))) {
+                        TransVarTreeBuilder.error(this);
+                        TransVarTreeBuilder.processStartTag("br");
                         return false;
                     } else {
-                        return anyOtherEndTag(t, tb);
+                        return anyOtherEndTag(TransVarT1, TransVarTreeBuilder);
                     }
 
                     break;
