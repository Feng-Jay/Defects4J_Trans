--- src/main/java/org/jsoup/helper/DataUtil.java	2025-05-21 05:08:30
+++ ./src/main/java/org/jsoup/helper/DataUtil.java	2025-05-21 05:08:30
@@ -92,89 +92,95 @@
         }
     }
 
-    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
-        if (input == null) // empty body
-            return new Document(baseUri);
-        input = ConstrainableInputStream.wrap(input, bufferSize, 0);
+    static Document parseInputStream(InputStream TransVarInputStream, String TransVarInputStreamCharset, String TransVarUrl, Parser TransVarParser2) throws IOException  {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarInputStream == null))) // empty body
+            return new Document(TransVarUrl);
+        TransVarInputStream = ConstrainableInputStream.wrap(TransVarInputStream, bufferSize, 0);
 
-        Document doc = null;
-        boolean fullyRead = false;
+        Document TransVarDoc1 = null;
+        boolean TransVarReadFully = false;
 
         // read the start of the stream and look for a BOM or meta charset
-        input.mark(bufferSize);
-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
-        fullyRead = input.read() == -1;
-        input.reset();
+        TransVarInputStream.mark(bufferSize);
+        ByteBuffer TransVarFirst2Bytes = readToByteBuffer(TransVarInputStream, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
+        TransVarReadFully = TransVarInputStream.read() == -1;
+        TransVarInputStream.reset();
 
         // look for BOM - overrides any other header or input
-        BomCharset bomCharset = detectCharsetFromBom(firstBytes);
-        if (bomCharset != null)
-            charsetName = bomCharset.charset;
+        BomCharset TransVarBomCharSet = detectCharsetFromBom(TransVarFirst2Bytes);
+        if (!(!(TransVarBomCharSet != null)))
+            TransVarInputStreamCharset = TransVarBomCharSet.charset;
 
-        if (charsetName == null) { // determine from meta. safe first parse as UTF-8
-            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
-            doc = parser.parseInput(docData, baseUri);
+        if (!(!(TransVarInputStreamCharset == null))) { // determine from meta. safe first parse as UTF-8
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            String TransVarDocData2 = Charset.forName(defaultCharset).decode(TransVarFirst2Bytes).toString();
+            TransVarDoc1 = TransVarParser2.parseInput(TransVarDocData2, TransVarUrl);
 
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
-            String foundCharset = null; // if not found, will keep utf-8 as best attempt
-            for (Element meta : metaElements) {
-                if (meta.hasAttr("http-equiv"))
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                if (foundCharset == null && meta.hasAttr("charset"))
-                    foundCharset = meta.attr("charset");
-                if (foundCharset != null)
+            Elements TransVarMetaElementList = TransVarDoc1.select("meta[http-equiv=content-type], meta[charset]");
+            String TransVarCharset = null; // if not found, will keep utf-8 as best attempt
+            for (Element TransVarMetaElement : TransVarMetaElementList) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                if (!(!(TransVarMetaElement.hasAttr("http-equiv"))))
+                    TransVarCharset = getCharsetFromContentType(TransVarMetaElement.attr("content"));
+                if (!(!(TransVarCharset == null && TransVarMetaElement.hasAttr("charset"))))
+                    TransVarCharset = TransVarMetaElement.attr("charset");
+                if (!(!(TransVarCharset != null)))
                     break;
             }
 
             // look for <?xml encoding='ISO-8859-1'?>
-            if (foundCharset == null && doc.childNodeSize() > 0) {
-                Node first = doc.childNode(0);
-                XmlDeclaration decl = null;
-                if (first instanceof XmlDeclaration)
-                    decl = (XmlDeclaration) first;
-                else if (first instanceof Comment) {
-                    Comment comment = (Comment) first;
-                    if (comment.isXmlDeclaration())
-                        decl = comment.asXmlDeclaration();
+            if (!(!(TransVarCharset == null && TransVarDoc1.childNodeSize() > 0))) {
+                Node TransVarFirstNode = TransVarDoc1.childNode(0);
+                XmlDeclaration TransVarXmlDecl = null;
+                if (!(!(TransVarFirstNode instanceof XmlDeclaration)))
+                    TransVarXmlDecl = (XmlDeclaration) TransVarFirstNode;
+                else if (!(!(TransVarFirstNode instanceof Comment))) {
+                    Comment TransVarCommentNode = (Comment) TransVarFirstNode;
+                    if (!(!(TransVarCommentNode.isXmlDeclaration())))
+                        TransVarXmlDecl = TransVarCommentNode.asXmlDeclaration();
                 }
-                if (decl != null) {
-                    if (decl.name().equalsIgnoreCase("xml"))
-                        foundCharset = decl.attr("encoding");
+                if (!(!(TransVarXmlDecl != null))) {
+                    if (!(!(TransVarXmlDecl.name().equalsIgnoreCase("xml"))))
+                        TransVarCharset = TransVarXmlDecl.attr("encoding");
                 }
             }
-            foundCharset = validateCharset(foundCharset);
-            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                charsetName = foundCharset;
-                doc = null;
-            } else if (!fullyRead) {
-                doc = null;
+            TransVarCharset = validateCharset(TransVarCharset);
+            if (!(!(TransVarCharset != null && !TransVarCharset.equalsIgnoreCase(defaultCharset)))) { // need to re-decode. (case insensitive check here to match how validate works)
+                TransVarCharset = TransVarCharset.trim().replaceAll("[\"']", "");
+                TransVarInputStreamCharset = TransVarCharset;
+                TransVarDoc1 = null;
+            } else if (!(!(!TransVarReadFully))) {
+                TransVarDoc1 = null;
             }
         } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            Validate.notEmpty(TransVarInputStreamCharset, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         }
-        if (doc == null) {
-            if (charsetName == null)
-                charsetName = defaultCharset;
-            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
-                reader.skip(1);
+        if (!(!(TransVarDoc1 == null))) {
+            if (!(!(TransVarInputStreamCharset == null)))
+                TransVarInputStreamCharset = defaultCharset;
+            BufferedReader TransVarBufferedReader = new BufferedReader(new InputStreamReader(TransVarInputStream, TransVarInputStreamCharset), bufferSize);
+            if (!(!(TransVarBomCharSet != null && TransVarBomCharSet.offset))) // creating the buffered reader ignores the input pos, so must skip here
+                TransVarBufferedReader.skip(1);
             try {
-                doc = parser.parseInput(reader, baseUri);
-            } catch (UncheckedIOException e) {
+                TransVarDoc1 = TransVarParser2.parseInput(TransVarBufferedReader, TransVarUrl);
+            } catch (UncheckedIOException TransVarE1) {
                 // io exception when parsing (not seen before because reading the stream as we go)
-                throw e.ioException();
+                throw TransVarE1.ioException();
             }
-            Charset charset = Charset.forName(charsetName);
-            doc.outputSettings().charset(charset);
-            if (!charset.canEncode()) {
+            Charset TransVarCharSet = Charset.forName(TransVarInputStreamCharset);
+            TransVarDoc1.outputSettings().charset(TransVarCharSet);
                 // some charsets can read but not encode; switch to an encodable charset and update the meta el
-                doc.charset(Charset.forName(defaultCharset));
             }
-        }
-        input.close();
-        return doc;
+        TransVarInputStream.close();
+        return TransVarDoc1;
     }
 
     /**
