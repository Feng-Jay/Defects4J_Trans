--- src/main/java/org/jsoup/nodes/Entities.java	2025-05-21 03:31:26
+++ ./src/main/java/org/jsoup/nodes/Entities.java	2025-05-21 03:31:26
@@ -42,38 +42,46 @@
         return accum.toString();
     }
 
-    static String unescape(String string) {
-        if (!string.contains("&"))
-            return string;
+    static String unescape(String TransVarStr) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(!TransVarStr.contains("&"))))
+            return TransVarStr;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
+        Matcher TransVarMatcher = unescapePattern.matcher(TransVarStr); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
+        StringBuffer TransVarStrBuffer = new StringBuffer(TransVarStr.length()); // pity matcher can't use stringbuilder, avoid syncs
         // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
-        while (m.find()) {
-            int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+        for (; !(!(TransVarMatcher.find()));) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            int TransVarIntcharval = -1;
+            String TransVarStrchar = TransVarMatcher.group(3);
+            if (!(!(TransVarStrchar != null))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
-                } catch (NumberFormatException e) {
-                } // skip
+                    int TransVarRadix = TransVarMatcher.group(2) != null ? 16 : 10;
+                    TransVarIntcharval = Integer.valueOf(TransVarStrchar, TransVarRadix);
+                } catch (NumberFormatException TransVarEx) {
+                }
             } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                String TransVarStr1 = TransVarMatcher.group(1);
+                if (!(!(full.containsKey(TransVarStr1))))
+                    TransVarIntcharval = full.get(TransVarStr1);
             }
-
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, Matcher.quoteReplacement(c));
+            if (!(!(TransVarIntcharval != -1 || TransVarIntcharval > 0xFFFF))) {
+                String TransVarStr2 = Character.toString((char) TransVarIntcharval);
+                TransVarMatcher.appendReplacement(TransVarStrBuffer, TransVarStr2);
             } else {
-                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string
+                TransVarMatcher.appendReplacement(TransVarStrBuffer, TransVarMatcher.group(0));
             }
         }
-        m.appendTail(accum);
-        return accum.toString();
+        TransVarMatcher.appendTail(TransVarStrBuffer);
+        return TransVarStrBuffer.toString();
     }
 
     // most common, base entities can be unescaped without trailing ;
