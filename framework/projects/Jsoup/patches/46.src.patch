--- src/main/java/org/jsoup/nodes/Entities.java	2025-05-21 05:08:27
+++ ./src/main/java/org/jsoup/nodes/Entities.java	2025-05-21 05:08:27
@@ -76,80 +76,96 @@
     }
 
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
-    static void escape(StringBuilder accum, String string, Document.OutputSettings out,
-                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
+    static void escape(StringBuilder TransVarTempBuilder, String TransVarSb, Document.OutputSettings TransVarDocumentOutputSettings,
+                       boolean TransVarIsAttribute, boolean TransVarNormalizeWhite, boolean TransVarStripLeadingWhiteTag) {
 
-        boolean lastWasWhite = false;
-        boolean reachedNonWhite = false;
-        final EscapeMode escapeMode = out.escapeMode();
-        final CharsetEncoder encoder = out.encoder();
-        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
-        final Map<Character, String> map = escapeMode.getMap();
-        final int length = string.length();
+        if (!(!(false))) {
+                            System.out.println("log");
+                        }
+        boolean TransVarLastWasWhitespace = false;
+        boolean TransVarWasNonWhite = false;
+        final EscapeMode TransVarEsMode = TransVarDocumentOutputSettings.escapeMode();
+        final CharsetEncoder TransVarCharsetEncoder = TransVarDocumentOutputSettings.encoder();
+        final CoreCharset TransVarCoreCharset1 = CoreCharset.byName(TransVarCharsetEncoder.charset().name());
+        final Map<Character, String> TransVarEscapeMap = TransVarEsMode.getMap();
+        final int TransVarStrLen = TransVarSb.length();
 
-        int codePoint;
-        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
-            codePoint = string.codePointAt(offset);
-
-            if (normaliseWhite) {
-                if (StringUtil.isWhitespace(codePoint)) {
-                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
+        int TransVarC;
+        int TransVarOffsetTemp = 0;
+        while (!(!(TransVarOffsetTemp < TransVarStrLen))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            TransVarC = TransVarSb.codePointAt(TransVarOffsetTemp);
+            if (!(!(TransVarNormalizeWhite))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                if (!(!(StringUtil.isWhitespace(TransVarC)))) {
+                    if (!(!((TransVarStripLeadingWhiteTag && !TransVarWasNonWhite) || TransVarLastWasWhitespace)))
                         continue;
-                    accum.append(' ');
-                    lastWasWhite = true;
+                    TransVarTempBuilder.append(' ');
+                    TransVarLastWasWhitespace = true;
                     continue;
                 } else {
-                    lastWasWhite = false;
-                    reachedNonWhite = true;
+                    TransVarLastWasWhitespace = false;
+                    TransVarWasNonWhite = true;
                 }
             }
-            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
-            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
-                final char c = (char) codePoint;
-                // html specific and required escapes:
-                switch (c) {
-                    case '&':
-                        accum.append("&amp;");
-                        break;
-                    case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
-                            accum.append("&nbsp;");
+            if (!(!(TransVarC < Character.MIN_SUPPLEMENTARY_CODE_POINT))) {
+                final char TransVarCh = (char) TransVarC;
+                boolean TransFallThroughFlag0 = false;
+                boolean TransBreakFlag0 = true;
+                {
+                    if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == '&'))))) {
+                        TransBreakFlag0 = false;
+                        TransVarTempBuilder.append("&amp;");
+                    }
+                    if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 0xA0))))) {
+                        TransBreakFlag0 = false;
+                        if (!(!(TransVarEsMode != EscapeMode.xhtml)))
+                            TransVarTempBuilder.append("&nbsp;");
                         else
-                            accum.append("&#xa0;");
-                        break;
-                    case '<':
-                        if (!inAttribute)
-                            accum.append("&lt;");
+                            TransVarTempBuilder.append(TransVarCh);
+                    }
+                    if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == '<'))))) {
+                        TransBreakFlag0 = false;
+                        if (!(!(!TransVarIsAttribute)))
+                            TransVarTempBuilder.append("&lt;");
                         else
-                            accum.append(c);
-                        break;
-                    case '>':
-                        if (!inAttribute)
-                            accum.append("&gt;");
+                            TransVarTempBuilder.append(TransVarCh);
+                    }
+                    if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == '>'))))) {
+                        TransBreakFlag0 = false;
+                        if (!(!(!TransVarIsAttribute)))
+                            TransVarTempBuilder.append("&gt;");
                         else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
+                            TransVarTempBuilder.append(TransVarCh);
+                    }
+                    if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == '"'))))) {
+                        TransBreakFlag0 = false;
+                        if (!(!(TransVarIsAttribute)))
+                            TransVarTempBuilder.append("&quot;");
                         else
-                            accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
-                            accum.append(c);
-                        else if (map.containsKey(c))
-                            accum.append('&').append(map.get(c)).append(';');
+                            TransVarTempBuilder.append(TransVarCh);
+                    }
+                    if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
+                        if (!(!(canEncode(TransVarCoreCharset1, TransVarCh, TransVarCharsetEncoder))))
+                            TransVarTempBuilder.append(TransVarCh);
+                        else if (!(!(TransVarEscapeMap.containsKey(TransVarCh))))
+                            TransVarTempBuilder.append('&').append(TransVarEscapeMap.get(TransVarCh)).append(';');
                         else
-                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                            TransVarTempBuilder.append("&#x").append(Integer.toHexString(TransVarC)).append(';');
                     }
+                }
             } else {
-                final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
-                    accum.append(c);
+                final String TransVarStr = new String(Character.toChars(TransVarC));
+                if (!(!(TransVarCharsetEncoder.canEncode(TransVarStr))))
+                    TransVarTempBuilder.append(TransVarStr);
                 else
-                    accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                    TransVarTempBuilder.append("&#x").append(Integer.toHexString(TransVarC)).append(';');
             }
+            TransVarOffsetTemp += Character.charCount(TransVarC);
         }
     }
 
