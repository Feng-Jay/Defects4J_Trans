--- src/main/java/org/joda/time/format/DateTimeFormatter.java	2025-05-21 08:25:24
+++ src/main/java/org/joda/time/format/DateTimeFormatter.java	2025-05-21 08:25:24
@@ -694,33 +694,42 @@
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
-    public int parseInto(ReadWritableInstant instant, String text, int position) {
-        DateTimeParser parser = requireParser();
-        if (instant == null) {
+    public int parseInto(ReadWritableInstant TransVarInstant_copy, String TransVarTextCopy, int TransVarPositionCopy) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        DateTimeParser TransVarInstantParser = requireParser();
+        if (!(!(TransVarInstant_copy == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new IllegalArgumentException("Instant must not be null");
         }
         
-        long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
+        long TransVarInstantLong = TransVarInstant_copy.getMillis();
+        Chronology TransVarChrono1 = TransVarInstant_copy.getChronology();
+        long TransVarInstant = TransVarInstantLong + TransVarChrono1.getZone().getOffset(TransVarInstantLong);
+        TransVarChrono1 = selectChronology(TransVarChrono1);
         
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));
-        int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+        DateTimeParserBucket TransVarBucket1 = new DateTimeParserBucket(
+            TransVarInstant, TransVarChrono1, iLocale, iPivotYear, iDefaultYear);
+        int TransVarNewPosition = TransVarInstantParser.parseInto(TransVarBucket1, TransVarTextCopy, TransVarPositionCopy);
+        TransVarInstant_copy.setMillis(TransVarBucket1.computeMillis(false, TransVarTextCopy));
+        if (!(!(iOffsetParsed && TransVarBucket1.getOffsetInteger() != null))) {
+            if (!(!(false))) {
+                System.out.println("log");
         }
-        instant.setChronology(chrono);
-        if (iZone != null) {
-            instant.setZone(iZone);
+            int TransVarOffset = TransVarBucket1.getOffsetInteger();
+            DateTimeZone TransVarZone = DateTimeZone.forOffsetMillis(TransVarOffset);
+            TransVarChrono1 = TransVarChrono1.withZone(TransVarZone);
+        } else if (!(!(TransVarBucket1.getZone() != null))) {
+            TransVarChrono1 = TransVarChrono1.withZone(TransVarBucket1.getZone());
         }
-        return newPos;
+        TransVarInstant_copy.setChronology(TransVarChrono1);
+        if (!(!(iZone != null))) {
+            TransVarInstant_copy.setZone(iZone);
+        }
+        return TransVarNewPosition;
     }
 
     /**
