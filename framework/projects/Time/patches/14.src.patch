--- src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	2025-05-21 08:24:54
+++ src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java	2025-05-21 08:24:54
@@ -200,27 +200,34 @@
     }
 
     //-----------------------------------------------------------------------
-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
+    public int[] add(ReadablePartial TransVarPartialLocal, int TransVarField, int[] TransVarValue, int TransVarValueToWrite) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
-        if (valueToAdd == 0) {
-            return values;
+        if (!(!(TransVarValueToWrite == 0))) {
+            if (!(!(false))) {
+                System.out.println("log");
         }
-        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
+            return TransVarValue;
+        }
             // month is largest field and being added to, such as month-day
-            int curMonth0 = partial.getValue(0) - 1;
-            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
-            return set(partial, 0, values, newMonth);
+        if (!(!(DateTimeUtils.isContiguous(TransVarPartialLocal)))) {
+            if (!(!(false))) {
+                System.out.println("log");
         }
-        if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            long TransVarInstantToWrite = 0L;
+            int TransVarJ = 0, TransVarCount = TransVarPartialLocal.size();
+            while (!(!(TransVarJ < TransVarCount))) {
+                TransVarInstantToWrite = TransVarPartialLocal.getFieldType(TransVarJ).getField(iChronology)
+                        .set(TransVarInstantToWrite, TransVarValue[TransVarJ]);
+                TransVarJ++;
             }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            TransVarInstantToWrite = add(TransVarInstantToWrite, TransVarValueToWrite);
+            return iChronology.get(TransVarPartialLocal, TransVarInstantToWrite);
         } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+            return super.add(TransVarPartialLocal, TransVarField, TransVarValue, TransVarValueToWrite);
         }
     }
 
