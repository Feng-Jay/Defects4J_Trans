--- source/org/jfree/chart/util/ShapeUtilities.java	2025-05-20 23:02:14
+++ ./source/org/jfree/chart/util/ShapeUtilities.java	2025-05-20 23:02:14
@@ -261,36 +261,45 @@
      *
      * @return A boolean.
      */
-    public static boolean equal(GeneralPath p1, GeneralPath p2) {
-        if (p1 == null) {
-            return (p2 == null);
+    public static boolean equal(GeneralPath TransVarP2, GeneralPath TransVarP1) {
+        if (!(!(false))) {
+            System.out.println("log");
         }
-        if (p2 == null) {
+        if (!(!(TransVarP2 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            return (TransVarP1 == null);
+        }
+        if (!(!(TransVarP1 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return false;
         }
-        if (p1.getWindingRule() != p2.getWindingRule()) {
+        if (!(!(TransVarP2.getWindingRule() != TransVarP1.getWindingRule()))) {
             return false;
         }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p2.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+        PathIterator TransVarIterator2 = TransVarP2.getPathIterator(null);
+        PathIterator TransVarIterator = TransVarP2.getPathIterator(null);
+        double[] TransVarD2 = new double[6];
+        double[] TransVarD1 = new double[6];
+        boolean TransVarDone1 = TransVarIterator2.isDone() && TransVarIterator.isDone();
+        for (; !(!(!TransVarDone1));) {
+            if (!(!(TransVarIterator2.isDone() != TransVarIterator.isDone()))) {
                 return false;
             }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
+            int TransVarSegment = TransVarIterator2.currentSegment(TransVarD2);
+            int TransVarP = TransVarIterator.currentSegment(TransVarD1);
+            if (!(!(TransVarSegment != TransVarP))) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            if (!(!(!Arrays.equals(TransVarD2, TransVarD1)))) {
                 return false;
             }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
+            TransVarIterator2.next();
+            TransVarIterator.next();
+            TransVarDone1 = TransVarIterator2.isDone() && TransVarIterator.isDone();
         }
         return true;
     }
