--- src/java/org/apache/commons/lang/time/DateUtils.java	2025-05-21 08:13:33
+++ src/java/org/apache/commons/lang/time/DateUtils.java	2025-05-21 08:13:33
@@ -616,14 +616,17 @@
      * @param round  true to round, false to truncate
      * @throws ArithmeticException if the year is over 280 million
      */
-    private static void modify(Calendar val, int field, boolean round) {
-        if (val.get(Calendar.YEAR) > 280000000) {
+    private static void modify(Calendar TransVarCal, int TransVarCalField, boolean TransVarIsRound) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarCal.get(Calendar.YEAR) > 280000000))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
-        if (field == Calendar.MILLISECOND) {
-            return;
-        }
 
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
@@ -631,114 +634,78 @@
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
 
-        Date date = val.getTime();
-        long time = date.getTime();
-        boolean done = false;
 
         // truncate milliseconds
-        int millisecs = val.get(Calendar.MILLISECOND);
-        if (!round || millisecs < 500) {
-            time = time - millisecs;
-            if (field == Calendar.SECOND) {
-                done = true;
-            }
-        }
 
         // truncate seconds
-        int seconds = val.get(Calendar.SECOND);
-        if (!done && (!round || seconds < 30)) {
-            time = time - (seconds * 1000L);
-            if (field == Calendar.MINUTE) {
-                done = true;
-            }
-        }
 
         // truncate minutes
-        int minutes = val.get(Calendar.MINUTE);
-        if (!done && (!round || minutes < 30)) {
-            time = time - (minutes * 60000L);
-        }
 
         // reset time
-        if (date.getTime() != time) {
-            date.setTime(time);
-            val.setTime(date);
-        }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
-        boolean roundUp = false;
-        for (int i = 0; i < fields.length; i++) {
-            for (int j = 0; j < fields[i].length; j++) {
-                if (fields[i][j] == field) {
-                    //This is our field... we stop looping
-                    if (round && roundUp) {
-                        if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
-                            if (val.get(Calendar.DATE) == 1) {
-                                val.add(Calendar.DATE, 15);
+        boolean TransVarRound = false;
+        int TransVarIndex = 0;
+        while (!(!(TransVarIndex < fields.length))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            int TransVarI = 0;
+            while (!(!(TransVarI < fields[TransVarIndex].length))) {
+                if (!(!(fields[TransVarIndex][TransVarI] == TransVarCalField))) {
+                    if (!(!(TransVarIsRound && TransVarRound))) {
+                        if (!(!(TransVarCalField == DateUtils.SEMI_MONTH))) {
+                            if (!(!(TransVarCal.get(Calendar.DATE) == 1))) {
+                                TransVarCal.add(Calendar.DATE, 15);
                             } else {
-                                val.add(Calendar.DATE, -15);
-                                val.add(Calendar.MONTH, 1);
+                                TransVarCal.add(Calendar.DATE, -15);
+                                TransVarCal.add(Calendar.MONTH, 1);
                             }
                         } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                            TransVarCal.add(fields[TransVarIndex][0], 1);
                         }
                     }
                     return;
                 }
+                TransVarI++;
             }
-            //We have various fields that are not easy roundings
-            int offset = 0;
-            boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
-            switch (field) {
-                case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
-                        offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
-                        if (offset >= 15) {
-                            offset -= 15;
+            int TransVarOff = 0;
+            boolean TransVarOffSet = false;
+            boolean TransFallThroughFlag0 = false;
+            boolean TransBreakFlag0 = true;
+            {
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCalField == DateUtils.SEMI_MONTH))))) {
+                    TransBreakFlag0 = false;
+                    if (!(!(fields[TransVarIndex][0] == Calendar.DATE))) {
+                        TransVarOff = TransVarCal.get(Calendar.DATE) - 1;
+                        if (!(!(TransVarOff >= 15))) {
+                            TransVarOff -= 15;
                         }
-                        //Record whether we're in the top or bottom half of that range
-                        roundUp = offset > 7;
-                        offsetSet = true;
+                        TransVarRound = TransVarOff > 7;
+                        TransVarOffSet = true;
                     }
-                    break;
-                case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
-                        offset = val.get(Calendar.HOUR_OF_DAY);
-                        if (offset >= 12) {
-                            offset -= 12;
                         }
-                        roundUp = offset > 6;
-                        offsetSet = true;
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCalField == Calendar.AM_PM))))) {
+                    if (!(!(fields[TransVarIndex][0] == Calendar.HOUR_OF_DAY))) {
+                        TransVarOff = TransVarCal.get(Calendar.HOUR_OF_DAY);
+                        if (!(!(TransVarOff >= 12))) {
+                            TransVarOff -= 12;
                     }
-                    break;
+                        TransVarRound = TransVarOff > 6;
+                        TransVarOffSet = true;
             }
-            if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
-                roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
-            if (offset != 0) {
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
+            if (!(!(!TransVarOffSet))) {
+                int TransVarCalMax = TransVarCal.getActualMinimum(fields[TransVarIndex][0]);
+                int TransVarMax2 = TransVarCal.getActualMaximum(fields[TransVarIndex][0]);
+                TransVarOff = TransVarCal.get(fields[TransVarIndex][0]) - TransVarCalMax;
+                TransVarRound = TransVarOff > ((TransVarMax2 - TransVarCalMax) / 2);
         }
-        throw new IllegalArgumentException("The field " + field + " is not supported");
+            TransVarCal.set(fields[TransVarIndex][0], TransVarCal.get(fields[TransVarIndex][0]) - TransVarOff);
+            TransVarIndex++;
+        }
+        throw new IllegalArgumentException("The field " + TransVarCalField + " is not supported");
 
     }
 
