--- src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2025-05-21 08:16:30
+++ src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2025-05-21 08:16:30
@@ -441,153 +441,166 @@
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(String str) throws NumberFormatException {
-        if (str == null) {
+    public static Number createNumber(String TransVarStr2) throws NumberFormatException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarStr2 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        if (!(!(StringUtils.isBlank(TransVarStr2)))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new NumberFormatException("A blank string is not a valid number");
         }  
-        if (str.startsWith("--")) {
+        if (!(!(TransVarStr2.startsWith("--")))) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear 
             // to be in specification of class. OS X Java parses it to 
             // a wrong value.
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
-            return createInteger(str);
+        if (!(!(TransVarStr2.startsWith("0x") || TransVarStr2.startsWith("-0x")))) {
+            return createInteger(TransVarStr2);
         }   
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        char TransVarLast = TransVarStr2.charAt(TransVarStr2.length() - 1);
+        String TransVarFirst;
+        String TransVarDeci;
+        String TransVarEx;
+        int TransVarIndex = TransVarStr2.indexOf('.');
+        int TransVarExpPos1 = TransVarStr2.indexOf('e') + TransVarStr2.indexOf('E') + 1;
 
-        if (decPos > -1) {
+        if (!(!(TransVarIndex > -1))) {
 
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
+            if (!(!(TransVarExpPos1 > -1))) {
+                if (!(!(TransVarExpPos1 < TransVarIndex || TransVarExpPos1 > TransVarStr2.length()))) {
+                    throw new NumberFormatException(TransVarStr2 + " is not a valid number.");
                 }
-                dec = str.substring(decPos + 1, expPos);
+                TransVarDeci = TransVarStr2.substring(TransVarIndex + 1, TransVarExpPos1);
             } else {
-                dec = str.substring(decPos + 1);
+                TransVarDeci = TransVarStr2.substring(TransVarIndex + 1);
             }
-            mant = str.substring(0, decPos);
+            TransVarFirst = TransVarStr2.substring(0, TransVarIndex);
         } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
+            if (!(!(TransVarExpPos1 > -1))) {
+                if (!(!(TransVarExpPos1 > TransVarStr2.length()))) {
+                    throw new NumberFormatException(TransVarStr2 + " is not a valid number.");
                 }
-                mant = str.substring(0, expPos);
+                TransVarFirst = TransVarStr2.substring(0, TransVarExpPos1);
             } else {
-                mant = str;
+                TransVarFirst = TransVarStr2;
             }
-            dec = null;
+            TransVarDeci = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+        if (!(!(!Character.isDigit(TransVarLast) && TransVarLast != '.'))) {
+            if (!(!(TransVarExpPos1 > -1 && TransVarExpPos1 < TransVarStr2.length() - 1))) {
+                TransVarEx = TransVarStr2.substring(TransVarExpPos1 + 1, TransVarStr2.length() - 1);
             } else {
-                exp = null;
+                TransVarEx = null;
             }
             //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+            String TransVarNumericString = TransVarStr2.substring(0, TransVarStr2.length() - 1);
+            boolean TransVarAllZero = isAllZeros(TransVarFirst) && isAllZeros(TransVarEx);
+            boolean TransFallThroughFlag0 = false;
+            boolean TransBreakFlag0 = true;
+            {
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarLast == 'l'))))) {
+                    TransFallThroughFlag0 = true;
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarLast == 'L'))))) {
+                    TransFallThroughFlag0 = true;
+                    if (!(!(TransVarDeci == null && TransVarEx == null
+                            && (TransVarNumericString.charAt(0) == '-' && isDigits(TransVarNumericString.substring(1))
+                                    || isDigits(TransVarNumericString))))) {
                         try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            return createLong(TransVarNumericString);
+                        } catch (NumberFormatException TransVarNfe1) {
                         }
-                        return createBigInteger(numeric);
-
+                        return createBigInteger(TransVarNumericString);
                     }
-                    throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+                    throw new NumberFormatException(TransVarStr2 + " is not a valid number.");
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarLast == 'f'))))) {
+                    TransFallThroughFlag0 = true;
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarLast == 'F'))))) {
+                    TransFallThroughFlag0 = true;
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                        Float TransVarF1 = NumberUtils.createFloat(TransVarNumericString);
+                        if (!(!(!(TransVarF1.isInfinite() || (TransVarF1.floatValue() == 0.0F && !TransVarAllZero))))) {
+                            return TransVarF1;
                         }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException TransVarNfe2) {
                     }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarLast == 'd'))))) {
+                    TransFallThroughFlag0 = true;
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarLast == 'D'))))) {
+                    TransFallThroughFlag0 = true;
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+                        Double TransVarDbl = NumberUtils.createDouble(TransVarNumericString);
+                        if (!(!(!(TransVarDbl.isInfinite() || (TransVarDbl.floatValue() == 0.0D && !TransVarAllZero))))) {
+                            return TransVarDbl;
                         }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException TransVarNfe3) {
                     }
                     try {
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        return createBigDecimal(TransVarNumericString);
+                    } catch (NumberFormatException TransVarNfe) {
                     }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
-
                 }
+                if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
+                    throw new NumberFormatException(TransVarStr2 + " is not a valid number.");
+                }
+            }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+            if (!(!(TransVarExpPos1 > -1 && TransVarExpPos1 < TransVarStr2.length() - 1))) {
+                TransVarEx = TransVarStr2.substring(TransVarExpPos1 + 1, TransVarStr2.length());
             } else {
-                exp = null;
+                TransVarEx = null;
             }
-            if (dec == null && exp == null) {
+            if (!(!(TransVarDeci == null && TransVarEx == null))) {
                 //Must be an int,long,bigint
                 try {
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
+                    return createInteger(TransVarStr2);
+                } catch (NumberFormatException TransVarNfe5) { // NOPMD
                     // ignore the bad number
                 }
                 try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
+                    return createLong(TransVarStr2);
+                } catch (NumberFormatException TransVarNfe6) { // NOPMD
                     // ignore the bad number
                 }
-                return createBigInteger(str);
+                return createBigInteger(TransVarStr2);
 
             } else {
                 //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                boolean TransVarAllZeros1 = isAllZeros(TransVarFirst) && isAllZeros(TransVarEx);
                 try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
+                    Float TransVarFloat1 = createFloat(TransVarStr2);
+                    if (!(!(!(TransVarFloat1.isInfinite() || (TransVarFloat1.floatValue() == 0.0F && !TransVarAllZeros1))))) {
+                        return TransVarFloat1;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
+                } catch (NumberFormatException TransVarNfe4) { // NOPMD
                     // ignore the bad number
                 }
                 try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                        return d;
+                    Double TransVarNumber = createDouble(TransVarStr2);
+                    if (!(!(!(TransVarNumber.isInfinite() || (TransVarNumber.doubleValue() == 0.0D && !TransVarAllZeros1))))) {
+                        return TransVarNumber;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
+                } catch (NumberFormatException TransVarNumberFormatException) { // NOPMD
                     // ignore the bad number
                 }
 
-                return createBigDecimal(str);
+                return createBigDecimal(TransVarStr2);
 
             }
         }
