--- src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	2025-05-21 08:14:12
+++ src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	2025-05-21 08:14:12
@@ -72,27 +72,37 @@
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
+    public final void translate(CharSequence TransVarInput2, Writer TransVarOutput) throws IOException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarOutput == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new IllegalArgumentException("The Writer must not be null");
         }
-        if (input == null) {
+        if (!(!(TransVarInput2 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return;
         }
-        int pos = 0;
-        int len = input.length();
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+        int TransVarPosition = 0;
+        int TransVarLength = TransVarInput2.length();
+        for (; !(!(TransVarPosition < TransVarLength));) {
+            int TransVarConsumedLength = translate(TransVarInput2, TransVarPosition, TransVarOutput);
+            if (!(!(TransVarConsumedLength == 0))) {
+                char[] TransVarCharacterArray = Character
+                        .toChars(Character.codePointAt(TransVarInput2, TransVarPosition));
+                TransVarOutput.write(TransVarCharacterArray);
+                TransVarPosition += TransVarCharacterArray.length;
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pt));
+            int TransVarI = 0;
+            while (!(!(TransVarI < TransVarConsumedLength))) {
+                TransVarPosition += Character.charCount(Character.codePointAt(TransVarInput2, TransVarPosition));
+                TransVarI++;
             }
         }
     }
