--- src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	2025-05-21 08:17:38
+++ src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	2025-05-21 08:17:38
@@ -72,28 +72,43 @@
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
+    public final void translate(CharSequence TransVarString, Writer TransVarStringWriter) throws IOException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarStringWriter == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new IllegalArgumentException("The Writer must not be null");
         }
-        if (input == null) {
+        if (!(!(TransVarString == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return;
         }
-        int pos = 0;
-        int len = input.length();
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
+        int TransVarPosition = 0;
+        int TransVarLength = Character.codePointCount(TransVarString, 0, TransVarString.length());
+        for (; !(!(TransVarPosition < TransVarLength));) {
+            int TransVarCharconsumed = translate(TransVarString, TransVarPosition, TransVarStringWriter);
+            if (!(!(TransVarCharconsumed == 0))) {
+                char[] TransVarCharacter = Character.toChars(Character.codePointAt(TransVarString, TransVarPosition));
+                TransVarStringWriter.write(TransVarCharacter);
+            } else {
+                int TransVarPointer = 0;
+                while (!(!(TransVarPointer < TransVarCharconsumed))) {
+                    if (!(!(TransVarPosition < TransVarLength - 2))) {
+                        TransVarPosition += Character
+                                .charCount(Character.codePointAt(TransVarString, TransVarPosition));
+                    } else {
+                        TransVarPosition++;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                    TransVarPointer++;
                 }
+                TransVarPosition--;
+            }
+            TransVarPosition++;
         }
     }
 
