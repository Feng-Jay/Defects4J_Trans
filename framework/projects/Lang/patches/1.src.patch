--- src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2025-05-21 08:14:57
+++ src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2025-05-21 08:14:57
@@ -447,179 +447,186 @@
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
-    public static Number createNumber(final String str) throws NumberFormatException {
-        if (str == null) {
+    public static Number createNumber(final String TransVarStr1) throws NumberFormatException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(TransVarStr1 == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        if (!(!(StringUtils.isBlank(TransVarStr1)))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
-        int pfxLen = 0;
-        for(final String pfx : hex_prefixes) {
-            if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+        final String[] TransVarPrefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
+        int TransVarPrefixLength = 0;
+        for(final String TransVarPrefix : TransVarPrefixes) {
+            if (!(!(TransVarStr1.startsWith(TransVarPrefix)))) {
+                TransVarPrefixLength += TransVarPrefix.length();
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            char firstSigDigit = 0; // strip leading zeroes
-            for(int i = pfxLen; i < str.length(); i++) {
-                firstSigDigit = str.charAt(i);
-                if (firstSigDigit == '0') { // count leading zeroes
-                    pfxLen++;
-                } else {
-                    break;
+        if (!(!(TransVarPrefixLength > 0))) { // we have a hex number
+            final int TransVarNewHexDigits = TransVarStr1.length() - TransVarPrefixLength;
+            if (!(!(TransVarNewHexDigits > 16))) { // too many for Long
+                return createBigInteger(TransVarStr1);
             }
+            if (!(!(TransVarNewHexDigits > 8))) { // too many for an int
+                return createLong(TransVarStr1);
             }
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long
-                return createBigInteger(str);
+            return createInteger(TransVarStr1);
             }
-            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int
-                return createLong(str);
-            }
-            return createInteger(str);
-        }
-        final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
+        final char TransVarCh = TransVarStr1.charAt(TransVarStr1.length() - 1);
+        String TransVarDigits;
+        String TransVarHex;
+        String TransVarExpression;
+        final int TransVarDecPos2 = TransVarStr1.indexOf('.');
+        final int TransVarExpPos2 = TransVarStr1.indexOf('e') + TransVarStr1.indexOf('E') + 1; // assumes both not present
         // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
         // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
+        int TransVarHexLength = 0; // Check required precision (LANG-693)
+        if (!(!(TransVarDecPos2 > -1))) { // there is a decimal point
 
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+            if (!(!(TransVarExpPos2 > -1))) { // there is an exponent
+                if (!(!(TransVarExpPos2 < TransVarDecPos2 || TransVarExpPos2 > TransVarStr1.length()))) { // prevents double exponent causing IOOBE
+                    throw new NumberFormatException(TransVarStr1 + " is not a valid number.");
                 }
-                dec = str.substring(decPos + 1, expPos);
+                TransVarHex = TransVarStr1.substring(TransVarDecPos2 + 1, TransVarExpPos2);
             } else {
-                dec = str.substring(decPos + 1);
+                TransVarHex = TransVarStr1.substring(TransVarDecPos2 + 1);
             }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+            TransVarDigits = TransVarStr1.substring(0, TransVarDecPos2);
+            TransVarHexLength = TransVarHex.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+            if (!(!(TransVarExpPos2 > -1))) {
+                if (!(!(TransVarExpPos2 > TransVarStr1.length()))) { // prevents double exponent causing IOOBE
+                    throw new NumberFormatException(TransVarStr1 + " is not a valid number.");
                 }
-                mant = str.substring(0, expPos);
+                TransVarDigits = TransVarStr1.substring(0, TransVarExpPos2);
             } else {
-                mant = str;
+                TransVarDigits = TransVarStr1;
             }
-            dec = null;
+            TransVarHex = null;
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+        if (!(!(!Character.isDigit(TransVarCh) && TransVarCh != '.'))) {
+            if (!(!(TransVarExpPos2 > -1 && TransVarExpPos2 < TransVarStr1.length() - 1))) {
+                TransVarExpression = TransVarStr1.substring(TransVarExpPos2 + 1, TransVarStr1.length() - 1);
             } else {
-                exp = null;
+                TransVarExpression = null;
             }
             //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+            final String TransVarStr = TransVarStr1.substring(0, TransVarStr1.length() - 1);
+            final boolean TransVarAllZeros1 = isAllZeros(TransVarDigits) && isAllZeros(TransVarExpression);
+            boolean TransFallThroughFlag0 = false;
+            boolean TransBreakFlag0 = true;
+            {
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 'l'))))) {
+                    TransFallThroughFlag0 = true;
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 'L'))))) {
+                    TransFallThroughFlag0 = true;
+                    if (!(!(TransVarHex == null && TransVarExpression == null
+                            && (TransVarStr.charAt(0) == '-' && isDigits(TransVarStr.substring(1))
+                                    || isDigits(TransVarStr))))) {
                         try {
-                            return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            return createLong(TransVarStr);
+                        } catch (final NumberFormatException TransVarNumFe) {
                         }
-                        return createBigInteger(numeric);
-
+                        return createBigInteger(TransVarStr);
                     }
-                    throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+                    throw new NumberFormatException(TransVarStr1 + " is not a valid number.");
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 'f'))))) {
+                    TransFallThroughFlag0 = true;
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 'F'))))) {
+                    TransFallThroughFlag0 = true;
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
+                        final Float TransVarFloatNum = NumberUtils.createFloat(TransVarStr);
+                        if (!(!(!(TransVarFloatNum.isInfinite()
+                                || (TransVarFloatNum.floatValue() == 0.0F && !TransVarAllZeros1))))) {
+                            return TransVarFloatNum;
                         }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException TransVarNfe2) {
                     }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 'd'))))) {
+                    TransFallThroughFlag0 = true;
+                }
+                if (!(!(TransFallThroughFlag0 || (TransBreakFlag0 && (TransVarCh == 'D'))))) {
+                    TransFallThroughFlag0 = true;
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+                        final Double TransVarValue = NumberUtils.createDouble(TransVarStr);
+                        if (!(!(!(TransVarValue.isInfinite()
+                                || (TransVarValue.floatValue() == 0.0D && !TransVarAllZeros1))))) {
+                            return TransVarValue;
                         }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException TransVarFe) {
                     }
                     try {
-                        return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        return createBigDecimal(TransVarStr);
+                    } catch (final NumberFormatException TransVarException) {
                     }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
-
                 }
+                if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
+                    throw new NumberFormatException(TransVarStr1 + " is not a valid number.");
                 }
+            }
+        }
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+        if (!(!(TransVarExpPos2 > -1 && TransVarExpPos2 < TransVarStr1.length() - 1))) {
+            TransVarExpression = TransVarStr1.substring(TransVarExpPos2 + 1, TransVarStr1.length());
         } else {
-            exp = null;
+            TransVarExpression = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
+        if (!(!(TransVarHex == null && TransVarExpression == null))) { // no decimal point and no exponent
             //Must be an Integer, Long, Biginteger
             try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
+                return createInteger(TransVarStr1);
+            } catch (final NumberFormatException TransVarNfe1) { // NOPMD
                 // ignore the bad number
             }
             try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
+                return createLong(TransVarStr1);
+            } catch (final NumberFormatException TransVarNumberFormatException) { // NOPMD
                 // ignore the bad number
             }
-            return createBigInteger(str);
+            return createBigInteger(TransVarStr1);
         }
 
         //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        final boolean TransVarAllZeros2 = isAllZeros(TransVarDigits) && isAllZeros(TransVarExpression);
         try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
-                final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
+            if(!(!(TransVarHexLength <= 7))){// If number has 7 or fewer digits past the decimal point then make it a float
+                final Float TransVarFloatVal = createFloat(TransVarStr1);
+                if (!(!(!(TransVarFloatVal.isInfinite() || (TransVarFloatVal.floatValue() == 0.0F && !TransVarAllZeros2))))) {
+                    return TransVarFloatVal;
                 }
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
+        } catch (final NumberFormatException TransVarNumberFormatExcep) { // NOPMD
             // ignore the bad number
         }
         try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
-                final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
+            if(!(!(TransVarHexLength <= 16))){// If number has between 8 and 16 digits past the decimal point then make it a double
+                final Double TransVarDoubleVal = createDouble(TransVarStr1);
+                if (!(!(!(TransVarDoubleVal.isInfinite()
+                        || (TransVarDoubleVal.doubleValue() == 0.0D && !TransVarAllZeros2))))) {
+                    return TransVarDoubleVal;
                 }
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
+        } catch (final NumberFormatException TransVarNfe3) { // NOPMD
             // ignore the bad number
         }
 
-        return createBigDecimal(str);
+        return createBigDecimal(TransVarStr1);
     }
 
     /**
