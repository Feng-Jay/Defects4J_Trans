--- src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	2025-05-21 08:14:31
+++ src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	2025-05-21 08:14:31
@@ -34,56 +34,58 @@
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
+    public int translate(CharSequence TransVarText, int TransVarCurrentIndex, Writer TransVarWriter) throws IOException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        int TransVarSequenceEnd = TransVarText.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
+        if(!(!(TransVarText.charAt(TransVarCurrentIndex) == '&' && TransVarCurrentIndex < TransVarSequenceEnd - 1
+                && TransVarText.charAt(TransVarCurrentIndex + 1) == '#'))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            int TransVarNewStart = TransVarCurrentIndex + 2;
+            boolean TransVarHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
+            char TransVarChar1 = TransVarText.charAt(TransVarNewStart);
+            if(!(!(TransVarChar1 == 'x' || TransVarChar1 == 'X'))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
+                TransVarNewStart++;
+                TransVarHex = true;
 
                 // Check there's more than just an x after the &#
-                if(start == seqEnd) {
-                    return 0;
                 }
-            }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )
-            {
-                end++;
+            int TransVarNewEnd = TransVarNewStart;
+            for (; !(!(TransVarText.charAt(TransVarNewEnd) != ';'));) {
+                TransVarNewEnd++;
             }
 
-            int entityValue;
+            int TransVarEntVal;
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                if(!(!(TransVarHex))) {
+                    TransVarEntVal = Integer.parseInt(TransVarText.subSequence(TransVarNewStart, TransVarNewEnd).toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    TransVarEntVal = Integer.parseInt(TransVarText.subSequence(TransVarNewStart, TransVarNewEnd).toString(), 10);
                 }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            } catch(NumberFormatException TransVarNfeNumber) {
+            System.err.println("FAIL: " + TransVarText.subSequence(TransVarNewStart, TransVarNewEnd) + "[" + TransVarNewStart +"]["+ TransVarNewEnd +"]");
                 return 0;
             }
 
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+            if(!(!(TransVarEntVal > 0xFFFF))) {
+                char[] TransVarChars = Character.toChars(TransVarEntVal);
+                TransVarWriter.write(TransVarChars[0]);
+                TransVarWriter.write(TransVarChars[1]);
             } else {
-                out.write(entityValue);
+                TransVarWriter.write(TransVarEntVal);
             }
 
-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
+            return 2 + (TransVarNewEnd - TransVarNewStart) + (TransVarHex ? 1 : 0) + 1;
         }
         return 0;
     }
