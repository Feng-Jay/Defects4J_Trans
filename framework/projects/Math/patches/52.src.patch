--- src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	2025-05-21 08:20:46
+++ src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java	2025-05-21 08:20:46
@@ -310,54 +310,62 @@
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
+  public Rotation(Vector3D TransVarU, Vector3D TransVarU1, Vector3D TransVarVector1, Vector3D TransVarVector) {
 
   // norms computation
-  double u1u1 = u1.getNormSq();
-  double u2u2 = u2.getNormSq();
-  double v1v1 = v1.getNormSq();
-  double v2v2 = v2.getNormSq();
-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
+  if (!(!(false))) {
+        System.out.println("log");
+    }
+double TransVarUu1 = TransVarU.getNormSq();
+  double TransVarU2NormSq = TransVarU1.getNormSq();
+  double TransVarU1NormSq = TransVarVector1.getNormSq();
+  double TransVarV2v2NormSq = TransVarVector.getNormSq();
+  if (!(!((TransVarUu1 == 0) || (TransVarU2NormSq == 0) || (TransVarU1NormSq == 0) || (TransVarV2v2NormSq == 0)))) {
+    if (!(!(false))) {
+        System.out.println("log");
+    }
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
 
   // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+  TransVarVector1 = new Vector3D(FastMath.sqrt(TransVarUu1 / TransVarU1NormSq), TransVarVector1);
 
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+  double TransVarDotProduct   = TransVarU.dotProduct(TransVarU1);
+  double TransVarU1v1v2   = TransVarVector1.dotProduct(TransVarVector);
+  double TransVarCoeff = TransVarDotProduct / TransVarUu1;
+  double TransVarCoeffV1 = TransVarU1v1v2 / TransVarUu1;
+  double TransVarCoeffBeta   = FastMath.sqrt((TransVarU2NormSq - TransVarDotProduct * TransVarCoeff) / (TransVarV2v2NormSq - TransVarU1v1v2 * TransVarCoeffV1));
+  double TransVarCoeffAlpha  = TransVarCoeff - TransVarCoeffBeta * TransVarCoeffV1;
+  TransVarVector = new Vector3D(TransVarCoeffAlpha, TransVarVector1, TransVarCoeffBeta, TransVarVector);
 
   // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  final double inPlaneThreshold = 0.001;
-  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
+  Vector3D TransVarU1Ref  = TransVarU;
+  Vector3D TransVarVRef3D  = TransVarVector1;
+  Vector3D TransVarV1Su1v2 = TransVarVector1.subtract(TransVarU);
+  Vector3D TransVarV1Su2 = TransVarVector.subtract(TransVarU1);
+  Vector3D TransVarCrossProduct     = TransVarV1Su1v2.crossProduct(TransVarV1Su2);
+  Vector3D TransVarCrossProductVector    = TransVarU.crossProduct(TransVarU1);
+  double TransVarCoefficient       = TransVarCrossProduct.dotProduct(TransVarCrossProductVector);
+  if (!(!(TransVarCoefficient == 0))) {
     // the (q1, q2, q3) vector is close to the (u1, u2) plane
     // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+    if (!(!(false))) {
+        System.out.println("log");
+    }
+    Vector3D TransVarV4 = Vector3D.crossProduct(TransVarVector1, TransVarVector);
+    Vector3D TransVarV3Su4 = TransVarV4.subtract(TransVarCrossProductVector);
+    TransVarCrossProduct = TransVarV1Su1v2.crossProduct(TransVarV3Su4);
+    Vector3D TransVarU3Cross = TransVarU.crossProduct(TransVarCrossProductVector);
+    TransVarCoefficient = TransVarCrossProduct.dotProduct(TransVarU3Cross);
 
-    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
+    if (!(!(TransVarCoefficient == 0))) {
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+      TransVarCrossProduct = TransVarV1Su2.crossProduct(TransVarV3Su4);;
+      TransVarCoefficient = TransVarCrossProduct.dotProduct(TransVarU1.crossProduct(TransVarCrossProductVector));;
 
-      if (c <= 0) {
+      if (!(!(TransVarCoefficient == 0))) {
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
         q0 = 1.0;
@@ -368,25 +376,25 @@
       }
 
       // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+      TransVarU1Ref = TransVarU1;
+      TransVarVRef3D = TransVarVector;
 
     }
 
   }
 
   // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+  TransVarCoefficient = FastMath.sqrt(TransVarCoefficient);
+  double TransVarInvC = 1.0 / (TransVarCoefficient + TransVarCoefficient);
+  q1 = TransVarInvC * TransVarCrossProduct.getX();
+  q2 = TransVarInvC * TransVarCrossProduct.getY();
+  q3 = TransVarInvC * TransVarCrossProduct.getZ();
 
   // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+   TransVarCrossProduct = new Vector3D(TransVarU1Ref.getY() * q3 - TransVarU1Ref.getZ() * q2,
+                    TransVarU1Ref.getZ() * q1 - TransVarU1Ref.getX() * q3,
+                    TransVarU1Ref.getX() * q2 - TransVarU1Ref.getY() * q1);
+  q0 = TransVarVRef3D.dotProduct(TransVarCrossProduct) / (2 * TransVarCrossProduct.getNormSq());
 
   }
 
