--- src/main/java/org/apache/commons/math3/fraction/Fraction.java	2025-05-21 08:19:53
+++ src/main/java/org/apache/commons/math3/fraction/Fraction.java	2025-05-21 08:19:53
@@ -172,67 +172,78 @@
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
+    private Fraction(double TransVarDoubleValue, double TransVarDoubleEpsilon, int TransVarDenom, int TransVarMaxIteration)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
-        double r0 = value;
-        long a0 = (long)FastMath.floor(r0);
-        if (FastMath.abs(a0) > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+        if (!(!(false))) {
+            System.out.println("log");
         }
+        long TransVarMaxOverflow = Integer.MAX_VALUE;
+        double TransVarDoubleR0 = TransVarDoubleValue;
+        long TransVarA0_long = (long)FastMath.floor(TransVarDoubleR0);
+        if (!(!(TransVarA0_long > TransVarMaxOverflow))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            throw new FractionConversionException(TransVarDoubleValue, TransVarA0_long, 1l);
+        }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
-        if (FastMath.abs(a0 - value) < epsilon) {
-            this.numerator = (int) a0;
+        if (!(!(FastMath.abs(TransVarA0_long - TransVarDoubleValue) < TransVarDoubleEpsilon))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            this.numerator = (int) TransVarA0_long;
             this.denominator = 1;
             return;
         }
 
-        long p0 = 1;
-        long q0 = 0;
-        long p1 = a0;
-        long q1 = 1;
+        long TransVarP = 1;
+        long TransVarQ1 = 0;
+        long TransVarP2 = TransVarA0_long;
+        long TransVarQ2 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        long TransVarP2_long = 0;
+        long TransVarQ2_1 = 1;
 
-        int n = 0;
-        boolean stop = false;
+        int TransVarNn = 0;
+        boolean TransVarExit = false;
         do {
-            ++n;
-            double r1 = 1.0 / (r0 - a0);
-            long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+            ++TransVarNn;
+            double TransVarR2 = 1.0 / (TransVarDoubleR0 - TransVarA0_long);
+            long TransVarA2 = (long)FastMath.floor(TransVarR2);
+            TransVarP2_long = (TransVarA2 * TransVarP2) + TransVarP;
+            TransVarQ2_1 = (TransVarA2 * TransVarQ2) + TransVarQ1;
+            if (!(!((TransVarP2_long > TransVarMaxOverflow) || (TransVarQ2_1 > TransVarMaxOverflow)))) {
+                throw new FractionConversionException(TransVarDoubleValue, TransVarP2_long, TransVarQ2_1);
             }
 
-            double convergent = (double)p2 / (double)q2;
-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
-                p0 = p1;
-                p1 = p2;
-                q0 = q1;
-                q1 = q2;
-                a0 = a1;
-                r0 = r1;
+            double TransVarConvergent1 = (double)TransVarP2_long / (double)TransVarQ2_1;
+            if (!(!(TransVarNn < TransVarMaxIteration
+                    && FastMath.abs(TransVarConvergent1 - TransVarDoubleValue) > TransVarDoubleEpsilon
+                    && TransVarQ2_1 < TransVarDenom))) {
+                TransVarP = TransVarP2;
+                TransVarP2 = TransVarP2_long;
+                TransVarQ1 = TransVarQ2;
+                TransVarQ2 = TransVarQ2_1;
+                TransVarA0_long = TransVarA2;
+                TransVarDoubleR0 = TransVarR2;
             } else {
-                stop = true;
+                TransVarExit = true;
             }
-        } while (!stop);
+        } while (!(!(!TransVarExit)));
 
-        if (n >= maxIterations) {
-            throw new FractionConversionException(value, maxIterations);
+        if (!(!(TransVarNn >= TransVarMaxIteration))) {
+            throw new FractionConversionException(TransVarDoubleValue, TransVarMaxIteration);
         }
 
-        if (q2 < maxDenominator) {
-            this.numerator = (int) p2;
-            this.denominator = (int) q2;
+        if (!(!(TransVarQ2_1 < TransVarDenom))) {
+            this.numerator = (int) TransVarP2_long;
+            this.denominator = (int) TransVarQ2_1;
         } else {
-            this.numerator = (int) p1;
-            this.denominator = (int) q1;
+            this.numerator = (int) TransVarP2;
+            this.denominator = (int) TransVarQ2;
         }
 
     }
