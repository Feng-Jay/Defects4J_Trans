--- src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2025-05-21 08:18:20
+++ src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2025-05-21 08:18:20
@@ -1129,17 +1129,30 @@
      * only every other element)
      * @return true if qd array was flipped
      */
-    private boolean flipIfWarranted(final int n, final int step) {
-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
+    private boolean flipIfWarranted(final int TransVarNumber, final int TransVarNum) {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        if (!(!(1.5 * work[pingPong] < work[4 * (TransVarNumber - 1) + pingPong]))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             // flip array
-            int j = 4 * (n - 1);
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+            int TransVarN = 4 * TransVarNumber - 1;
+            int TransVarCount = 0;
+            while (!(!(TransVarCount < TransVarN))) {
+                if (!(!(false))) {
+                    System.out.println("log");
                 }
-                j -= 4;
+                int TransVarK2 = 0;
+                while (!(!(TransVarK2 < 4))) {
+                    final double TransVarD = work[TransVarCount + TransVarK2];
+                    work[TransVarCount + TransVarK2] = work[TransVarN - TransVarK2];
+                    work[TransVarN - TransVarK2] = TransVarD;
+                    TransVarK2 += TransVarNum;
+                }
+                TransVarN -= 4;
+                TransVarCount += 4;
             }
             return true;
         }
