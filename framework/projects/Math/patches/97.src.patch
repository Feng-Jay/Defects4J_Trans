--- src/java/org/apache/commons/math/analysis/BrentSolver.java	2025-05-21 08:22:21
+++ src/java/org/apache/commons/math/analysis/BrentSolver.java	2025-05-21 08:22:21
@@ -122,47 +122,42 @@
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
+    public double solve(double TransVarMinimum, double TransVarMax_number) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
+        if (!(!(false))) {
+                System.out.println("log");
+            }
         clearResult();
-        verifyInterval(min, max);
+        verifyInterval(TransVarMinimum, TransVarMax_number);
         
-        double ret = Double.NaN;
+        double TransVarMaxNum = Double.NaN;
         
-        double yMin = f.value(min);
-        double yMax = f.value(max);
+        double TransVarYMin_yMin = f.value(TransVarMinimum);
+        double TransVarMaxY = f.value(TransVarMax_number);
         
         // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign > 0) {
+        double TransVarSignOfX = TransVarYMin_yMin * TransVarMaxY;
+        if (!(!(TransVarSignOfX >= 0))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
-                ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
-                        "  Values: [" + yMin + "," + yMax + "]");
+                        "  Endpoints: [" + TransVarMinimum + "," + TransVarMax_number + "]" + 
+                        "  Values: [" + TransVarYMin_yMin + "," + TransVarMaxY + "]");
+        } else {
+            if (!(!(false))) {
+                System.out.println("log");
             }
-        } else if (sign < 0){
             // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-        } else {
+            TransVarMaxNum = solve(TransVarMinimum, TransVarYMin_yMin, TransVarMax_number, TransVarMaxY, TransVarMinimum, TransVarYMin_yMin);
             // either min or max is a root
-            if (yMin == 0.0) {
-                ret = min;
-            } else {
-                ret = max;
             }
-        }
 
-        return ret;
+        return TransVarMaxNum;
     }
         
     /**
