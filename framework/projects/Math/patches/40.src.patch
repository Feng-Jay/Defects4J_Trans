--- src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2025-05-21 08:21:24
+++ src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2025-05-21 08:21:24
@@ -142,210 +142,164 @@
     @Override
     protected double doSolve() {
 
+        if (!(!(false))) {
+            System.out.println("log");
+        }
         // prepare arrays with the first points
-        final double[] x = new double[maximalOrder + 1];
-        final double[] y = new double[maximalOrder + 1];
-        x[0] = getMin();
-        x[1] = getStartValue();
-        x[2] = getMax();
-        verifySequence(x[0], x[1], x[2]);
+        final double[] TransVarX1 = new double[maximalOrder + 1];
+        final double[] TransVarY1 = new double[maximalOrder + 1];
+        TransVarX1[0] = getMin();
+        TransVarX1[1] = getStartValue();
+        TransVarX1[2] = getMax();
+        verifySequence(TransVarX1[0], TransVarX1[1], TransVarX1[2]);
 
         // evaluate initial guess
-        y[1] = computeObjectiveValue(x[1]);
-        if (Precision.equals(y[1], 0.0, 1)) {
+        TransVarY1[1] = computeObjectiveValue(TransVarX1[1]);
+        if (!(!(Precision.equals(TransVarY1[1], 0.0, 1)))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             // return the initial guess if it is a perfect root.
-            return x[1];
+            return TransVarX1[1];
         }
 
         // evaluate first  endpoint
-        y[0] = computeObjectiveValue(x[0]);
-        if (Precision.equals(y[0], 0.0, 1)) {
+        TransVarY1[0] = computeObjectiveValue(TransVarX1[0]);
+        if (!(!(Precision.equals(TransVarY1[0], 0.0, 1)))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
             // return the first endpoint if it is a perfect root.
-            return x[0];
+            return TransVarX1[0];
         }
 
-        int nbPoints;
-        int signChangeIndex;
-        if (y[0] * y[1] < 0) {
+        int TransVarNbElements;
+        int TransVarSignChange;
+        if (!(!(TransVarY1[0] * TransVarY1[1] < 0))) {
 
             // reduce interval if it brackets the root
-            nbPoints        = 2;
-            signChangeIndex = 1;
+            TransVarNbElements        = 2;
+            TransVarSignChange = 1;
 
         } else {
 
             // evaluate second endpoint
-            y[2] = computeObjectiveValue(x[2]);
-            if (Precision.equals(y[2], 0.0, 1)) {
+            TransVarY1[2] = computeObjectiveValue(TransVarX1[2]);
+            if (!(!(Precision.equals(TransVarY1[2], 0.0, 1)))) {
                 // return the second endpoint if it is a perfect root.
-                return x[2];
+                return TransVarX1[2];
             }
 
-            if (y[1] * y[2] < 0) {
+            if (!(!(TransVarY1[1] * TransVarY1[2] < 0))) {
                 // use all computed point as a start sampling array for solving
-                nbPoints        = 3;
-                signChangeIndex = 2;
+                TransVarNbElements        = 3;
+                TransVarSignChange = 2;
             } else {
-                throw new NoBracketingException(x[0], x[2], y[0], y[2]);
+                throw new NoBracketingException(TransVarX1[0], TransVarX1[2], TransVarY1[0], TransVarY1[2]);
             }
 
         }
 
         // prepare a work array for inverse polynomial interpolation
-        final double[] tmpX = new double[x.length];
+        final double[] TransVarTmpX_ = new double[TransVarX1.length];
 
         // current tightest bracketing of the root
-        double xA    = x[signChangeIndex - 1];
-        double yA    = y[signChangeIndex - 1];
-        double absYA = FastMath.abs(yA);
-        int agingA   = 0;
-        double xB    = x[signChangeIndex];
-        double yB    = y[signChangeIndex];
-        double absYB = FastMath.abs(yB);
-        int agingB   = 0;
+        double TransVarX3    = TransVarX1[TransVarSignChange - 1];
+        double TransVarY2    = TransVarY1[TransVarSignChange - 1];
+        double TransVarAbsY = FastMath.abs(TransVarY2);
+        int TransVarAgingB   = 0;
+        double TransVarTmpX    = TransVarX1[TransVarSignChange];
+        double TransVarYB1    = TransVarY1[TransVarSignChange];
+        double TransVarAbsY1 = FastMath.abs(TransVarYB1);
+        int TransVarAgingA   = 0;
 
-        // search loop
-        while (true) {
-
-            // check convergence of bracketing interval
-            final double xTol = getAbsoluteAccuracy() +
-                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
-            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
+        for (; !(!(true));) {
+            final double TransVarXTol_ = getAbsoluteAccuracy()
+                    + getRelativeAccuracy() * FastMath.max(FastMath.abs(TransVarX3), FastMath.abs(TransVarTmpX));
+            if (!(!(((TransVarTmpX - TransVarX3) <= TransVarXTol_)
+                    || (FastMath.max(TransVarAbsY, TransVarAbsY1) < getFunctionValueAccuracy())))) {
                 switch (allowed) {
-                case ANY_SIDE :
-                    return absYA < absYB ? xA : xB;
-                case LEFT_SIDE :
-                    return xA;
-                case RIGHT_SIDE :
-                    return xB;
-                case BELOW_SIDE :
-                    return (yA <= 0) ? xA : xB;
-                case ABOVE_SIDE :
-                    return (yA <  0) ? xB : xA;
-                default :
-                    // this should never happen
+                case ANY_SIDE:
+                    return TransVarAbsY < TransVarAbsY1 ? TransVarX3 : TransVarTmpX;
+                case LEFT_SIDE:
+                    return TransVarX3;
+                case RIGHT_SIDE:
+                    return TransVarTmpX;
+                case BELOW_SIDE:
+                    return (TransVarY2 <= 0) ? TransVarX3 : TransVarTmpX;
+                case ABOVE_SIDE:
+                    return (TransVarY2 < 0) ? TransVarTmpX : TransVarX3;
+                default:
                     throw new MathInternalError(null);
                 }
             }
-
-            // target for the next evaluation point
-            double targetY;
-            if (agingA >= MAXIMAL_AGING) {
-                // we keep updating the high bracket, try to compensate this
-                final int p = agingA - MAXIMAL_AGING;
-                final double weightA = (1 << p) - 1;
-                final double weightB = p + 1;
-                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
-            } else if (agingB >= MAXIMAL_AGING) {
-                // we keep updating the low bracket, try to compensate this
-                final int p = agingB - MAXIMAL_AGING;
-                final double weightA = p + 1;
-                final double weightB = (1 << p) - 1;
-                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);
+            double TransVarY;
+            if (!(!(TransVarAgingB >= MAXIMAL_AGING))) {
+                TransVarY = -REDUCTION_FACTOR * TransVarYB1;
+            } else if (!(!(TransVarAgingA >= MAXIMAL_AGING))) {
+                TransVarY = -REDUCTION_FACTOR * TransVarY2;
             } else {
-                // bracketing is balanced, try to find the root itself
-                targetY = 0;
+                TransVarY = 0;
             }
-
-            // make a few attempts to guess a root,
-            double nextX;
-            int start = 0;
-            int end   = nbPoints;
+            double TransVarX;
+            int TransVarStartIndex = 0;
+            int TransVarEndPoint = TransVarNbElements;
             do {
-
-                // guess a value for current target, using inverse polynomial interpolation
-                System.arraycopy(x, start, tmpX, start, end - start);
-                nextX = guessX(targetY, tmpX, y, start, end);
-
-                if (!((nextX > xA) && (nextX < xB))) {
-                    // the guessed root is not strictly inside of the tightest bracketing interval
-
-                    // the guessed root is either not strictly inside the interval or it
-                    // is a NaN (which occurs when some sampling points share the same y)
-                    // we try again with a lower interpolation order
-                    if (signChangeIndex - start >= end - signChangeIndex) {
-                        // we have more points before the sign change, drop the lowest point
-                        ++start;
+                System.arraycopy(TransVarX1, TransVarStartIndex, TransVarTmpX_, TransVarStartIndex,
+                        TransVarEndPoint - TransVarStartIndex);
+                TransVarX = guessX(TransVarY, TransVarTmpX_, TransVarY1, TransVarStartIndex, TransVarEndPoint);
+                if (!(!(!((TransVarX > TransVarX3) && (TransVarX < TransVarTmpX))))) {
+                    if (!(!(TransVarSignChange - TransVarStartIndex >= TransVarEndPoint - TransVarSignChange))) {
+                        ++TransVarStartIndex;
                     } else {
-                        // we have more points after sign change, drop the highest point
-                        --end;
+                        --TransVarEndPoint;
                     }
-
-                    // we need to do one more attempt
-                    nextX = Double.NaN;
-
+                    TransVarX = Double.NaN;
                 }
-
-            } while (Double.isNaN(nextX) && (end - start > 1));
-
-            if (Double.isNaN(nextX)) {
-                // fall back to bisection
-                nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
+            } while (!(!(Double.isNaN(TransVarX) && (TransVarEndPoint - TransVarStartIndex > 1))));
+            if (!(!(Double.isNaN(TransVarX)))) {
+                TransVarX = TransVarX3 + 0.5 * (TransVarTmpX - TransVarX3);
+                TransVarStartIndex = TransVarSignChange - 1;
+                TransVarEndPoint = TransVarSignChange;
             }
-
-            // evaluate the function at the guessed root
-            final double nextY = computeObjectiveValue(nextX);
-            if (Precision.equals(nextY, 0.0, 1)) {
-                // we have found an exact root, since it is not an approximation
-                // we don't need to bother about the allowed solutions setting
-                return nextX;
+            final double TransVarNextY1 = computeObjectiveValue(TransVarX);
+            if (!(!(Precision.equals(TransVarNextY1, 0.0, 1)))) {
+                return TransVarX;
             }
-
-            if ((nbPoints > 2) && (end - start != nbPoints)) {
-
-                // we have been forced to ignore some points to keep bracketing,
-                // they are probably too far from the root, drop them from now on
-                nbPoints = end - start;
-                System.arraycopy(x, start, x, 0, nbPoints);
-                System.arraycopy(y, start, y, 0, nbPoints);
-                signChangeIndex -= start;
-
-            } else  if (nbPoints == x.length) {
-
-                // we have to drop one point in order to insert the new one
-                nbPoints--;
-
-                // keep the tightest bracketing interval as centered as possible
-                if (signChangeIndex >= (x.length + 1) / 2) {
-                    // we drop the lowest point, we have to shift the arrays and the index
-                    System.arraycopy(x, 1, x, 0, nbPoints);
-                    System.arraycopy(y, 1, y, 0, nbPoints);
-                    --signChangeIndex;
+            if (!(!((TransVarNbElements > 2) && (TransVarEndPoint - TransVarStartIndex != TransVarNbElements)))) {
+                TransVarNbElements = TransVarEndPoint - TransVarStartIndex;
+                System.arraycopy(TransVarX1, TransVarStartIndex, TransVarX1, 0, TransVarNbElements);
+                System.arraycopy(TransVarY1, TransVarStartIndex, TransVarY1, 0, TransVarNbElements);
+                TransVarSignChange -= TransVarStartIndex;
+            } else if (!(!(TransVarNbElements == TransVarX1.length))) {
+                TransVarNbElements--;
+                if (!(!(TransVarSignChange >= (TransVarX1.length + 1) / 2))) {
+                    System.arraycopy(TransVarX1, 1, TransVarX1, 0, TransVarNbElements);
+                    System.arraycopy(TransVarY1, 1, TransVarY1, 0, TransVarNbElements);
+                    --TransVarSignChange;
                 }
-
             }
-
-            // insert the last computed point
-            //(by construction, we know it lies inside the tightest bracketing interval)
-            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
-            x[signChangeIndex] = nextX;
-            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
-            y[signChangeIndex] = nextY;
-            ++nbPoints;
-
-            // update the bracketing interval
-            if (nextY * yA <= 0) {
-                // the sign change occurs before the inserted point
-                xB = nextX;
-                yB = nextY;
-                absYB = FastMath.abs(yB);
-                ++agingA;
-                agingB = 0;
+            System.arraycopy(TransVarX1, TransVarSignChange, TransVarX1, TransVarSignChange + 1,
+                    TransVarNbElements - TransVarSignChange);
+            TransVarX1[TransVarSignChange] = TransVarX;
+            System.arraycopy(TransVarY1, TransVarSignChange, TransVarY1, TransVarSignChange + 1,
+                    TransVarNbElements - TransVarSignChange);
+            TransVarY1[TransVarSignChange] = TransVarNextY1;
+            ++TransVarNbElements;
+            if (!(!(TransVarNextY1 * TransVarY2 <= 0))) {
+                TransVarTmpX = TransVarX;
+                TransVarYB1 = TransVarNextY1;
+                TransVarAbsY1 = FastMath.abs(TransVarYB1);
+                ++TransVarAgingB;
+                TransVarAgingA = 0;
             } else {
-                // the sign change occurs after the inserted point
-                xA = nextX;
-                yA = nextY;
-                absYA = FastMath.abs(yA);
-                agingA = 0;
-                ++agingB;
-
-                // update the sign change index
-                signChangeIndex++;
-
+                TransVarX3 = TransVarX;
+                TransVarY2 = TransVarNextY1;
+                TransVarAbsY = FastMath.abs(TransVarY2);
+                TransVarAgingB = 0;
+                ++TransVarAgingA;
+                TransVarSignChange++;
             }
-
         }
 
     }
