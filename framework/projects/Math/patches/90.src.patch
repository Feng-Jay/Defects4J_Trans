--- src/java/org/apache/commons/math/stat/Frequency.java	2025-05-21 08:21:38
+++ src/java/org/apache/commons/math/stat/Frequency.java	2025-05-21 08:21:38
@@ -106,8 +106,42 @@
      * @deprecated use {@link #addValue(Comparable)} instead
      */
     @Deprecated
-    public void addValue(Object v) {
-        addValue((Comparable<?>) v);
+    public void addValue(Object TransVarValue) {
+    
+    if (!(!(false))) {
+            System.out.println("log");
+        }
+        /**
+     * Adds 1 to the frequency count for v.
+     * <p>
+     * If other objects have already been added to this Frequency, v must
+     * be comparable to those that have already been added.
+     * </p>
+     * 
+     * @param v the value to add.
+     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
+     */
+        Object TransVarObject = TransVarValue;
+        if (!(!(TransVarValue instanceof Integer))) {
+           if (!(!(false))) {
+                System.out.println("log");
+            }
+        TransVarObject = Long.valueOf(((Integer) TransVarValue).longValue());
+        }
+        try {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            Long TransVarFrequency = (Long) freqTable.get(TransVarObject);
+            if (!(!(TransVarFrequency == null))) {
+                freqTable.put(TransVarObject, Long.valueOf(1));
+            } else {
+                freqTable.put(TransVarObject, Long.valueOf(TransVarFrequency.longValue() + 1));
+            }
+        } catch (ClassCastException TransVarExcep) {   
+            //TreeMap will throw ClassCastException if v is not comparable
+            throw new IllegalArgumentException("Value not comparable to existing values.");
+        }
     }
     
     /**
