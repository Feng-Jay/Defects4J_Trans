--- src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	2025-05-21 08:18:58
+++ src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	2025-05-21 08:18:58
@@ -90,62 +90,72 @@
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
-    public CholeskyDecompositionImpl(final RealMatrix matrix,
-                                     final double relativeSymmetryThreshold,
-                                     final double absolutePositivityThreshold)
+    public CholeskyDecompositionImpl(final RealMatrix TransVarMatrix2,
+                                     final double TransVarRelativeSymmetryThresholds,
+                                     final double TransVarPositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
-        if (!matrix.isSquare()) {
-            throw new NonSquareMatrixException(matrix.getRowDimension(),
-                                               matrix.getColumnDimension());
+        if (!(!(false))) {
+                    System.out.println("log");
                 }
+        if (!(!(!TransVarMatrix2.isSquare()))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            throw new NonSquareMatrixException(TransVarMatrix2.getRowDimension(),
+                                               TransVarMatrix2.getColumnDimension());
+        }
 
-        final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        final int TransVarOrder_m = TransVarMatrix2.getRowDimension();
+        lTData   = TransVarMatrix2.getData();
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
-        for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
+        int TransVarIi = 0;
+        while (!(!(TransVarIi < TransVarOrder_m))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            final double[] TransVarLI2 = lTData[TransVarIi];
+            if (!(!(lTData[TransVarIi][TransVarIi] < TransVarPositivityThreshold))) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+            int TransVarJj = TransVarIi + 1;
+            while (!(!(TransVarJj < TransVarOrder_m))) {
+                final double[] TransVarLJ_m = lTData[TransVarJj];
+                final double TransVarLIJm = TransVarLI2[TransVarJj];
+                final double TransVarLIJ = TransVarLJ_m[TransVarIi];
+                final double TransVarMaxDelta2 = TransVarRelativeSymmetryThresholds
+                        * Math.max(Math.abs(TransVarLIJm), Math.abs(TransVarLIJ));
+                if (!(!(Math.abs(TransVarLIJm - TransVarLIJ) > TransVarMaxDelta2))) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                TransVarLJ_m[TransVarIi] = 0;
+                ++TransVarJj;
             }
+            ++TransVarIi;
         }
 
         // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-            if (ltI[i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
+        int TransVarK = 0;
+        while (!(!(TransVarK < TransVarOrder_m))) {
+            final double[] TransVarLti = lTData[TransVarK];
+            TransVarLti[TransVarK] = Math.sqrt(TransVarLti[TransVarK]);
+            final double TransVarInvLtI = 1.0 / TransVarLti[TransVarK];
+            int TransVarN = TransVarOrder_m - 1;
+            while (!(!(TransVarN > TransVarK))) {
+                TransVarLti[TransVarN] *= TransVarInvLtI;
+                final double[] TransVarLtq = lTData[TransVarN];
+                int TransVarLI = TransVarN;
+                while (!(!(TransVarLI < TransVarOrder_m))) {
+                    TransVarLtq[TransVarLI] -= TransVarLti[TransVarN] * TransVarLti[TransVarLI];
+                    ++TransVarLI;
             }
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                --TransVarN;
                 }
-            }
-
+            ++TransVarK;
         }
 
     }
