--- src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	2025-05-21 08:21:52
+++ src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	2025-05-21 08:21:52
@@ -113,177 +113,158 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
-        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
-        final double lo = getMin();
-        final double mid = getStartValue();
-        final double hi = getMax();
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        final boolean TransVarIsMaxim = getGoalType() == GoalType.MINIMIZE;
+        final double TransVarIsMinim = getMin();
+        final double TransVarMiddle = getStartValue();
+        final double TransVarLow = getMax();
 
         // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
+        final ConvergenceChecker<UnivariatePointValuePair> TransVarConvergenceChecker
             = getConvergenceChecker();
 
-        double a;
-        double b;
-        if (lo < hi) {
-            a = lo;
-            b = hi;
+        double TransVarVal;
+        double TransVarIsMiddle;
+        if (!(!(TransVarIsMinim < TransVarLow))) {
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            TransVarVal = TransVarIsMinim;
+            TransVarIsMiddle = TransVarLow;
         } else {
-            a = hi;
-            b = lo;
+            if (!(!(false))) {
+                System.out.println("log");
             }
+            TransVarVal = TransVarLow;
+            TransVarIsMiddle = TransVarIsMinim;
+        }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
-        if (!isMinim) {
-            fx = -fx;
+        double TransVarMid = TransVarMiddle;
+        double TransVarCurrent = TransVarMid;
+        double TransVarW2 = TransVarMid;
+        double TransVarMax = 0;
+        double TransVarEpsilon = 0;
+        double TransVarObjectiveFunctionValue = computeObjectiveValue(TransVarMid);
+        if (!(!(!TransVarIsMaxim))) {
+            TransVarObjectiveFunctionValue = -TransVarObjectiveFunctionValue;
         }
-        double fv = fx;
-        double fw = fx;
+        double TransVarFxv = TransVarObjectiveFunctionValue;
+        double TransVarFx = TransVarObjectiveFunctionValue;
 
-        UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair TransVarPrevPoint = null;
+        UnivariatePointValuePair TransVarBestPoint
+            = new UnivariatePointValuePair(TransVarMid, TransVarIsMaxim ? TransVarObjectiveFunctionValue : -TransVarObjectiveFunctionValue);
         // Best point encountered so far (which is the initial guess).
-        UnivariatePointValuePair best = current;
 
-        int iter = 0;
-        while (true) {
-            final double m = 0.5 * (a + b);
-            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
-            final double tol2 = 2 * tol1;
-
-            // Default stopping criterion.
-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
-
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
-                    r = (x - w) * (fx - fv);
-                    q = (x - v) * (fx - fw);
-                    p = (x - v) * q - (x - w) * r;
-                    q = 2 * (q - r);
-
-                    if (q > 0) {
-                        p = -p;
+        int TransVarIteration = 0;
+        for (; !(!(true));) {
+            final double TransVarAvg = 0.5 * (TransVarVal + TransVarIsMiddle);
+            final double TransVarTol = relativeThreshold * FastMath.abs(TransVarMid) + absoluteThreshold;
+            final double TransVarTol4 = 2 * TransVarTol;
+            final boolean TransVarStopFlag = FastMath.abs(TransVarMid - TransVarAvg) <= TransVarTol4
+                    - 0.5 * (TransVarIsMiddle - TransVarVal);
+            if (!(!(!TransVarStopFlag))) {
+                double TransVarAlpha = 0;
+                double TransVarQ1 = 0;
+                double TransVarR0 = 0;
+                double TransVarD = 0;
+                if (!(!(FastMath.abs(TransVarEpsilon) > TransVarTol))) {
+                    TransVarR0 = (TransVarMid - TransVarW2) * (TransVarObjectiveFunctionValue - TransVarFxv);
+                    TransVarQ1 = (TransVarMid - TransVarCurrent) * (TransVarObjectiveFunctionValue - TransVarFx);
+                    TransVarAlpha = (TransVarMid - TransVarCurrent) * TransVarQ1
+                            - (TransVarMid - TransVarW2) * TransVarR0;
+                    TransVarQ1 = 2 * (TransVarQ1 - TransVarR0);
+                    if (!(!(TransVarQ1 > 0))) {
+                        TransVarAlpha = -TransVarAlpha;
                     } else {
-                        q = -q;
+                        TransVarQ1 = -TransVarQ1;
                     }
-
-                    r = e;
-                    e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
-
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
+                    TransVarR0 = TransVarEpsilon;
+                    TransVarEpsilon = TransVarMax;
+                    if (!(!(TransVarAlpha > TransVarQ1 * (TransVarVal - TransVarMid)
+                            && TransVarAlpha < TransVarQ1 * (TransVarIsMiddle - TransVarMid)
+                            && FastMath.abs(TransVarAlpha) < FastMath.abs(0.5 * TransVarQ1 * TransVarR0)))) {
+                        TransVarMax = TransVarAlpha / TransVarQ1;
+                        TransVarD = TransVarMid + TransVarMax;
+                        if (!(!(TransVarD - TransVarVal < TransVarTol4 || TransVarIsMiddle - TransVarD < TransVarTol4))) {
+                            if (!(!(TransVarMid <= TransVarAvg))) {
+                                TransVarMax = TransVarTol;
                             } else {
-                                d = -tol1;
+                                TransVarMax = -TransVarTol;
                             }
                         }
                     } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
+                        if (!(!(TransVarMid < TransVarAvg))) {
+                            TransVarEpsilon = TransVarIsMiddle - TransVarMid;
                         } else {
-                            e = a - x;
+                            TransVarEpsilon = TransVarVal - TransVarMid;
                         }
-                        d = GOLDEN_SECTION * e;
+                        TransVarMax = GOLDEN_SECTION * TransVarEpsilon;
                     }
                 } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
+                    if (!(!(TransVarMid < TransVarAvg))) {
+                        TransVarEpsilon = TransVarIsMiddle - TransVarMid;
                     } else {
-                        e = a - x;
+                        TransVarEpsilon = TransVarVal - TransVarMid;
                     }
-                    d = GOLDEN_SECTION * e;
+                    TransVarMax = GOLDEN_SECTION * TransVarEpsilon;
                 }
-
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
+                if (!(!(FastMath.abs(TransVarMax) < TransVarTol))) {
+                    if (!(!(TransVarMax >= 0))) {
+                        TransVarD = TransVarMid + TransVarTol;
                     } else {
-                        u = x - tol1;
+                        TransVarD = TransVarMid - TransVarTol;
                     }
                 } else {
-                    u = x + d;
+                    TransVarD = TransVarMid + TransVarMax;
                 }
-
-                double fu = computeObjectiveValue(u);
-                if (!isMinim) {
-                    fu = -fu;
+                double TransVarFunctionValue = computeObjectiveValue(TransVarD);
+                if (!(!(!TransVarIsMaxim))) {
+                    TransVarFunctionValue = -TransVarFunctionValue;
                 }
-
-                // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-                best = best(best,
-                            best(current,
-                                 previous,
-                                 isMinim),
-                            isMinim);
-
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best;
+                TransVarPrevPoint = TransVarBestPoint;
+                TransVarBestPoint = new UnivariatePointValuePair(TransVarD,
+                        TransVarIsMaxim ? TransVarFunctionValue : -TransVarFunctionValue);
+                if (!(!(TransVarConvergenceChecker != null))) {
+                    if (!(!(TransVarConvergenceChecker.converged(TransVarIteration, TransVarPrevPoint, TransVarBestPoint)))) {
+                        return best(TransVarBestPoint, TransVarPrevPoint, TransVarIsMaxim);
                     }
                 }
-
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
+                if (!(!(TransVarFunctionValue <= TransVarObjectiveFunctionValue))) {
+                    if (!(!(TransVarD < TransVarMid))) {
+                        TransVarIsMiddle = TransVarMid;
                     } else {
-                        a = x;
+                        TransVarVal = TransVarMid;
                     }
-                    v = w;
-                    fv = fw;
-                    w = x;
-                    fw = fx;
-                    x = u;
-                    fx = fu;
+                    TransVarCurrent = TransVarW2;
+                    TransVarFxv = TransVarFx;
+                    TransVarW2 = TransVarMid;
+                    TransVarFx = TransVarObjectiveFunctionValue;
+                    TransVarMid = TransVarD;
+                    TransVarObjectiveFunctionValue = TransVarFunctionValue;
                 } else {
-                    if (u < x) {
-                        a = u;
+                    if (!(!(TransVarD < TransVarMid))) {
+                        TransVarVal = TransVarD;
                     } else {
-                        b = u;
+                        TransVarIsMiddle = TransVarD;
                     }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
-                        v = w;
-                        fv = fw;
-                        w = u;
-                        fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
-                        v = u;
-                        fv = fu;
+                    if (!(!(TransVarFunctionValue <= TransVarFx || Precision.equals(TransVarW2, TransVarMid)))) {
+                        TransVarCurrent = TransVarW2;
+                        TransVarFxv = TransVarFx;
+                        TransVarW2 = TransVarD;
+                        TransVarFx = TransVarFunctionValue;
+                    } else if (!(!(TransVarFunctionValue <= TransVarFxv || Precision.equals(TransVarCurrent, TransVarMid)
+                            || Precision.equals(TransVarCurrent, TransVarW2)))) {
+                        TransVarCurrent = TransVarD;
+                        TransVarFxv = TransVarFunctionValue;
                     }
                 }
-            } else { // Default termination (Brent's criterion).
-                return best(best,
-                            best(current,
-                                 previous,
-                                 isMinim),
-                            isMinim);
+            } else {
+                return best(TransVarBestPoint, TransVarPrevPoint, TransVarIsMaxim);
             }
-            ++iter;
+            ++TransVarIteration;
         }
     }
 
