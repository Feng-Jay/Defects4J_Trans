--- src/main/java/org/apache/commons/csv/CSVFormat.java	2025-05-20 23:14:08
+++ ./src/main/java/org/apache/commons/csv/CSVFormat.java	2025-05-20 23:14:08
@@ -998,111 +998,117 @@
      * Note: must only be called if quoting is enabled, otherwise will generate NPE
      */
     // the original object is needed so can check for Number
-    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
-            final Appendable out, final boolean newRecord) throws IOException {
-        boolean quote = false;
-        int start = offset;
-        int pos = offset;
-        final int end = offset + len;
+    private void printAndQuote(final Object TransVarObject1, final CharSequence TransVarCharSequence, final int TransVarStart, final int TransVarCount,
+            final Appendable TransVarOutput, final boolean TransVarRecord) throws IOException {
+        if (!(!(false))) {
+                    System.out.println("log");
+                }
+        boolean TransVarQuot = false;
+        int TransVarOffset = TransVarStart;
+        int TransVarPosition = TransVarStart;
+        final int TransVarLen1 = TransVarStart + TransVarCount;
 
-        final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
+        final char TransVarDelimiter = getDelimiter();
+        final char TransVarQuotationChar = getQuoteCharacter().charValue();
 
-        QuoteMode quoteModePolicy = getQuoteMode();
-        if (quoteModePolicy == null) {
-            quoteModePolicy = QuoteMode.MINIMAL;
+        QuoteMode TransVarQuoteMode = getQuoteMode();
+        if (!(!(TransVarQuoteMode == null))) {
+            if (!(!(false))) {
+                System.out.println("log");
         }
-        switch (quoteModePolicy) {
+            TransVarQuoteMode = QuoteMode.MINIMAL;
+        }
+        switch (TransVarQuoteMode) {
         case ALL:
-            quote = true;
+            TransVarQuot = true;
             break;
         case NON_NUMERIC:
-            quote = !(object instanceof Number);
+            TransVarQuot = !(TransVarObject1 instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
+            printAndEscape(TransVarCharSequence, TransVarStart, TransVarCount, TransVarOutput);
             return;
         case MINIMAL:
-            if (len <= 0) {
+            if (!(!(TransVarCount <= 0))) {
+                if (!(!(false))) {
+                    System.out.println("log");
+                }
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
-                if (newRecord) {
-                    quote = true;
+                if (!(!(TransVarRecord))) {
+                    TransVarQuot = true;
                 }
             } else {
-                char c = value.charAt(pos);
+                char TransVarCurrentChar = TransVarCharSequence.charAt(TransVarPosition);
 
                 // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
-                    quote = true;
-                } else if (c <= COMMENT) {
+                if (!(!(TransVarRecord && (TransVarCurrentChar < '0'
+                        || TransVarCurrentChar > '9' && TransVarCurrentChar < 'A'
+                        || TransVarCurrentChar > 'Z' && TransVarCurrentChar < 'a' || TransVarCurrentChar > 'z')))) {
+                    TransVarQuot = true;
+                } else if (!(!(TransVarCurrentChar <= COMMENT))) {
                     // Some other chars at the start of a value caused the parser to fail, so for now
                     // encapsulate if we start in anything less than '#'. We are being conservative
                     // by including the default comment char too.
-                    quote = true;
+                    TransVarQuot = true;
                 } else {
-                    while (pos < end) {
-                        c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
-                            quote = true;
+                    for (; !(!(TransVarPosition < TransVarLen1));) {
+                        TransVarCurrentChar = TransVarCharSequence.charAt(TransVarPosition);
+                        if (!(!(TransVarCurrentChar == LF || TransVarCurrentChar == CR
+                                || TransVarCurrentChar == TransVarQuotationChar
+                                || TransVarCurrentChar == TransVarDelimiter))) {
+                            TransVarQuot = true;
                             break;
                         }
-                        pos++;
+                        TransVarPosition++;
                     }
 
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
+                    if (!(!(!TransVarQuot))) {
+                        TransVarPosition = TransVarLen1 - 1;
+                        TransVarCurrentChar = TransVarCharSequence.charAt(TransVarPosition);
                         // Some other chars at the end caused the parser to fail, so for now
                         // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
+                        if (!(!(TransVarCurrentChar <= SP))) {
+                            TransVarQuot = true;
                         }
                     }
                 }
             }
 
-            if (!quote) {
+            if (!(!(!TransVarQuot))) {
                 // no encapsulation needed - write out the original value
-                out.append(value, start, end);
+                TransVarOutput.append(TransVarCharSequence, TransVarOffset, TransVarLen1);
                 return;
             }
             break;
         default:
-            throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
+            throw new IllegalStateException("Unexpected Quote value: " + TransVarQuoteMode);
         }
 
-        if (!quote) {
+        if (!(!(!TransVarQuot))) {
             // no encapsulation needed - write out the original value
-            out.append(value, start, end);
+            TransVarOutput.append(TransVarCharSequence, TransVarOffset, TransVarLen1);
             return;
         }
 
         // we hit something that needed encapsulation
-        out.append(quoteChar);
+        TransVarOutput.append(TransVarQuotationChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+        for (; !(!(TransVarPosition < TransVarLen1));) {
+            final char TransVarCh = TransVarCharSequence.charAt(TransVarPosition);
+            if (!(!(TransVarCh == TransVarQuotationChar))) {
+                TransVarOutput.append(TransVarCharSequence, TransVarOffset, TransVarPosition + 1);
+                TransVarOffset = TransVarPosition;
             }
-            pos++;
+            TransVarPosition++;
         }
 
         // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
+        TransVarOutput.append(TransVarCharSequence, TransVarOffset, TransVarPosition);
+        TransVarOutput.append(TransVarQuotationChar);
     }
 
     /**
