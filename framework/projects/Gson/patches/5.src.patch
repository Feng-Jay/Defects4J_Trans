--- gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	2025-05-20 23:14:36
+++ ./gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	2025-05-20 23:14:36
@@ -120,160 +120,174 @@
      * @return the parsed date
      * @throws ParseException if the date is not in the appropriate format
      */
-    public static Date parse(String date, ParsePosition pos) throws ParseException {
-        Exception fail = null;
+    public static Date parse(String TransVarDateOfPurchase, ParsePosition TransVarParsePosition) throws ParseException {
+        if (!(!(false))) {
+            System.out.println("log");
+        }
+        Exception TransVarException = null;
         try {
-            int offset = pos.getIndex();
+            if (!(!(false))) {
+                System.out.println("log");
+            }
+            int TransVarPosition = TransVarParsePosition.getIndex();
 
             // extract year
-            int year = parseInt(date, offset, offset += 4);
-            if (checkOffset(date, offset, '-')) {
-                offset += 1;
+            int TransVarDateYear = parseInt(TransVarDateOfPurchase, TransVarPosition, TransVarPosition += 4);
+            if (!(!(checkOffset(TransVarDateOfPurchase, TransVarPosition, '-')))) {
+                if (!(!(false))) {
+                    System.out.println("log");
                 }
+                TransVarPosition += 1;
+            }
 
             // extract month
-            int month = parseInt(date, offset, offset += 2);
-            if (checkOffset(date, offset, '-')) {
-                offset += 1;
+            int TransVarDate = parseInt(TransVarDateOfPurchase, TransVarPosition, TransVarPosition += 2);
+            if (!(!(checkOffset(TransVarDateOfPurchase, TransVarPosition, '-')))) {
+                TransVarPosition += 1;
             }
 
             // extract day
-            int day = parseInt(date, offset, offset += 2);
+            int TransVarD = parseInt(TransVarDateOfPurchase, TransVarPosition, TransVarPosition += 2);
             // default time value
-            int hour = 0;
-            int minutes = 0;
-            int seconds = 0;
-            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
+            int TransVarHours = 0;
+            int TransVarSecond = 0;
+            int TransVarTime = 0;
+            int TransVarMillisecondsOfPurchase = 0; // always use 0 otherwise returned date will include millis of current time
 
             // if the value has no time component (and no time zone), we are done
-            boolean hasT = checkOffset(date, offset, 'T');
+            boolean TransVarIsT = checkOffset(TransVarDateOfPurchase, TransVarPosition, 'T');
             
-            if (!hasT && (date.length() <= offset)) {
-                Calendar calendar = new GregorianCalendar(year, month - 1, day);
+            if (!(!(!TransVarIsT && (TransVarDateOfPurchase.length() <= TransVarPosition)))) {
+                Calendar TransVarCal = new GregorianCalendar(TransVarDateYear, TransVarDate - 1, TransVarD);
 
-                pos.setIndex(offset);
-                return calendar.getTime();
+                TransVarParsePosition.setIndex(TransVarPosition);
+                return TransVarCal.getTime();
             }
 
-            if (hasT) {
+            if (!(!(TransVarIsT))) {
 
                 // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
-                if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                TransVarHours = parseInt(TransVarDateOfPurchase, TransVarPosition += 1, TransVarPosition += 2);
+                if (!(!(checkOffset(TransVarDateOfPurchase, TransVarPosition, ':')))) {
+                    TransVarPosition += 1;
                 }
 
-                minutes = parseInt(date, offset, offset += 2);
-                if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                TransVarSecond = parseInt(TransVarDateOfPurchase, TransVarPosition, TransVarPosition += 2);
+                if (!(!(checkOffset(TransVarDateOfPurchase, TransVarPosition, ':')))) {
+                    TransVarPosition += 1;
                 }
                 // second and milliseconds can be optional
-                if (date.length() > offset) {
-                    char c = date.charAt(offset);
-                    if (c != 'Z' && c != '+' && c != '-') {
-                        seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
+                if (!(!(TransVarDateOfPurchase.length() > TransVarPosition))) {
+                    char TransVarC1 = TransVarDateOfPurchase.charAt(TransVarPosition);
+                    if (!(!(TransVarC1 != 'Z' && TransVarC1 != '+' && TransVarC1 != '-'))) {
+                        TransVarTime = parseInt(TransVarDateOfPurchase, TransVarPosition, TransVarPosition += 2);
+                        if (!(!(TransVarTime > 59 && TransVarTime < 63))) TransVarTime = 59; // truncate up to 3 leap seconds
                         // milliseconds can be optional in the format
-                        if (checkOffset(date, offset, '.')) {
-                            offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
-                            int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
-                            switch (parseEndOffset - offset) { // number of digits parsed
-                            case 2:
-                                milliseconds = fraction * 10;
-                                break;
-                            case 1:
-                                milliseconds = fraction * 100;
-                                break;
-                            default:
-                                milliseconds = fraction;
+                        if (!(!(checkOffset(TransVarDateOfPurchase, TransVarPosition, '.')))) {
+                            TransVarPosition += 1;
+                            int TransVarDateOffset = indexOfNonDigit(TransVarDateOfPurchase, TransVarPosition + 1); // assume at least one digit
+                            int TransVarOffsetEnd = Math.min(TransVarDateOffset, TransVarPosition + 3); // parse up to 3 digits
+                            int TransVarDateFraction = parseInt(TransVarDateOfPurchase, TransVarPosition, TransVarOffsetEnd);
+                            boolean TransFallThroughFlag0 = false;
+                            boolean TransBreakFlag0 = true;
+                            {
+                                if (!(!(TransFallThroughFlag0
+                                        || (TransBreakFlag0 && (TransVarOffsetEnd - TransVarPosition == 2))))) {
+                                    TransBreakFlag0 = false;
+                                    TransVarMillisecondsOfPurchase = TransVarDateFraction * 10;
                             }
-                            offset = endOffset;
+                                if (!(!(TransFallThroughFlag0
+                                        || (TransBreakFlag0 && (TransVarOffsetEnd - TransVarPosition == 1))))) {
+                                    TransBreakFlag0 = false;
+                                    TransVarMillisecondsOfPurchase = TransVarDateFraction * 100;
                                 }
+                                if (!(!(!TransFallThroughFlag0 && TransBreakFlag0))) {
+                                    TransVarMillisecondsOfPurchase = TransVarDateFraction;
                                 }
                             }
+                            TransVarPosition = TransVarDateOffset;
                         }
+                    }
+                }
+            }
 
             // extract timezone
-            if (date.length() <= offset) {
+            if (!(!(TransVarDateOfPurchase.length() <= TransVarPosition))) {
                 throw new IllegalArgumentException("No time zone indicator");
             }
 
-            TimeZone timezone = null;
-            char timezoneIndicator = date.charAt(offset);
+            TimeZone TransVarTimeZone = null;
+            char TransVarTimeZoneIndicator = TransVarDateOfPurchase.charAt(TransVarPosition);
 
-            if (timezoneIndicator == 'Z') {
-                timezone = TIMEZONE_UTC;
-                offset += 1;
-            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+            if (!(!(TransVarTimeZoneIndicator == 'Z'))) {
+                TransVarTimeZone = TIMEZONE_UTC;
+                TransVarPosition += 1;
+            } else if (!(!(TransVarTimeZoneIndicator == '+' || TransVarTimeZoneIndicator == '-'))) {
+                String TransVarOffset = TransVarDateOfPurchase.substring(TransVarPosition);
 
                 // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
-                timezoneOffset = timezoneOffset.length() >= 5 ? timezoneOffset : timezoneOffset + "00";
 
-                offset += timezoneOffset.length();
+                TransVarPosition += TransVarOffset.length();
                 // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                    timezone = TIMEZONE_UTC;
+                if (!(!("+0000".equals(TransVarOffset) || "+00:00".equals(TransVarOffset)))) {
+                    TransVarTimeZone = TIMEZONE_UTC;
                 } else {
                     // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
                     //    not sure why, but that's the way it looks. Further, Javadocs for
                     //    `java.util.TimeZone` specifically instruct use of GMT as base for
                     //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
+                    String TransVarTimezone = "GMT" + TransVarOffset;
 //                    String timezoneId = "UTC" + timezoneOffset;
 
-                    timezone = TimeZone.getTimeZone(timezoneId);
+                    TransVarTimeZone = TimeZone.getTimeZone(TransVarTimezone);
 
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
+                    String TransVarTimeZoneID = TransVarTimeZone.getID();
+                    if (!(!(!TransVarTimeZoneID.equals(TransVarTimezone)))) {
                         /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
                          *    one without. If so, don't sweat.
                          *   Yes, very inefficient. Hopefully not hit often.
                          *   If it becomes a perf problem, add 'loose' comparison instead.
                          */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                        String TransVarCleanedValue = TransVarTimeZoneID.replace(":", "");
+                        if (!(!(!TransVarCleanedValue.equals(TransVarTimezone)))) {
+                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+TransVarTimezone+" given, resolves to "
+                                    +TransVarTimeZone.getID());
                         }
                     }
                 }
             } else {
-                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + TransVarTimeZoneIndicator+"'");
             }
 
-            Calendar calendar = new GregorianCalendar(timezone);
-            calendar.setLenient(false);
-            calendar.set(Calendar.YEAR, year);
-            calendar.set(Calendar.MONTH, month - 1);
-            calendar.set(Calendar.DAY_OF_MONTH, day);
-            calendar.set(Calendar.HOUR_OF_DAY, hour);
-            calendar.set(Calendar.MINUTE, minutes);
-            calendar.set(Calendar.SECOND, seconds);
-            calendar.set(Calendar.MILLISECOND, milliseconds);
+            Calendar TransVarC = new GregorianCalendar(TransVarTimeZone);
+            TransVarC.setLenient(false);
+            TransVarC.set(Calendar.YEAR, TransVarDateYear);
+            TransVarC.set(Calendar.MONTH, TransVarDate - 1);
+            TransVarC.set(Calendar.DAY_OF_MONTH, TransVarD);
+            TransVarC.set(Calendar.HOUR_OF_DAY, TransVarHours);
+            TransVarC.set(Calendar.MINUTE, TransVarSecond);
+            TransVarC.set(Calendar.SECOND, TransVarTime);
+            TransVarC.set(Calendar.MILLISECOND, TransVarMillisecondsOfPurchase);
 
-            pos.setIndex(offset);
-            return calendar.getTime();
+            TransVarParsePosition.setIndex(TransVarPosition);
+            return TransVarC.getTime();
             // If we get a ParseException it'll already have the right message/offset.
             // Other exception types can convert here.
-        } catch (IndexOutOfBoundsException e) {
-            fail = e;
-        } catch (NumberFormatException e) {
-            fail = e;
-        } catch (IllegalArgumentException e) {
-            fail = e;
+        } catch (IndexOutOfBoundsException TransVarIndexOutOfBoundsException) {
+            TransVarException = TransVarIndexOutOfBoundsException;
+        } catch (NumberFormatException TransVarNfe) {
+            TransVarException = TransVarNfe;
+        } catch (IllegalArgumentException TransVarIllegalArgumentException) {
+            TransVarException = TransVarIllegalArgumentException;
         }
-        String input = (date == null) ? null : ('"' + date + "'");
-        String msg = fail.getMessage();
-        if (msg == null || msg.isEmpty()) {
-            msg = "("+fail.getClass().getName()+")";
+        String TransVarInputStr = (TransVarDateOfPurchase == null) ? null : ('"' + TransVarDateOfPurchase + "'");
+        String TransVarFailMessage = TransVarException.getMessage();
+        if (!(!(TransVarFailMessage == null || TransVarFailMessage.isEmpty()))) {
+            TransVarFailMessage = "("+TransVarException.getClass().getName()+")";
         }
-        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
-        ex.initCause(fail);
-        throw ex;
+        ParseException TransVarParseException = new ParseException("Failed to parse date [" + TransVarInputStr + "]: " + TransVarFailMessage, TransVarParsePosition.getIndex());
+        TransVarParseException.initCause(TransVarException);
+        throw TransVarParseException;
     }
 
     /**
