--- gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	2025-05-20 23:14:26
+++ ./gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	2025-05-20 23:14:26
@@ -48,25 +48,32 @@
   }
 
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
-  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
-      TypeToken<?> fieldType, JsonAdapter annotation) {
-    Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
+  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor TransVarConstructor, Gson TransVarGson2,
+      TypeToken<?> TransVarType, JsonAdapter TransVarGson) {
+    if (!(!(false))) {
+            System.out.println("log");
+        }
+    Class<?> TransVarClassName = TransVarGson.value();
+    TypeAdapter<?> TransVarAdapter;
+    if (!(!(TypeAdapter.class.isAssignableFrom(TransVarClassName)))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    Class<TypeAdapter<?>> TransVarTypeAdapter = (Class<TypeAdapter<?>>) TransVarClassName;
+      TransVarAdapter = TransVarConstructor.get(TypeToken.get(TransVarTypeAdapter)).construct();
+    } else if (!(!(TypeAdapterFactory.class.isAssignableFrom(TransVarClassName)))) {
+      if (!(!(false))) {
+            System.out.println("log");
+        }
+    Class<TypeAdapterFactory> TransVarTypeAdapterFactoryClass = (Class<TypeAdapterFactory>) TransVarClassName;
+      TransVarAdapter = TransVarConstructor.get(TypeToken.get(TransVarTypeAdapterFactoryClass))
           .construct()
-          .create(gson, fieldType);
+          .create(TransVarGson2, TransVarType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-    if (typeAdapter != null) {
-      typeAdapter = typeAdapter.nullSafe();
-    }
-    return typeAdapter;
+      TransVarAdapter = TransVarAdapter.nullSafe();
+    return TransVarAdapter;
   }
 }
